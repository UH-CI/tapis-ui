!function(){"use strict";var e,t={9087:function(e,t,n){var r={};n.r(r),n.d(r,{ACCOUNT:function(){return Re},ALLOCATIONS:function(){return ke},APPLICATIONS:function(){return xe},DASHBOARD:function(){return Oe},DATA:function(){return Le},HISTORY:function(){return Me},TICKETS:function(){return Ue},UI:function(){return je}});var a=n(7294),l=n.n(a),o=n(3935),s=n(9226),i=n(3727),c=n(879),u=(n(4500),n(797)),m=function(){return(m=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},d={token:null,loading:!1,error:null},p=n(6486),f=function(){return(f=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},E=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},g=function(e){return{loading:!1,error:null,results:[],offset:0,limit:e}},h=function(e){return f(f({},e),{loading:!0,error:null})},v=function(e,t){return f(f({},e),{loading:!1,error:t})},y=function(e,t,n,r,a){var l,o=(0,p.cloneDeep)(e);if(!t.length)return o;if(o.offset=function(e){return void 0===e?0:e}(n),o.limit=function(e,t){return void 0===e?t:e}(r,a),o.loading=!1,o.error=null,0===o.offset)return o.results=t,o;if(e.results.length===n)return o.results=o.results.concat(t),o;if(e.results.length>n)return(l=o.results).splice.apply(l,E([n,r],t)),o;if(e.results.length<n){for(var s=[],i=0;i<n-e.results.length;i++)s.push(null);return o.results=o.results.concat(s).concat(t),o}return o},b=function(){return(b=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},_=g(100),S={systems:b({},_)},N=function(e,t){return h(e)},P=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},w=function(e,t){return v(e,t.error)};var I=function(){return(I=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},T={listings:{}},A=function(e,t,n){var r=I({},e);return t in r||(r[t]={}),n in r[t]||(r[t][n]=g(1e3)),r},C=function(e,t){var n=t.systemId,r=t.path,a=t.incoming,l=t.offset,o=t.limit,s=A(e,n,r);return s[n][r]=y(s[n][r],a,l,o,1e3),s},O=function(e,t){var n=t.systemId,r=t.path,a=t.error,l=A(e,n,r);return l[n][r]=v(l[n][r],a),l};var L=function(){return(L=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},k=g(100),x=(L({},k),function(e,t){return h(e)}),M=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},R=function(e,t){return v(e,t.error)},U=function(e,t){switch(t.type){case"TAPIS_APPS_LIST_REQUEST":return L(L({},e),{apps:x(e.apps,t.payload)});case"TAPIS_APPS_LIST_SUCCESS":return L(L({},e),{apps:M(e.apps,t.payload)});case"TAPIS_APPS_LIST_FAILURE":return L(L({},e),{apps:R(e.apps,t.payload)});default:return e}},j=function(){return(j=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},F=g(100),D={apps:j({},F)};var Z=function(){return(Z=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},z=(g(100),function(e,t){return h(e)}),H=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},q=function(e,t){return v(e,t.error)},B=function(e,t){switch(t.type){case"TAPIS_JOBS_LIST_REQUEST":return Z(Z({},e),{jobs:z(e.jobs,t.payload)});case"TAPIS_JOBS_LIST_SUCCESS":return Z(Z({},e),{jobs:H(e.jobs,t.payload)});case"TAPIS_JOBS_LIST_FAILURE":return Z(Z({},e),{jobs:q(e.jobs,t.payload)});default:return e}},Q=function(){return(Q=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},J=function(e,t){switch(t.type){case"TAPIS_JOBS_SUBMIT_REQUEST":return Q(Q({},e),{submission:{loading:!0,error:null,result:null}});case"TAPIS_JOBS_SUBMIT_SUCCESS":return Q(Q({},e),{submission:{loading:!1,error:null,result:t.payload.result}});case"TAPIS_JOBS_SUBMIT_FAILURE":return Q(Q({},e),{submission:{loading:!1,error:t.payload.error,result:null}});case"TAPIS_JOBS_SUBMIT_RESET":return Q(Q({},e),{submission:{loading:!1,error:null,result:null}});default:return e}},V=function(){return(V=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},W=g(100),Y={jobs:V({},W),submission:{loading:!1,error:null,result:null}};var G=(0,c.UY)({authenticator:function(e,t){switch(void 0===e&&(e=d),t.type){case"TAPIS_AUTH_LOGIN_REQUEST":return m(m({},e),{token:null,loading:!0,error:null});case"TAPIS_AUTH_LOGIN_SUCCESS":return m(m({},e),{token:t.payload.token,loading:!1,error:null});case"TAPIS_AUTH_LOGIN_FAILURE":return m(m({},e),{token:null,loading:!1,error:t.payload.error});default:return e}},systems:function(e,t){switch(void 0===e&&(e=S),t.type){case"TAPIS_SYSTEMS_LIST_REQUEST":return b(b({},e),{systems:N(e.systems,t.payload)});case"TAPIS_SYSTEMS_LIST_SUCCESS":return b(b({},e),{systems:P(e.systems,t.payload)});case"TAPIS_SYSTEMS_LIST_FAILURE":return b(b({},e),{systems:w(e.systems,t.payload)});default:return e}},files:function(e,t){switch(void 0===e&&(e=T),t.type){case"TAPIS_FILES_LIST_REQUEST":return I(I({},e),{listings:(n=e.listings,r=t.payload,a=r.systemId,l=r.path,o=A(n,a,l),o[a][l]=h(o[a][l]),o)});case"TAPIS_FILES_LIST_SUCCESS":return I(I({},e),{listings:C(e.listings,t.payload)});case"TAPIS_FILES_LIST_FAILURE":return I(I({},e),{listings:O(e.listings,t.payload)});default:return e}var n,r,a,l,o},apps:function(e,t){void 0===e&&(e=D);var n=[U],r=j({},e);return n.forEach((function(e){r=e(r,t)})),r},jobs:function(e,t){void 0===e&&(e=Y);var n=[B,J],r=V({},e);return n.forEach((function(e){r=e(r,t)})),r}}),X=n(4857),K=n(4438),$=n(4098),ee=n.n($),te=function(){return(te=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},ne=function(e,t){var n,r,a,l,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&l[0]?r.return:l[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,l[1])).done)return a;switch(r=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,r=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){o.label=l[1];break}if(6===l[0]&&o.label<a[1]){o.label=a[1],a=l;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(l);break}a[2]&&o.ops.pop(),o.trys.pop();continue}l=t.call(e,o)}catch(e){l=[6,e],r=0}finally{n=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}};function re(e){var t,n,r,a,l,o,s,i;return ne(this,(function(c){switch(c.label){case 0:return t=e.config,n=e.username,r=e.password,a=process.env.TAPIS_TENANT_URL,l=t&&t.tenant||a,o=new K._F.Configuration({basePath:l,fetchApi:ee()}),s=new K._F.TokensApi(o),i={reqCreateToken:{grant_type:"password",username:n,password:r}},[4,(0,X.RE)([s,s.createToken],i)];case 1:return[2,c.sent().result.access_token]}}))}function ae(e){var t,n;return ne(this,(function(r){switch(r.label){case 0:return r.trys.push([0,5,,9]),[4,(0,X.RE)(re,e.payload)];case 1:return t=r.sent(),[4,(0,X.gz)({type:"TAPIS_AUTH_LOGIN_SUCCESS",payload:{token:t}})];case 2:return r.sent(),e.payload.onAuth?[4,(0,X.RE)(e.payload.onAuth,te({},t))]:[3,4];case 3:r.sent(),r.label=4;case 4:return[3,9];case 5:return n=r.sent(),[4,(0,X.gz)({type:"TAPIS_AUTH_LOGIN_FAILURE",payload:{error:n}})];case 6:return r.sent(),e.payload.onAuth?[4,(0,X.RE)(e.payload.onAuth,n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,9];case 9:return[2]}}))}function le(){return ne(this,(function(e){switch(e.label){case 0:return[4,(0,X.A7)("TAPIS_AUTH_LOGIN_REQUEST",ae)];case 1:return e.sent(),[2]}}))}var oe=function(e){return e.authenticator.token},se=function(e,t){var n,r,a,l,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&l[0]?r.return:l[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,l[1])).done)return a;switch(r=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,r=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){o.label=l[1];break}if(6===l[0]&&o.label<a[1]){o.label=a[1],a=l;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(l);break}a[2]&&o.ops.pop(),o.trys.pop();continue}l=t.call(e,o)}catch(e){l=[6,e],r=0}finally{n=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}},ie=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function ce(e){var t,n,r,a,l,o,s,i,c,u,m,d,p,f,E,g,h;return se(this,(function(v){switch(v.label){case 0:t=e.payload,n=t.config,r=t.onApi,a=t.onRequest,l=t.onSuccess,o=t.onFailure,s=t.module,i=t.func,c=t.args,v.label=1;case 1:return v.trys.push([1,11,,19]),a?[4,(0,X.gz)(a())]:[3,3];case 2:v.sent(),v.label=3;case 3:return[4,(0,X.Ys)(oe)];case 4:return u=v.sent(),m=n&&n.jwt||u.access_token,d=process.env.TAPIS_TENANT_URL,p=n&&n.tenant||d,f=new s.Configuration({basePath:p,headers:{"X-Tapis-Token":m}}),E=new e.payload.api(f),[4,X.RE.apply(void 0,ie([[E,i]],c))];case 5:return g=v.sent(),l?[4,(0,X.gz)(l(g))]:[3,7];case 6:v.sent(),v.label=7;case 7:return r?[4,(0,X.RE)(r,g)]:[3,9];case 8:v.sent(),v.label=9;case 9:return[4,(0,X.gz)({type:"TAPIS_REDUX_API_SUCCESS"})];case 10:return v.sent(),[3,19];case 11:return(h=v.sent()).json?[4,h.json()]:[3,13];case 12:h=v.sent(),v.label=13;case 13:return o?[4,(0,X.gz)(o(h))]:[3,15];case 14:v.sent(),v.label=15;case 15:return r?[4,(0,X.RE)(r,h)]:[3,17];case 16:v.sent(),v.label=17;case 17:return[4,(0,X.gz)({type:"TAPIS_REDUX_API_FAILURE"})];case 18:return v.sent(),[3,19];case 19:return[2]}}))}function ue(){return se(this,(function(e){switch(e.label){case 0:return[4,(0,X.ib)("TAPIS_REDUX_API_REQUEST",ce)];case 1:return e.sent(),[2]}}))}var me=function(e,t){var n,r,a,l,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&l[0]?r.return:l[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,l[1])).done)return a;switch(r=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,r=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){o.label=l[1];break}if(6===l[0]&&o.label<a[1]){o.label=a[1],a=l;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(l);break}a[2]&&o.ops.pop(),o.trys.pop();continue}l=t.call(e,o)}catch(e){l=[6,e],r=0}finally{n=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}};function de(){return me(this,(function(e){switch(e.label){case 0:return[4,(0,X.$6)([ue(),le()])];case 1:return e.sent(),[2]}}))}var pe=(0,u.ZP)(),fe=[];fe.push(pe);var Ee=function(){var e=(0,c.MT)(G,c.md.apply(void 0,fe));return pe.run(de),e},ge=n(5977),he=n(5538),ve=n(7954),ye=n(609),be=n(7975),_e=function(e){var t=(0,s.v9)((function(e){return e.authenticator}));return{token:t.token,loading:t.loading,error:t.error,login:function(t,n,r){return void 0===r&&(r=null),{type:"TAPIS_AUTH_LOGIN_REQUEST",payload:{username:t,password:n,config:e,onAuth:r}}}}};function Se(e){return{type:"TAPIS_REDUX_API_REQUEST",payload:e}}var Ne=function(e){return void 0===e&&(e=null),{systems:(0,s.v9)((function(e){return e.systems})).systems,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return Se({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_SYSTEMS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_SYSTEMS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_SYSTEMS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.lA,api:K.lA.SystemsApi,func:K.lA.SystemsApi.prototype.getSystems,args:[n]})}(e,t.onList,t.request||{})}}},Pe=function(e){return void 0===e&&(e=null),{listings:(0,s.v9)((function(e){return e.files})).listings,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null);var r=n.systemId,a=n.path,l=n.offset,o=n.limit;return Se({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_FILES_LIST_REQUEST",payload:{systemId:r,path:a,offset:l,limit:o}}},onSuccess:function(e){return{type:"TAPIS_FILES_LIST_SUCCESS",payload:{systemId:r,path:a,incoming:e.result,offset:l,limit:o}}},onFailure:function(e){return{type:"TAPIS_FILES_LIST_FAILURE",payload:{systemId:r,path:a,offset:l,limit:o,error:e}}},module:K.hv,api:K.hv.FileOperationsApi,func:K.hv.FileOperationsApi.prototype.listFiles,args:[n]})}(e,t.onList,t.request)}}},we=function(e){return void 0===e&&(e=null),{apps:(0,s.v9)((function(e){return e.apps})).apps,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return Se({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_APPS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_APPS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_APPS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.BQ,api:K.BQ.ApplicationsApi,func:K.BQ.ApplicationsApi.prototype.getApps,args:[n]})}(e,t.onList,t.request||{})}}},Ie=function(e){void 0===e&&(e=null);var t=(0,s.v9)((function(e){return e.jobs}));return{jobs:t.jobs,submission:t.submission,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return Se({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_JOBS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_JOBS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_JOBS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.pe,api:K.pe.JobsApi,func:K.pe.JobsApi.prototype.getJobList,args:[n]})}(e,t.onList,t.request)},submit:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null);var r={reqSubmitJob:n};return Se({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_JOBS_SUBMIT_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_JOBS_SUBMIT_SUCCESS",payload:{params:n,result:e.result}}},onFailure:function(e){return{type:"TAPIS_JOBS_SUBMIT_FAILURE",payload:{error:e,params:n}}},module:K.pe,api:K.pe.JobsApi,func:K.pe.JobsApi.prototype.submitJob,args:[r]})}(e,t.onSubmit,t.request)},resetSubmit:function(){return{type:"TAPIS_JOBS_SUBMIT_RESET",payload:{}}}}},Te=n(6955);var Ae=function(e){var t=e.placement,n=e.className;return l().createElement("div",{className:"loading-icon "+n,"data-testid":"loading-spinner"},l().createElement(Te.Z,{className:t}))};Ae.defaultProps={placement:"section",className:""};var Ce=Ae,Oe="This page allows you to monitor your job status, get help with tickets, and view the status of the High Performance Computing (HPC) systems.",Le="This page allows you to upload and manage your files.",ke="This page allows you to monitor the status of allocations on the HPC systems and view a breakdown of team usage.",xe="This page allows you to submit jobs to the HPC systems or access Cloud services using a variety of applications.",Me="This page allows you to monitor a log of all previous job submissions.",Re="This page allows you to manage your account profile, change your password and view software licenses.",Ue="This page allows you to submit a help request via an RT Ticket.",je="This hidden page allows developers to review UI components in isolation.";function Fe(e){var t=e.children,n=e.className,o=e.routeName,s=e.welcomeText||r[o],i=o||s,c=s&&l().createElement(Kt,{messageName:i},s),u=Gt(o)||t.length>0;return(0,a.useEffect)((function(){u?document.body.classList.add("has-message"):document.body.classList.remove("has-message")}),[u]),l().createElement("aside",{className:(n?n+" ":"")+"SectionMessages-module__root--1QB6cM4uPv"},c,t)}Fe.defaultProps={children:"",className:"",routeName:"",welcomeText:""};var De=Fe,Ze=n(7411),ze={},He={oneRow:"one-row",oneColumn:"one-column",twoColumn:"two-column"};!function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n]}([],Object.keys(He));function qe(e){var t,n=e.className,r=e.children,a=e.layoutName,o=e.shouldScroll,s=e.shouldDebugLayout,i=e.tagName,c=["styles.root"],u=He[a],m=i;return o&&c.push("styles.should-scroll"),s&&c.push("styles.should-debug-layout"),u&&c.push("layoutStyles."+u),t=c.join(" "),l().createElement(m,{className:(n?n+" ":"")+(0,Ze.Z)(t,ze,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},r)}qe.defaultProps={className:"",shouldScroll:!1,shouldDebugLayout:!1,tagName:"div"};var Be=qe;function Qe(e){var t=e.bodyClassName,n=e.children,r=e.className,o=e.content,s=e.contentClassName,i=e.contentLayoutName,c=e.contentShouldScroll,u=e.header,m=e.headerActions,d=e.headerClassName,p=e.manualContent,f=e.manualHeader,E=e.messages,g=e.messagesClassName,h=e.routeName,v=e.welcomeMessageText,y=u||d||m;if(p&&(o||s||i||c))throw new Error("When passing `manualContent`, the following props are ineffectual: `content`, `contentClassName`, `contentLayoutName`, `contentShouldScroll`");if(f&&(u||d||m))throw new Error("When passing `manualHeader`, the following props are ineffectual: `header`, `headerClassName`, `headerActions`");return(0,a.useEffect)((function(){return t&&document.body.classList.add(t),function(){t&&document.body.classList.remove(t)}}),[t]),l().createElement("section",{className:(r?r+" ":"")+"Section-module__root--2m3Ew8L7fZ"},l().createElement(De,{routeName:h,className:(g?g+" ":"")+"Section-module__messages--30rTl5JQJt",welcomeText:v},E),f?l().createElement(l().Fragment,null,f):y&&l().createElement(We,{className:(d?d+" ":"")+"Section-module__header--15uAiolZtN",actions:m},u),p?l().createElement(l().Fragment,null,p,n):l().createElement(Be,{tagName:"main",className:(s?s+" ":"")+"Section-module__content--1c2lm9Op7V",layoutName:i||"oneRow",shouldScroll:c},o,n))}Qe.defaultProps={bodyClassName:"",children:"",className:"",content:"",contentClassName:"",contentLayoutName:"",contentShouldScroll:!1,header:"",headerActions:"",headerClassName:"",manualContent:void 0,manualHeader:void 0,messages:"",messagesClassName:"",routeName:"",welcomeMessageText:""};var Je={"./SectionHeader.module.css":{root:"SectionHeader-module__root--3EcA5dZFJf",heading:"SectionHeader-module__heading--CLhSCcnpC4","for-form":"SectionHeader-module__for-form--cFcJjuP3gr","for-table":"SectionHeader-module__for-table--3LJZ80fi88"}};function Ve(e){var t,n=e.actions,r=e.children,a=e.className,o=e.isForForm,s=e.isForTable,i=["root"],c=o||s?"h3":"h2";return o&&i.push("for-form"),s&&i.push("for-table"),t=i.join(" "),l().createElement("header",{className:(a?a+" ":"")+(0,Ze.Z)(t,Je,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},r&&l().createElement(c,{className:"SectionHeader-module__heading--CLhSCcnpC4"},r),n)}Ve.defaultProps={actions:"",className:"",children:"",isForForm:!1,isForTable:!1};var We=Ve,Ye=n(1389);function Ge(e){return 0===e.numberOfFiles?null:l().createElement("span",{className:"rejected-file-message text-danger"},"One or more of your files exceeds the maximum size for an upload and were not attached.")}function Xe(e){var t=e.files,n=e.onSetFiles,r=e.onRejectedFiles,o=e.maxSize,s=e.maxSizeMessage,i=e.onRemoveFile,c=e.isSubmitted,u=(0,a.useState)(0),m=u[0],d=u[1],p=(0,Ye.u)({noClick:!0,maxSize:o,onDrop:function(e){n(e),d(0)},onDropRejected:function(e){r&&r(e),d(e.length)}}),f=p.getRootProps,E=p.open,g=p.getInputProps,h=t&&t.length>0;return c&&m>0&&d(0),l().createElement("div",Object.assign({},f(),{className:"dropzone-area"}),l().createElement("input",g()),!h&&l().createElement("div",{className:"no-attachment-view"},l().createElement("i",{className:"icon-upload"}),l().createElement("br",null),t&&l().createElement(Ge,{numberOfFiles:m}),l().createElement(be.Z,{outline:!0,onClick:E,className:"select-files-button"},"Select File(s)"),l().createElement("strong",null,"or"),l().createElement("strong",null,"Drag and Drop"),l().createElement("br",null),s),h&&l().createElement("div",{className:"attachment-view"},l().createElement("div",{className:"attachment-list"},t.map((function(e,t){return l().createElement("div",{className:"attachment-block",key:[e.name,t].toString()},l().createElement("span",{className:"d-inline-block text-truncate"},e.name),l().createElement(be.Z,{color:"link",className:"attachment-remove",onClick:function(){var e;d(0),e=t,i&&(i(e),d(0))}},"Remove"))}))),l().createElement(Ge,{numberOfFiles:m}),l().createElement(be.Z,{outline:!0,onClick:E,className:"select-files-button"},"Select File(s)")))}Xe.defaultProps={files:null,isSubmitted:!1,onRejectedFiles:null,onRemoveFile:null};var Ke=Xe,$e=n(7513),et=n(2669),tt=n(6792);var nt=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function rt(e){var t=e.id,n=e.isSubmitted,r=e.description,a=e.maxSizeMessage,o=e.maxSize,s=(0,$e.U$)(t),i=s[0],c=s[2];return l().createElement(et.Z,null,l().createElement(ve.Z,{for:t,size:"sm",className:"form-field__label",style:{display:"flex",alignItems:"center"}},"Attach Files"),l().createElement(Ke,{id:t,files:i.value,onSetFiles:function(e){c.setValue(nt(nt([],i.value),e))},onRemoveFile:function(e){var t=i.value;t.splice(e,1),c.setValue(t)},isSubmitted:n,maxSizeMessage:a,maxSize:o}),l().createElement(tt.Z,{className:"form-field__help",color:"muted"},r))}rt.defaultProps={description:void 0,maxSize:1/0};var at=n(9618),lt=n(7354),ot=n(6277);var st=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n},it=function(e){var t,n=e.children;switch(e.type){case"InputGroup":t=l().createElement(at.Z,null,n);break;case"FormGroup":default:t=l().createElement(et.Z,null,n)}return t};it.defaultProps={type:"FormGroup"};var ct=function(e){var t=e.addon,n=e.addonType,r=e.label,o=e.description,s=e.required,i=e.agaveFile,c=e.SelectModal,u=st(e,["addon","addonType","label","description","required","agaveFile","SelectModal"]),m=(0,$e.U$)(u),d=m[0],p=m[1],f=m[2],E=(0,a.useState)(!1),g=E[0],h=E[1],v=u.id,y=u.name,b=void 0!==t,_=b?"InputGroup":"",S=function(){return l().createElement(l().Fragment,null,l().createElement(ve.Z,{className:"form-field__label",for:v||y,size:"sm",style:{display:"flex",alignItems:"center"}},r," ",s?l().createElement(lt.Z,{color:"danger",style:{marginLeft:"10px"}},"Required"):null))},N=function(){return l().createElement(l().Fragment,null,p.touched&&p.error?l().createElement("div",{className:"form-field__validation-error"},p.error):o&&l().createElement(tt.Z,{className:"form-field__help",color:"muted"},o))};if(t&&i)throw new Error("You must not pass `addon` and `agaveFile`, because `agaveFile` triggers its own field add-on");if(!i&&c||i&&!c)throw new Error("An `agaveFile` and a `SelectModal` must both be passed");return l().createElement(l().Fragment,null,r&&b?l().createElement(S,null):null,l().createElement(it,{type:_},r&&!b?l().createElement(S,null):null,i?l().createElement(l().Fragment,null,l().createElement(c,{isOpen:g,toggle:function(){h((function(e){return!e}))},onSelect:function(e,t){f.setValue("agave://"+e+t)}}),l().createElement(at.Z,null,l().createElement(ot.Z,{addonType:"prepend"},l().createElement(be.Z,{size:"sm",color:"secondary",type:"button",onClick:function(){return h(!0)}},"Select")),l().createElement(ye.Z,Object.assign({},d,u,{bsSize:"sm"})))):l().createElement(l().Fragment,null,b&&"prepend"===n?t:null,l().createElement(ye.Z,Object.assign({},d,u,{bsSize:"sm"})),b&&"append"===n?t:null),b?null:l().createElement(N,null)),b?l().createElement(N,null):null)};ct.defaultProps={id:void 0,name:void 0,label:void 0,description:void 0,required:!1,agaveFile:void 0,SelectModal:void 0,addon:void 0,addonType:void 0};var ut=n(9521);var mt=function(e){return e.isLoading?l().createElement("tr",{className:"-status"},l().createElement("td",null,l().createElement(Ce,{placement:"inline"}))):null},dt=function(e){var t=e.display,n=e.noDataText;return t?l().createElement("tr",{className:"-status"},l().createElement("td",null,l().createElement("span",{className:"-status__message"},n))):null},pt=function(e){var t=e.tableColumns,n=e.tableData,r=e.onInfiniteScroll,a=e.isLoading,o=e.className,s=e.noDataText,i=e.getRowProps,c=e.columnMemoProps,u=l().useMemo((function(){return t}),c),m=l().useMemo((function(){return n}),[n]),d=(0,ut.useTable)({columns:u,data:m}),p=d.getTableProps,f=d.getTableBodyProps,E=d.headerGroups,g=d.rows,h=d.prepareRow;return l().createElement("table",Object.assign({},p(),{className:o+" InfiniteScrollTable"}),l().createElement("thead",null,E.map((function(e){return l().createElement("tr",e.getHeaderGroupProps(),e.headers.map((function(e){return l().createElement("th",e.getHeaderProps(),e.render("Header"))})))}))),l().createElement("tbody",Object.assign({},f(),{onScroll:function(e){var t=e.target;t.scrollHeight-t.scrollTop===t.clientHeight&&t.scrollTop>0&&r(n.length)}}),g.map((function(e){return h(e),l().createElement("tr",Object.assign({},e.getRowProps(),i(e)),e.cells.map((function(e){return l().createElement("td",e.getCellProps({className:e.column.className}),e.render("Cell"))})))})),l().createElement(mt,{isLoading:a}),l().createElement(dt,{display:!a&&0===n.length,noDataText:s})))};pt.defaultProps={onInfiniteScroll:function(e){},isLoading:!1,className:"",noDataText:"",getRowProps:function(e){},columnMemoProps:[]};var ft=function(e){var t=e.children,n=e.className,r="icon icon-"+e.name,a=n?[n,r].join(" "):r,o=t;return l().createElement("i",{className:a,role:"img","aria-label":o})};ft.defaultProps={children:"",className:""};var Et=ft;var gt=n(6244),ht=n(8089),vt=n(627),yt=n(1121);var bt=function(e){var t=e.className,n=e.detail,r=e.message,o=(0,a.useState)(!1),s=o[0],i=o[1],c=(0,a.useCallback)((function(){i(!s)}),[s,i]);return l().createElement(gt.Z,{className:(t?t+" ":"")+"Expand-module__container--DH5-jvRt4g",tag:"div"},l().createElement(ht.Z,{className:"Expand-module__summary--fOU2M68eqv",onClick:c,tag:"div"},l().createElement("strong",{className:"Expand-module__header--3OiZePUQMn"},n),l().createElement(Et,{name:s?"collapse":"expand"})),l().createElement(vt.Z,{isOpen:s},l().createElement(yt.Z,null,r)))};bt.defaultProps={className:""};var _t=n(9638),St={"./Message.module.scss":{container:"Message-module__container--2mZsdysgRm","is-scope-inline":"Message-module__is-scope-inline--2aQjysPwl2","is-scope-section":"Message-module__is-scope-section--1uus95jWiQ",text:"Message-module__text--2wCU56N81C","type-icon":"Message-module__type-icon--2oYDWJSBbv","close-button":"Message-module__close-button--blwQE4g5mg","close-icon":"Message-module__close-icon--1MQ5OiW1aE","is-info":"Message-module__is-info--1Mx7AfmeXH",icon:"Message-module__icon--1iieNfXmjm","is-warn":"Message-module__is-warn--1llz-W8JA3","is-error":"Message-module__is-error--4ZrpxSiVG-","is-success":"Message-module__is-success--2QREP0QqRx"}};var Nt=function(){return(Nt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},Pt=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},wt="For a <(Section)Message> to use `canDismiss`, `scope` must equal `section`.",It='In a <(Section|Inline)Message> `type="warn"` is deprecated. Use `type="warning"` instead.',Tt='A <Message> without a `scope` should become an <InlineMessage>. (If <Message> must be used, then explicitely set `scope="inline"`.)',At={info:{iconName:"conversation",className:"is-info",iconText:"Notice"},success:{iconName:"approved-reverse",className:"is-success",iconText:"Notice"},warning:{iconName:"alert",className:"is-warn",iconText:"Warning"},error:{iconName:"alert",className:"is-error",iconText:"Error"}};At.warn=At.warning;Object.keys(At);var Ct={inline:{className:"is-scope-inline",role:"status",tagName:"span"},section:{className:"is-scope-section",role:"status",tagName:"p"}},Ot=(Pt([""],Object.keys(Ct)),function(e){var t=e.children,n=e.className,r=e.onDismiss,a=e.canDismiss,o=e.isVisible,s=e.scope,i=e.type,c=At[i],u=Ct[s||"inline"],m=c.iconName,d=c.iconText,p=c.className,f=u.role,E=u.tagName,g=u.className,h="section"===s;a&&!h&&console.error(wt),"warn"===i&&console.info(It),s||console.info(Tt);var v=[];v.push(p),v.push(g);var y=Pt(["container"],v).join(" "),b=Nt(Nt({},_t.Z.defaultProps),{unmountOnExit:!0,baseClass:"",timeout:0});return l().createElement(_t.Z,Object.assign({},b,{tag:E,role:f,in:o,className:(n?n+" ":"")+(0,Ze.Z)(y,St,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})+" "+(b&&b.className||"")}),l().createElement(Et,{className:"Message-module__icon--1iieNfXmjm Message-module__type-icon--2oYDWJSBbv",name:m},d),l().createElement("span",{className:"Message-module__text--2wCU56N81C","data-testid":"text"},t),a&&h?l().createElement("button",{type:"button",className:"Message-module__close-button--blwQE4g5mg","aria-label":"Close",onClick:r},l().createElement(Et,{className:"Message-module__icon--1iieNfXmjm Message-module__close-icon--1MQ5OiW1aE",name:"close"})):null)});Ot.defaultProps={className:"",canDismiss:!1,isVisible:!0,onDismiss:function(){},scope:""};var Lt=Ot,kt=function(){return(kt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},xt=function(e){var t=kt(kt(kt({},Lt.defaultProps),e),{canDismiss:!1,scope:"inline"});return l().createElement(Lt,t)};xt.defaultProps=Lt.defaultProps;var Mt=xt,Rt=function(){return(Rt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},Ut=function(e){var t=(0,a.useState)(!0),n=t[0],r=t[1],o=(0,a.useCallback)((function(){r(!n)}),[n]),s=Rt(Rt(Rt({},Lt.defaultProps),e),{isVisible:n,onDismiss:o,scope:"section"});return l().createElement(Lt,s)};Ut.defaultProps=Lt.defaultProps;var jt=Ut,Ft=n(681),Dt={"./DescriptionList.module.scss":{container:"DescriptionList-module__container--3GUucDmAEw","is-horz":"DescriptionList-module__is-horz--3Vc4dFMPRA",key:"DescriptionList-module__key--3qyJmM1n4a",value:"DescriptionList-module__value--36HSIKiYmg","is-narrow":"DescriptionList-module__is-narrow--32R3jQ797H","is-wide":"DescriptionList-module__is-wide--1m_ihHMz-0","is-vert":"DescriptionList-module__is-vert--2IQb_ACOhb"}};var Zt=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},zt={vertical:"is-vert",horizontal:"is-horz"},Ht=(Zt([""],Object.keys(zt)),{compact:"is-narrow",default:"is-wide"}),qt=(Zt([""],Object.keys(Ht)),function(e){var t=e.className,n=e.data,r=e.density,a=e.direction,o=[];o.push(Ht[r||"default"]),o.push(zt[a||"vertical"]);var s=Zt(["container"],o).join(" ");return l().createElement("dl",{"data-testid":"list",className:(t?t+" ":"")+(0,Ze.Z)(s,Dt,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},Object.entries(n).map((function(e){var t=e[0],n=e[1];return l().createElement(l().Fragment,{key:t},l().createElement("dt",{className:"DescriptionList-module__key--3qyJmM1n4a","data-testid":"key"},t),Array.isArray(n)?n.map((function(e){return l().createElement("dd",{className:"DescriptionList-module__value--36HSIKiYmg","data-testid":"value",key:(0,Ft.Z)()},e)})):l().createElement("dd",{className:"DescriptionList-module__value--36HSIKiYmg","data-testid":"value"},n))})))});qt.defaultProps={className:"",density:"default",direction:"vertical"};var Bt=qt;var Qt=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n},Jt=function(e){var t=e.type,n=e.onChange,r=Qt(e,["type","onChange"]),a="multiple"===t;return l().createElement(ye.Z,Object.assign({},r,{onChange:n,type:"select",className:"DropdownSelector-module__container--ScNBv0_DKI bootstrap-form__form-control--1Pxq8fh4ks "+(r&&r.className||""),multiple:a,"data-testid":"selector"}))};Jt.defaultProps={type:"single",onChange:function(){}};var Vt=Jt,Wt=n(7834),Yt=function(){return(Yt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};function Gt(e){var t=(0,s.v9)((function(e){return e.welcomeMessages}));return t&&t[e]}function Xt(e){var t=e.children,n=e.className,r=e.messageName,a=(0,s.I0)(),o=(0,s.v9)((function(e){return e.welcomeMessages})),i=Gt(r);return l().createElement(Wt.Z,{isOpen:i,toggle:function(){return function(e){var t,n=Yt(Yt({},o),((t={})[e]=!1,t));a({type:"SAVE_WELCOME",payload:n})}(r)},color:"secondary",className:n},t)}Xt.defaultProps={className:""};var Kt=Xt,$t={"./Pill.module.scss":{root:"Pill-module__root--3WKDSZq0rH","should-truncate":"Pill-module__should-truncate--2qBi9GN7Yb","is-danger":"Pill-module__is-danger--3A92aPARlf","is-success":"Pill-module__is-success--1Bnp4bVsR6","is-warning":"Pill-module__is-warning--1V9CIPmrW-","is-normal":"Pill-module__is-normal--1uizuYwu1t"}};function en(e){var t=e.children,n=e.type,r=e.className,a="root is-"+n;return e.shouldTruncate&&(a+=" should-truncate"),l().createElement("span",{className:(r?r+" ":"")+(0,Ze.Z)(a,$t,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},t)}en.defaultProps={type:"normal",className:"",shouldTruncate:!0};var tn=en,nn=n(4855),rn={"./TextCopyField.module.scss":{input:"TextCopyField-module__input--oEAYxIzdrv bootstrap-form__form-control--1Pxq8fh4ks","copy-button":"TextCopyField-module__copy-button--3OtQl0tlDS c-button__c-button--secondary--20cNZveRg_","is-copied":"TextCopyField-module__is-copied--3HbkIDxINI",button__icon:"TextCopyField-module__button__icon--1lf-70haW- c-button__c-button__icon--before--2sl5li7HeP",button__text:"TextCopyField-module__button__text--3Oe_FXbiPQ"}};var an=function(e){var t=e.value,n=e.placeholder,r=(0,a.useState)(!1),o=r[0],s=r[1],i=(0,a.useCallback)((function(){s(!0);var e=setTimeout((function(){s(!1),clearTimeout(e)}),1150)}),[o,s]),c=!t||0===t.length;return l().createElement("div",{className:"input-group"},l().createElement("div",{className:"input-group-prepend"},l().createElement(nn.CopyToClipboard,{text:t},l().createElement(be.Z,{style:{"--transition-duration":"0.15s"},onClick:i,disabled:c,type:"button",className:(0,Ze.Z)("copy-button "+(o?"is-copied":""),rn,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},l().createElement(Et,{name:o?"approved-reverse":"link",className:"TextCopyField-module__button__icon--1lf-70haW- c-button__c-button__icon--before--2sl5li7HeP"}),l().createElement("span",{className:"TextCopyField-module__button__text--3Oe_FXbiPQ"},"Copy")))),l().createElement("input",{type:"text",onChange:function(e){e.preventDefault()},value:t,className:"form-control TextCopyField-module__input--oEAYxIzdrv bootstrap-form__form-control--1Pxq8fh4ks",placeholder:n,"data-testid":"input",readOnly:!0}))};an.defaultProps={value:"",placeholder:""};var ln=n(9612),on={"./ReadMore.module.scss":{clamped:"ReadMore-module__clamped--3yJcQBGmQE",expanded:"ReadMore-module__expanded--1YVjlft-eZ"}};var sn=function(e){var t=e.className,n=e.children,r=(0,a.useState)(!1),o=r[0],s=r[1],i=(0,a.useCallback)((function(){s(!o)}),[o,s]),c=(0,ln.NB)(),u=c.height,m=c.ref,d=!(!m||!m.current)&&m.current.scrollHeight>u;return l().createElement(l().Fragment,null,l().createElement("div",{ref:m,className:(t?t+" ":"")+(0,Ze.Z)(o?"expanded":"clamped",on,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},n),(d||o)&&l().createElement(be.Z,{color:"link",onClick:i},o?"Read Less":"Read More"))};sn.defaultProps={className:""};var cn=sn,un={"./Paginator.module.scss":{root:"Paginator-module__root--1ahFSs0EGG",endcap:"Paginator-module__endcap--1NUxRhpAxH","page-root":"Paginator-module__page-root--5Ku1VvWgMP",page:"Paginator-module__page--1wz47pM96V",current:"Paginator-module__current--QNRuzIEPqw"}};var mn=function(e){var t=e.number,n=e.callback,r=e.current;return l().createElement("div",{className:"Paginator-module__page-root--5Ku1VvWgMP"},l().createElement(be.Z,{onClick:function(){return n(t)},className:(0,Ze.Z)("page "+(t===r?"current":""),un,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},t))},dn=function(e){var t,n,r=e.pages,a=e.current,o=e.callback,s=e.spread;if(1===r)n=0,t=1;else if(r>2&&r<=s)t=2,n=r-1;else if(r>s&&a<=4)t=2,n=s-1;else if(r>s&&a>r-(s-2))t=r-(s-2),n=r-1;else{var i=Math.floor((s-2)/2);t=a-i,n=a+i}var c=n-t+1,u=c>0?Array(c).fill().map((function(e,n){return t+n})):[];return l().createElement("div",{className:"Paginator-module__root--1ahFSs0EGG"},l().createElement(be.Z,{color:"link",className:"Paginator-module__endcap--1NUxRhpAxH",onClick:function(){return o(a-1)},disabled:1===a},l().createElement("span",null,"< Previous")),l().createElement(mn,{number:1,callback:o,current:a}),u[0]>2&&l().createElement("span",null,"..."),u.map((function(e){return l().createElement(mn,{number:e,key:e,current:a,callback:o})})),u[u.length-1]<r-1&&l().createElement("span",null,"..."),r>1&&l().createElement(mn,{number:r,callback:o,current:a}),l().createElement(be.Z,{color:"link",className:"Paginator-module__endcap--1NUxRhpAxH",onClick:function(){return o(a+1)},disabled:a===r},l().createElement("span",null,"Next >")))};dn.defaultProps={spread:11};var pn=function(e){var t=e.config,n=e.onAuth,r=(0,s.I0)(),o=_e(t),i=o.login,c=o.loading,u=o.error,m=o.token,d=(0,a.useState)(""),p=d[0],f=d[1],E=(0,a.useState)(""),g=E[0],h=E[1],v=(0,a.useCallback)((function(){r(i(p,g,n))}),[r,i,p,g]);return l().createElement(he.Z,null,l().createElement("h5",null,"Login"),l().createElement(ve.Z,{for:"username"},"Username"),l().createElement(ye.Z,{type:"text",id:"username",onChange:function(e){return f(e.target.value)}}),l().createElement(ve.Z,{for:"password"},"Password"),l().createElement(ye.Z,{type:"password",id:"password",onChange:function(e){return h(e.target.value)}}),l().createElement(be.Z,{onClick:v,disabled:c},"Login",c&&l().createElement(l().Fragment,null," ",l().createElement(Ce,{placement:"inline"}))),m&&l().createElement("div",null,"Logged in"),u&&l().createElement(l().Fragment,null,"Login error"))};pn.defaultProps={config:null,onAuth:null};var fn=pn,En=function(e){var t=e.system,n=e.onSelect;return l().createElement("div",{onClick:function(){return n(t)}},t.id+" ("+t.host+")")};En.defaultProps={onSelect:null};var gn=function(e){var t=e.config,n=e.onList,r=e.onSelect,o=(0,s.I0)(),i=Ne(t),c=i.systems,u=i.list;(0,a.useEffect)((function(){o(u({onList:n}))}),[o]);var m=c.results;return c.loading?l().createElement("div",null,"Loading"):l().createElement("div",null,l().createElement("h5",null,"Systems"),m.length?m.map((function(e){return l().createElement(En,{system:e,key:e.id,onSelect:r})})):l().createElement("i",null,"No systems found"))};gn.defaultProps={config:null,onList:null,onSelect:null};var hn=gn,vn=function(e){var t=e.app,n=e.onSelect;return l().createElement("div",{onClick:function(){return n(t)}},t.id+" v"+t.version)};vn.defaultProps={onSelect:null};var yn=function(e){var t=e.config,n=e.onList,r=e.onSelect,o=(0,s.I0)(),i=we(t),c=i.list,u=i.apps;(0,a.useEffect)((function(){o(c({onList:n}))}),[o,n]);var m=(0,a.useCallback)((function(e){r&&r(e)}),[r]);if(!u||u.loading)return l().createElement("div",null,"Loading...");var d=u.results;return l().createElement("div",null,l().createElement("h5",null,"Apps"),d.map((function(e){return l().createElement(vn,{app:e,onSelect:m})})))};yn.defaultProps={config:null,onList:null,onSelect:null};var bn=yn,_n=function(e,t){return function(n){if(e in n.files.listings&&t in n.files.listings[e])return n.files.listings[e][t]}},Sn=function(e){var t=e.file,n=e.onSelect;return l().createElement("div",{onClick:function(){return n?n(t):null}},""+t.name)};Sn.defaultProps={onSelect:null};var Nn=function(e){var t=e.systemId,n=e.path,r=e.config,o=e.onList,i=e.onSelect,c=(0,s.I0)(),u=Pe(r).list;(0,a.useEffect)((function(){c(u({onList:o,request:{systemId:t,path:n}}))}),[c,t,n,o]);var m=(0,s.v9)(_n(t,n));(0,a.useCallback)((function(e){i&&i(e)}),[i]);if(!m||m.loading)return l().createElement("div",null,"Loading...");var d=m.results;return l().createElement("div",null,l().createElement("h5",null,"Files"),d.map((function(e){return l().createElement(Sn,{file:e})})))};Nn.defaultProps={config:null,onList:null,onSelect:null};var Pn=Nn,wn=function(e){var t=e.job,n=e.onSelect;return l().createElement("div",{onClick:function(){return n?n(t):null}},t.name+" "+t.uuid+" ("+t.status+")")};wn.defaultProps={onSelect:null};var In=function(e){var t=e.config,n=e.onList,r=e.onSelect,o=(0,s.I0)(),i=Ie(t),c=i.list,u=i.jobs;(0,a.useEffect)((function(){o(c({onList:n,request:{orderBy:"created(desc)"}}))}),[o,n]);(0,a.useCallback)((function(e){r&&r(e)}),[r]);if(!u||u.loading)return l().createElement("div",null,"Loading...");var m=u.results;return l().createElement("div",null,l().createElement("h5",null,"Jobs"),m.map((function(e){return l().createElement(wn,{job:e})})))};In.defaultProps={config:null,onList:null,onSelect:null};var Tn=In;process.env.TAPIS_TENANT_URL;var An=function(){return(An=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},Cn=function(e){var t=e.props,n=e.label,r=e.required,a=e.description,o=e.children,s=(0,$e.U$)(t),i=s[0],c=s[1];s[2];return l().createElement(et.Z,null,l().createElement(ve.Z,{className:"form-field__label",size:"sm",style:{display:"flex",alignItems:"center"}},n," ",r?l().createElement(lt.Z,{color:"danger",style:{marginLeft:"10px"}},"Required"):null),l().Children.map(o,(function(e){return l().isValidElement(e)?l().cloneElement(e,An(An({},i),t)):e})),c.touched&&c.error?l().createElement("div",{className:"form-field__validation-error"},c.error):a&&l().createElement(tt.Z,{className:"form-field__help",color:"muted"},a))},On=n(7561),Ln=function(){var e=Ie().submission;return e.result?l().createElement(Et,{name:"approved-reverse"}):e.loading?l().createElement(Ce,{placement:"inline"}):e.error?l().createElement(Et,{name:"denied-reverse"}):l().createElement(l().Fragment,null)},kn=function(e){var t=e.config,n=e.initialValues,r=e.onSubmit,o=(0,s.I0)(),i=Ie(),c=i.submit,u=i.submission,m=Ne(t),d=(m.list,m.systems),p=(0,a.useCallback)((function(e){r&&"result"in e&&r(e.result)}),[r]),f=[{props:{name:"name",type:"string"},description:"A name for this job",label:"Name",required:!0,children:l().createElement(ye.Z,{bsSize:"sm"})},{props:{name:"appId",type:"string"},description:"The ID of the TAPIS application to run",label:"App ID",required:!0,children:l().createElement(ye.Z,{bsSize:"sm","data-testid":"appId"})},{props:{name:"appVersion",type:"string"},description:"The version of the application to run",label:"App Version",required:!0,children:l().createElement(ye.Z,{bsSize:"sm"})},{props:{name:"execSystemId",type:"select"},description:"A TAPIS system that can run this application",label:"Execution System",required:!0,children:l().createElement(ye.Z,null,d.results.map((function(e){return l().createElement("option",null,e.id)})))}];return l().createElement("div",null,l().createElement("h5",null,"Job Submit"),l().createElement($e.J9,{initialValues:n,validationSchema:function(e){return On.Vo((function(e){return On.Ry({})}))},onSubmit:function(e,t){var n=t.setSubmitting;console.log(e),o(c({onSubmit:p,request:e})),n(!1)}},(function(e){var t=e.isSubmitting;return l().createElement($e.l0,null,f.map((function(e){return l().createElement(Cn,{props:e.props,label:e.label,required:e.required,children:e.children,description:e.description})})),l().createElement(be.Z,{type:"submit",className:"btn btn-primary",disabled:t||u.loading||null!=u.result},"Submit Job",l().createElement(Ln,null)))})))};kn.defaultProps={config:null,initialValues:{},onSubmit:null};var xn=kn,Mn=n(3999),Rn=n(8008),Un=n(7243);var jn=function(e){var t=e.to,n=e.label,r=e.iconName;return l().createElement(Mn.Z,null,l().createElement(Rn.Z,{tag:i.OL,to:t,exact:!0,className:"Sidebar-module__link--3iqxHlfbWc",activeClassName:"Sidebar-module__link--active--3dvlxhA8fo",disabled:!1},l().createElement("div",{className:"nav-content Sidebar-module__content--iukt0PwbUd"},l().createElement(Et,{name:r}),l().createElement("span",{className:"Sidebar-module__text--2_De6LmZTH"},n))))},Fn=function(e){e.jwt;return l().createElement(Un.Z,{className:"Sidebar-module__root--2Oiv6meLgm",vertical:!0},l().createElement(jn,{to:"/",label:"Dashboard",iconName:"dashboard"}),l().createElement(jn,{to:"/login",label:"Login",iconName:"link"}),l().createElement(jn,{to:"/systems",label:"Systems",iconName:"allocations"}),l().createElement(jn,{to:"/files",label:"Files",iconName:"allocations"}),l().createElement(jn,{to:"/apps",label:"Apps",iconName:"allocations"}),l().createElement(jn,{to:"/jobs",label:"Jobs",iconName:"allocations"}),l().createElement(jn,{to:"/launcher",label:"Launcher",iconName:"allocations"}),l().createElement(jn,{to:"/uipatterns",label:"UI Patterns",iconName:"copy"}))};Fn.defaultProps={jwt:null};var Dn=Fn;var Zn={short:l().createElement("a",{href:window.location.href,onClick:function(e){return e.preventDefault()},className:"wb-link"},"Example link"),long:l().createElement("a",{href:window.location.href,onClick:function(e){return e.preventDefault()},className:"wb-link"},"Example link can be a complete sentence.")},zn={short:"You exist.",long:"All your information, are belong to us."},Hn={short:"We did well.",long:"All your success, are belong to us."},qn={short:"You did poorly.",long:"All your warning, are come from us."},Bn={short:"You failed.",long:"All your error, are belong to you."},Qn=l().createElement("em",null,"Can not render in isolation. See"," ",l().createElement("a",{href:"https://xd.adobe.com/view/db2660cc-1011-4f26-5d31-019ce87c1fe8-ad17/screen/3821fc3e-bda1-40d4-9e50-a514e90aa088/",target:"_blank",rel:"noreferrer"},"Adobe Design."));var Jn=function(){return l().createElement("table",{className:"UIPatternsMessage-module__container--3JekOxYuU_"},l().createElement("thead",null,l().createElement("tr",null,l().createElement("th",{scope:"row",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},"component"),l().createElement("th",{scope:"col"},l().createElement("code",null,"<InlineMessage>"),l().createElement("code",null,'<Message scope="inline">')),l().createElement("th",{scope:"col"},l().createElement("code",null,"<SectionMessage (canDismiss)>"),l().createElement("code",null,'<Message scope="section" (canDismiss)>')),l().createElement("th",{scope:"col"},l().createElement("code",null,l().createElement("s",null,"<AppMessage>")),l().createElement("code",null,"<NotifcationToast>"))),l().createElement("tr",null,l().createElement("th",{scope:"row",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},l().createElement("code",null,"scope")),l().createElement("th",{scope:"col"},l().createElement("code",null,"inline")),l().createElement("th",{scope:"col"},l().createElement("code",null,"section")),l().createElement("th",{scope:"col"},l().createElement("code",null,"app"))),l().createElement("tr",null,l().createElement("th",{scope:"col",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},l().createElement("code",null,"type")),l().createElement("td",null,"When to Use",l().createElement("ul",null,l().createElement("li",null,"action result statement in table row"),l().createElement("li",null,"message when table can not load data"))),l().createElement("td",null,"When to Use",l().createElement("ul",null,l().createElement("li",null,"warning at the top of a form"),l().createElement("li",null,"message after successful submission of form"))),l().createElement("td",null,"When to Use",l().createElement("ul",null,l().createElement("li",null,"user action is required"),l().createElement("li",null,"important user-initiated action is completed"),l().createElement("li",null,"security concern"),l().createElement("li",null,"milestone for time-sensitive activity"))))),l().createElement("tbody",null,l().createElement("tr",null,l().createElement("th",{scope:"row"},l().createElement("code",null,"info")),l().createElement("td",null,l().createElement(Mt,{type:"info"},zn.long," ",Zn.short),l().createElement("hr",null),l().createElement(Mt,{type:"info"},zn.short," ",Zn.long)),l().createElement("td",null,l().createElement(jt,{type:"info"},zn.long," ",Zn.short),l().createElement(jt,{type:"info",canDismiss:!0},zn.short," ",Zn.long)),l().createElement("td",{rowSpan:"2"},Qn)),l().createElement("tr",null,l().createElement("th",{scope:"row"},l().createElement("code",null,"success")),l().createElement("td",null,l().createElement(Mt,{type:"success"},Hn.long," ",Zn.short),l().createElement("hr",null),l().createElement(Mt,{type:"success"},Hn.short," ",Zn.long)),l().createElement("td",null,l().createElement(jt,{type:"success"},Hn.long," ",Zn.short),l().createElement(jt,{type:"success",canDismiss:!0},Hn.short," ",Zn.long))),l().createElement("tr",null,l().createElement("th",{scope:"row"},l().createElement("code",null,"warn")),l().createElement("td",null,l().createElement(Mt,{type:"warn"},qn.long," ",Zn.short),l().createElement("hr",null),l().createElement(Mt,{type:"warn"},qn.short," ",Zn.long)),l().createElement("td",null,l().createElement(jt,{type:"warn"},qn.long," ",Zn.short),l().createElement(jt,{type:"warn",canDismiss:!0},qn.short," ",Zn.long)),l().createElement("td",{rowSpan:"2",className:"UIPatternsMessage-module__is-row-end--30wX3GXjk5"},Qn)),l().createElement("tr",null,l().createElement("th",{scope:"row"},l().createElement("code",null,"error")),l().createElement("td",null,l().createElement(Mt,{type:"error"},Bn.long," ",Zn.short),l().createElement("hr",null),l().createElement(Mt,{type:"error"},Bn.short," ",Zn.long)),l().createElement("td",null,l().createElement(jt,{type:"error"},Bn.long," ",Zn.short),l().createElement(jt,{type:"error",canDismiss:!0},Bn.short," ",Zn.long)))))};var Vn={Username:"bobward500",Prefix:"Mr.",Name:"Bob Ward",Suffix:"The 5th","Favorite Numeric Value":5,Icon:l().createElement(Et,{name:"dashboard"})};var Wn=function(){return l().createElement(l().Fragment,null,l().createElement("div",{className:"UIPatternsDescriptionList-module__list-cols--3ksSB0gUfs"},l().createElement("dl",null,l().createElement("dt",null,"Vertical Layout & Default Density"),l().createElement("dd",null,l().createElement(Bt,{data:Vn}))),l().createElement("dl",null,l().createElement("dt",null,"Vertical Layout & Compact Density"),l().createElement("dd",null,l().createElement(Bt,{data:Vn,density:"compact"}))),l().createElement("dl",null,l().createElement("dt",null,"Vertical Layout & Compact Density - Narrow Container"),l().createElement("dd",null,l().createElement(Bt,{data:Vn,density:"compact",className:"UIPatternsDescriptionList-module__item-x-narrow--1rvcBF79vm"})))),l().createElement("div",{className:"UIPatternsDescriptionList-module__list-rows--2r1RZfz1lt"},l().createElement("dl",null,l().createElement("dt",null,"Horizontal Layout & Default Density"),l().createElement("dd",null,l().createElement(Bt,{data:Vn,direction:"horizontal"})),l().createElement("dt",null,"Horizontal Layout & Compact Density"),l().createElement("dd",null,l().createElement(Bt,{data:Vn,density:"compact",direction:"horizontal"})),l().createElement("dt",null,"Horizontal Layout & Compact Density - Narrow Container"),l().createElement("dd",null,l().createElement(Bt,{data:Vn,density:"compact",direction:"horizontal",className:"UIPatternsDescriptionList-module__item-narrow--1XTYrbGHay"})))),l().createElement("div",{className:"UIPatternsDescriptionList-module__list-rows--2r1RZfz1lt"},l().createElement("dl",null,l().createElement("dt",null,"Vertical Layout & Nested Data"),l().createElement("dd",null,l().createElement(Bt,{data:{"Nested List One":l().createElement(Bt,{data:Vn,direction:"vertical"}),"Nested List Two":l().createElement(Bt,{data:Vn,direction:"vertical"})}})),l().createElement("dt",null,"Horizontal Layout & Nested Data"),l().createElement("dd",null,l().createElement(Bt,{data:{"Nested List One":l().createElement(Bt,{data:Vn,direction:"horizontal"}),"Nested List Two":l().createElement(Bt,{data:Vn,direction:"horizontal"})},direction:"vertical"})))))};var Yn=function(){return l().createElement("dl",null,l().createElement("dt",null,"Default (",l().createElement("code",null,"single"),")"),l().createElement("dd",null,l().createElement("small",null,"Only field (not dropdown) can be styled cross-browser."),l().createElement(Vt,null,l().createElement("optgroup",{label:"Cryptographic People"},l().createElement("option",{value:"alice"},"Alice"),l().createElement("option",{value:"bob"},"Bob"),l().createElement("option",{value:"charlie"},"Charlie")),l().createElement("optgroup",{label:"Common American Fruit"},l().createElement("option",{value:"apple"},"Apple"),l().createElement("option",{value:"banana"},"Banana"),l().createElement("option",{value:"grapes"},"Grapes")))),l().createElement("dt",null,"Multiple (",l().createElement("code",null,"multiple"),")"),l().createElement("dd",null,l().createElement("small",null,"Styling options are limited and browser-dependent."),l().createElement(Vt,{type:"multiple"},l().createElement("optgroup",{label:"Cryptographic People"},l().createElement("option",{value:"alice"},"Alice"),l().createElement("option",{value:"bob"},"Bob"),l().createElement("option",{value:"charlie"},"Charlie")),l().createElement("optgroup",{label:"Common American Fruit"},l().createElement("option",{value:"apple"},"Apple"),l().createElement("option",{value:"banana"},"Banana"),l().createElement("option",{value:"grapes"},"Grapes")))))};var Gn=function(){return l().createElement("dl",null,l().createElement("dt",null,"Default Pill (normal)"),l().createElement("dd",null,l().createElement(tn,null,"Example Pill")),l().createElement("dt",null,"Normal Pill"),l().createElement("dd",null,l().createElement(tn,{type:"normal"},"Normal Pill")),l().createElement("dt",null,"Success Pill"),l().createElement("dd",null,l().createElement(tn,{type:"success"},"Success Pill")),l().createElement("dt",null,"Warning Pill"),l().createElement("dd",null,l().createElement(tn,{type:"warning"},"Warning Pill")),l().createElement("dt",null,"Danger Pill"),l().createElement("dd",null,l().createElement(tn,{type:"danger"},"Danger Pill")))};var Xn=function(){return l().createElement("div",{className:"UIPatternsReadMore-module__root--2ATMc7IutA"},l().createElement(cn,null,"Long text beyond 4 lines should be clamped. Short text should not be clamped. This element is responsive to line number changes due to window resizing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis dapibus leo ornare sem mollis viverra. Sed metus tortor, luctus vitae tempus a, consectetur eu enim. Vivamus euismod ante sed augue aliquam, at venenatis risus varius. Duis laoreet, tellus at euismod consequat, nulla neque vestibulum sapien, at placerat erat nibh at ligula. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum mattis elit non enim gravida tempus. Quisque et nisi ligula. Quisque sagittis vel ex sed rhoncus. In lacus purus, elementum vel ullamcorper at, accumsan congue sem. Morbi eu mattis magna. Donec arcu ligula, mollis ac leo ut, pretium euismod turpis. Maecenas quis elit id dui vehicula sagittis semper aliquet enim."))};var Kn=function(){return l().createElement("div",{className:"UIPatterns-module__container--2y0bNmC-Cu"},l().createElement("div",{className:"UIPatterns-module__header--2lms7AiwCF"},l().createElement("h5",null,"UI Patterns")),l().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"Message & Notification"),l().createElement(Jn,null)),l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"DropdownSelector"),l().createElement(Yn,null))),l().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"DescriptionList"),l().createElement(Wn,null))),l().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"Pills"),l().createElement(Gn,null))),l().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"Read More"),l().createElement(Xn,null))))},$n=function(){var e={appId:"SleepSeconds",appVersion:"0.0.1",name:"SleepSeconds-0.0.1-"+(new Date).toISOString().slice(0,-5),execSystemId:"tapisv3-exec"};return l().createElement("div",null,l().createElement(xn,{initialValues:e}))};var er=function(){var e=(0,a.useState)(null),t=e[0],n=e[1],r=(0,a.useState)(null),o=r[0],i=r[1],c=(0,s.I0)(),u=we().list,m=Ne().list,d=(0,ge.k6)(),p=(0,a.useCallback)((function(e){console.log("Authentication api result",e),e instanceof Error||(n(e.access_token),c(u({})),c(m({})))}),[n]),f=(0,a.useCallback)((function(e){console.log("Systems listing api result",e)}),[]),E=(0,a.useCallback)((function(e){console.log("System selected",e),i(e)}),[i]),g=(0,a.useCallback)((function(e){console.log("App selected",e),d.push("/launch/"+e.id+"/"+e.version)}),[d]),h={jwt:t,tenant:"https://dev.develop.tapis.io"};return l().createElement("div",{className:"workbench-wrapper"},l().createElement(Dn,{jwt:t}),l().createElement("div",{className:"workbench-content"},l().createElement(ge.AW,{exact:!0,path:"/"},l().createElement("div",null,"Hello World!")),l().createElement(ge.AW,{path:"/login"},l().createElement(fn,{config:h,onAuth:p})),l().createElement(ge.AW,{path:"/systems"},l().createElement(hn,{config:h,onList:f,onSelect:E})),l().createElement(ge.AW,{path:"/files"},o?l().createElement(Pn,{systemId:o.id,path:"/"}):l().createElement("div",null,"No selected system")),l().createElement(ge.AW,{path:"/apps"},l().createElement(bn,{onSelect:g})),l().createElement(ge.AW,{path:"/jobs"},l().createElement(Tn,null)),l().createElement(ge.AW,{path:"/launcher"},l().createElement($n,null)),l().createElement(ge.AW,{path:"/uipatterns",component:Kn})))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var tr=Ee();o.render(a.createElement(s.zt,{store:tr},a.createElement(i.VK,null,a.createElement(er,null))),document.getElementById("react-root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},n={};function r(e){var a=n[e];if(void 0!==a)return a.exports;var l=n[e]={id:e,loaded:!1,exports:{}};return t[e].call(l.exports,l,l.exports,r),l.loaded=!0,l.exports}r.m=t,e=[],r.O=function(t,n,a,l){if(!n){var o=1/0;for(c=0;c<e.length;c++){n=e[c][0],a=e[c][1],l=e[c][2];for(var s=!0,i=0;i<n.length;i++)(!1&l||o>=l)&&Object.keys(r.O).every((function(e){return r.O[e](n[i])}))?n.splice(i--,1):(s=!1,l<o&&(o=l));s&&(e.splice(c--,1),t=a())}return t}l=l||0;for(var c=e.length;c>0&&e[c-1][2]>l;c--)e[c]=e[c-1];e[c]=[n,a,l]},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,{a:t}),t},r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){var e={179:0};r.O.j=function(t){return 0===e[t]};var t=function(t,n){var a,l,o=n[0],s=n[1],i=n[2],c=0;for(a in s)r.o(s,a)&&(r.m[a]=s[a]);if(i)var u=i(r);for(t&&t(n);c<o.length;c++)l=o[c],r.o(e,l)&&e[l]&&e[l][0](),e[o[c]]=0;return r.O(u)},n=self.webpackChunktapis_ui=self.webpackChunktapis_ui||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),r.O(void 0,[11],(function(){return r(3658)}));var a=r.O(void 0,[11],(function(){return r(9087)}));a=r.O(a)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXBpcy11aS93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9hdXRoZW50aWNhdG9yL3JlZHVjZXIudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL3R5cGVzL3Jlc3VsdHMudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL3N5c3RlbXMvcmVkdWNlci50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvY29uc3RhbnRzL3RhcGlzLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9maWxlcy9hY3Rpb25UeXBlcy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvZmlsZXMvcmVkdWNlci50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvYXBwcy9saXN0L2FjdGlvblR5cGVzLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9hcHBzL2xpc3QvcmVkdWNlci50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvYXBwcy9yZWR1Y2VyLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9qb2JzL2xpc3QvYWN0aW9uVHlwZXMudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL2pvYnMvbGlzdC9yZWR1Y2VyLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9qb2JzL3N1Ym1pdC9yZWR1Y2VyLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9qb2JzL3N1Ym1pdC9hY3Rpb25UeXBlcy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvam9icy9yZWR1Y2VyLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9zdG9yZS9yb290UmVkdWNlci50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvYXV0aGVudGljYXRvci9hY3Rpb25UeXBlcy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvc3lzdGVtcy9hY3Rpb25UeXBlcy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvYXV0aGVudGljYXRvci9zYWdhcy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvYXV0aGVudGljYXRvci9zZWxlY3RvcnMudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL3NhZ2FzL3NhZ2FzLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9zYWdhcy9hY3Rpb25UeXBlcy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvc2FnYXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL3N0b3JlL2luZGV4LnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9hdXRoZW50aWNhdG9yL3VzZUF1dGhlbnRpY2F0b3IudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL2F1dGhlbnRpY2F0b3IvYWN0aW9ucy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvc2FnYXMvYWN0aW9ucy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1yZWR1eC9zcmMvc3lzdGVtcy9hY3Rpb25zLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9zeXN0ZW1zL3VzZVN5c3RlbXMudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL2ZpbGVzL3VzZUZpbGVzLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9maWxlcy9hY3Rpb25zLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9hcHBzL3VzZUFwcHMudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL2FwcHMvbGlzdC9hY3Rpb25zLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9qb2JzL3VzZUpvYnMudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL2pvYnMvbGlzdC9hY3Rpb25zLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9qb2JzL3N1Ym1pdC9hY3Rpb25zLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL0xvYWRpbmdTcGlubmVyL0xvYWRpbmdTcGlubmVyLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL0xvYWRpbmdTcGlubmVyL2luZGV4LmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29uc3RhbnRzL3dlbGNvbWVNZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvX2NvbW1vbi9TZWN0aW9uL1NlY3Rpb25NZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvX2NvbW1vbi9TZWN0aW9uQ29udGVudC9TZWN0aW9uQ29udGVudC5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvX2NvbW1vbi9TZWN0aW9uL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vU2VjdGlvbkhlYWRlci9TZWN0aW9uSGVhZGVyLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL0Zvcm0vRmlsZUlucHV0RHJvcFpvbmUuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vRm9ybS9GaWxlSW5wdXREcm9wWm9uZUZvcm1GaWVsZC5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvX2NvbW1vbi9Gb3JtL0Zvcm1GaWVsZC5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvX2NvbW1vbi9JbmZpbml0ZVNjcm9sbFRhYmxlL0luZmluaXRlU2Nyb2xsVGFibGUuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vSWNvbi9JY29uLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL0ljb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vQXBwSWNvbi9BcHBJY29uLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL0V4cGFuZC9FeHBhbmQuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vTWVzc2FnZS9NZXNzYWdlLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL01lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vSW5saW5lTWVzc2FnZS9JbmxpbmVNZXNzYWdlLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL0lubGluZU1lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vU2VjdGlvbk1lc3NhZ2UvU2VjdGlvbk1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vU2VjdGlvbk1lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vRGVzY3JpcHRpb25MaXN0L0Rlc2NyaXB0aW9uTGlzdC5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvX2NvbW1vbi9EZXNjcmlwdGlvbkxpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vRHJvcGRvd25TZWxlY3Rvci9Ecm9wZG93blNlbGVjdG9yLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL0Ryb3Bkb3duU2VsZWN0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vV2VsY29tZU1lc3NhZ2UvV2VsY29tZU1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vUGlsbC9QaWxsLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL1BpbGwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL19jb21tb24vVGV4dENvcHlGaWVsZC9UZXh0Q29weUZpZWxkLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL1JlYWRNb3JlL1JlYWRNb3JlLmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL1JlYWRNb3JlL2luZGV4LmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9fY29tbW9uL1BhZ2luYXRvci9QYWdpbmF0b3IuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL2NvbXBvbmVudHMvTG9naW4vTG9naW4udHN4Iiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9jb21wb25lbnRzL0xvZ2luL2luZGV4LnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9jb21wb25lbnRzL1N5c3RlbXMvU3lzdGVtcy50c3giLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL2NvbXBvbmVudHMvU3lzdGVtcy9pbmRleC50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvY29tcG9uZW50cy9hcHBzL0FwcHNMaXN0aW5nL0FwcHNMaXN0aW5nLnRzeCIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvY29tcG9uZW50cy9hcHBzL0FwcHNMaXN0aW5nL2luZGV4LnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXJlZHV4L3NyYy9maWxlcy9zZWxlY3RvcnMudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL2NvbXBvbmVudHMvZmlsZXMvRmlsZUxpc3RpbmcvRmlsZUxpc3RpbmcudHN4Iiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9jb21wb25lbnRzL2ZpbGVzL0ZpbGVMaXN0aW5nL2luZGV4LnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9jb21wb25lbnRzL2pvYnMvSm9ic0xpc3RpbmcvSm9ic0xpc3RpbmcudHN4Iiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9jb21wb25lbnRzL2pvYnMvSm9ic0xpc3RpbmcvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL3R5cGVzL2NvbmZpZy50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy11aS9zcmMvY29tcG9uZW50cy9qb2JzL0pvYkxhdW5jaGVyL0pvYkZpZWxkV3JhcHBlci50c3giLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtdWkvc3JjL2NvbXBvbmVudHMvam9icy9Kb2JMYXVuY2hlci9Kb2JMYXVuY2hlci50c3giLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtcmVkdXgvc3JjL3R5cGVzL3Jlc3BvbnNlLnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLXVpL3NyYy9jb21wb25lbnRzL2pvYnMvSm9iTGF1bmNoZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtYXBwL3NyYy9TaWRlYmFyL1NpZGViYXIudHN4Iiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLWFwcC9zcmMvVUlQYXR0ZXJucy9VSVBhdHRlcm5zTWVzc2FnZS9VSVBhdHRlcm5zTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1hcHAvc3JjL1VJUGF0dGVybnMvVUlQYXR0ZXJuc0Rlc2NyaXB0aW9uTGlzdC9VSVBhdHRlcm5zRGVzY3JpcHRpb25MaXN0LmpzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLWFwcC9zcmMvVUlQYXR0ZXJucy9VSVBhdHRlcm5zRHJvcGRvd25TZWxlY3Rvci9VSVBhdHRlcm5zRHJvcGRvd25TZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1hcHAvc3JjL1VJUGF0dGVybnMvVUlQYXR0ZXJuc1BpbGwvVUlQYXR0ZXJuc1BpbGwuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtYXBwL3NyYy9VSVBhdHRlcm5zL1VJUGF0dGVybnNSZWFkTW9yZS9VSVBhdHRlcm5zUmVhZE1vcmUuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtYXBwL3NyYy9VSVBhdHRlcm5zL1VJUGF0dGVybnMuanMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvLi9zcmMvdGFwaXMtYXBwL3NyYy9MYXVuY2hlci9pbmRleC50cyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1hcHAvc3JjL0xhdW5jaGVyL0xhdW5jaGVyLnRzeCIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1hcHAvc3JjL0FwcC9BcHAudHN4Iiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLWFwcC9zcmMvQXBwL2luZGV4LnRzIiwid2VicGFjazovL3RhcGlzLXVpLy4vc3JjL3RhcGlzLWFwcC9zcmMvc2VydmljZVdvcmtlci5qcyIsIndlYnBhY2s6Ly90YXBpcy11aS8uL3NyYy90YXBpcy1hcHAvc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly90YXBpcy11aS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90YXBpcy11aS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90YXBpcy11aS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90YXBpcy11aS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RhcGlzLXVpL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdGFwaXMtdWkvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly90YXBpcy11aS93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly90YXBpcy11aS93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJpbml0aWFsU3RhdGUiLCJ0b2tlbiIsImxvYWRpbmciLCJlcnJvciIsImdldEVtcHR5TGlzdFJlc3VsdHMiLCJkZWZhdWx0TGltaXQiLCJyZXN1bHRzIiwib2Zmc2V0IiwibGltaXQiLCJzZXRSZXF1ZXN0aW5nIiwib3JpZ2luYWwiLCJzZXRGYWlsdXJlIiwidXBkYXRlTGlzdCIsImluY29taW5nIiwicmVzdWx0IiwiY2xvbmVEZWVwIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwib2Zmc2V0Q2hlY2siLCJsaW1pdENoZWNrIiwiY29uY2F0Iiwic3BsaWNlIiwicGFkZGluZyIsImkiLCJwdXNoIiwiZW1wdHlSZXN1bHRzIiwic3lzdGVtcyIsInNldExpc3RpbmdSZXF1ZXN0IiwicGF5bG9hZCIsInNldExpc3RpbmdTdWNjZXNzIiwicGFyYW1zIiwic2tpcCIsInNldExpc3RpbmdGYWlsdXJlIiwibGlzdGluZ3MiLCJsaXN0aW5nTWFwQ2hlY2siLCJzeXN0ZW1JZCIsInBhdGgiLCJhcHBzIiwibGlzdCIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsImpvYnMiLCJzdWJtaXNzaW9uIiwiYXV0aGVudGljYXRvciIsImZpbGVzIiwicmVkdWNlcnMiLCJmb3JFYWNoIiwicmVkdWNlciIsInRhcGlzQXV0aCIsImNvbmZpZyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJkZWZhdWx0VXJsIiwicHJvY2VzcyIsImVudiIsIlRBUElTX1RFTkFOVF9VUkwiLCJ0ZW5hbnQiLCJjb25maWd1cmF0aW9uIiwiYmFzZVBhdGgiLCJmZXRjaEFwaSIsImFwaSIsInJlcXVlc3QiLCJyZXFDcmVhdGVUb2tlbiIsImdyYW50X3R5cGUiLCJjcmVhdGVUb2tlbiIsImFjY2Vzc190b2tlbiIsImF1dGhlbnRpY2F0b3JMb2dpbiIsIm9uQXV0aCIsIndhdGNoTG9naW4iLCJhcGlTYWdhIiwib25BcGkiLCJvblJlcXVlc3QiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJtb2R1bGUiLCJmdW5jIiwiYXJncyIsInN0b3JlVG9rZW4iLCJqd3QiLCJDb25maWd1cmF0aW9uIiwiaGVhZGVycyIsImpzb24iLCJ3YXRjaEFwaVNhZ2EiLCJyb290U2FnYSIsInNhZ2FNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJzdG9yZSIsImFwcGx5IiwicnVuIiwibG9naW4iLCJhcGlDYWxsIiwiZGlzcGF0Y2giLCJvbkxpc3QiLCJzdWJtaXQiLCJvblN1Ym1pdCIsInJlcVN1Ym1pdEpvYiIsInJlc2V0U3VibWl0IiwiTG9hZGluZ1NwaW5uZXIiLCJwbGFjZW1lbnQiLCJjbGFzc05hbWUiLCJkYXRhLXRlc3RpZCIsIlNwaW5uZXIiLCJkZWZhdWx0UHJvcHMiLCJEQVNIQk9BUkQiLCJEQVRBIiwiQUxMT0NBVElPTlMiLCJBUFBMSUNBVElPTlMiLCJISVNUT1JZIiwiQUNDT1VOVCIsIlRJQ0tFVFMiLCJVSSIsIlNlY3Rpb25NZXNzYWdlcyIsImNoaWxkcmVuIiwicm91dGVOYW1lIiwid2VsY29tZU1lc3NhZ2VUZXh0Iiwid2VsY29tZU1lc3NhZ2VOYW1lIiwid2VsY29tZU1lc3NhZ2UiLCJtZXNzYWdlTmFtZSIsImhhc01lc3NhZ2UiLCJ1c2VFZmZlY3QiLCJkb2N1bWVudCIsImJvZHkiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJ3ZWxjb21lVGV4dCIsIkxBWU9VVF9DTEFTU19NQVAiLCJvbmVSb3ciLCJvbmVDb2x1bW4iLCJ0d29Db2x1bW4iLCJPYmplY3QiLCJrZXlzIiwiU2VjdGlvbkNvbnRlbnQiLCJzdHlsZU5hbWUiLCJsYXlvdXROYW1lIiwic2hvdWxkU2Nyb2xsIiwic2hvdWxkRGVidWdMYXlvdXQiLCJ0YWdOYW1lIiwic3R5bGVOYW1lTGlzdCIsImxheW91dENsYXNzIiwiVGFnTmFtZSIsImpvaW4iLCJTZWN0aW9uIiwiYm9keUNsYXNzTmFtZSIsImNvbnRlbnQiLCJjb250ZW50Q2xhc3NOYW1lIiwiY29udGVudExheW91dE5hbWUiLCJjb250ZW50U2hvdWxkU2Nyb2xsIiwiaGVhZGVyIiwiaGVhZGVyQWN0aW9ucyIsImhlYWRlckNsYXNzTmFtZSIsIm1hbnVhbENvbnRlbnQiLCJtYW51YWxIZWFkZXIiLCJtZXNzYWdlcyIsIm1lc3NhZ2VzQ2xhc3NOYW1lIiwic2hvdWxkQnVpbGRIZWFkZXIiLCJFcnJvciIsImFjdGlvbnMiLCJTZWN0aW9uSGVhZGVyIiwiaXNGb3JGb3JtIiwiaXNGb3JUYWJsZSIsIkhlYWRpbmdUYWdOYW1lIiwiUmVqZWN0ZWRGaWxlTWVzc2FnZSIsIkZpbGVJbnB1dERyb3Bab25lIiwib25TZXRGaWxlcyIsIm9uUmVqZWN0ZWRGaWxlcyIsIm1heFNpemUiLCJtYXhTaXplTWVzc2FnZSIsIm9uUmVtb3ZlRmlsZSIsImlzU3VibWl0dGVkIiwidXNlU3RhdGUiLCJudW1iZXJSZWplY3RlZEZpbGVzIiwic2V0TnVtYmVyUmVqZWN0ZWRGaWxlcyIsInUiLCJub0NsaWNrIiwib25Ecm9wIiwiYWNjZXB0ZWQiLCJvbkRyb3BSZWplY3RlZCIsInJlamVjdGVkIiwiZ2V0Um9vdFByb3BzIiwib3BlbiIsImdldElucHV0UHJvcHMiLCJzaG93RmlsZUxpc3QiLCJudW1iZXJPZkZpbGVzIiwiQnV0dG9uIiwib3V0bGluZSIsIm9uQ2xpY2siLCJtYXAiLCJmIiwia2V5IiwibmFtZSIsInRvU3RyaW5nIiwiY29sb3IiLCJmaWxlSW5kZXgiLCJGaWxlSW5wdXREcm9wWm9uZUZvcm1GaWVsZCIsImlkIiwiZGVzY3JpcHRpb24iLCJmaWVsZCIsImhlbHBlcnMiLCJGb3JtR3JvdXAiLCJMYWJlbCIsImZvciIsInNpemUiLCJzdHlsZSIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwidmFsdWUiLCJhY2NlcHRlZEZpbGVzIiwic2V0VmFsdWUiLCJGb3JtVGV4dCIsIkluZmluaXR5IiwiRm9ybUZpZWxkV3JhcHBlciIsIndyYXBwZXIiLCJJbnB1dEdyb3VwIiwiRm9ybUZpZWxkIiwiYWRkb24iLCJhZGRvblR5cGUiLCJsYWJlbCIsInJlcXVpcmVkIiwiYWdhdmVGaWxlIiwiU2VsZWN0TW9kYWwiLCJwcm9wcyIsIm1ldGEiLCJvcGVuQWdhdmVGaWxlTW9kYWwiLCJzZXRPcGVuQWdhdmVGaWxlTW9kYWwiLCJoYXNBZGRvbiIsIndyYXBwZXJUeXBlIiwiRmllbGRMYWJlbCIsIkJhZGdlIiwibWFyZ2luTGVmdCIsIkZpZWxkTm90ZSIsInRvdWNoZWQiLCJpc09wZW4iLCJ0b2dnbGUiLCJwcmV2U3RhdGUiLCJvblNlbGVjdCIsInN5c3RlbSIsIklucHV0R3JvdXBBZGRvbiIsIklucHV0IiwiYnNTaXplIiwiSW5maW5pdGVTY3JvbGxMb2FkaW5nUm93IiwiSW5maW5pdGVTY3JvbGxOb0RhdGFSb3ciLCJub0RhdGFUZXh0IiwidGFibGVDb2x1bW5zIiwidGFibGVEYXRhIiwib25JbmZpbml0ZVNjcm9sbCIsImlzTG9hZGluZyIsImdldFJvd1Byb3BzIiwiY29sdW1uTWVtb1Byb3BzIiwiY29sdW1ucyIsImRhdGEiLCJ1c2VUYWJsZSIsImdldFRhYmxlUHJvcHMiLCJnZXRUYWJsZUJvZHlQcm9wcyIsImhlYWRlckdyb3VwcyIsInJvd3MiLCJwcmVwYXJlUm93IiwiaGVhZGVyR3JvdXAiLCJnZXRIZWFkZXJHcm91cFByb3BzIiwiY29sdW1uIiwiZ2V0SGVhZGVyUHJvcHMiLCJyZW5kZXIiLCJvblNjcm9sbCIsInRhcmdldCIsInNjcm9sbEhlaWdodCIsInNjcm9sbFRvcCIsImNsaWVudEhlaWdodCIsInJvdyIsImNlbGxzIiwiY2VsbCIsImdldENlbGxQcm9wcyIsImljb25DbGFzc05hbWUiLCJmdWxsQ2xhc3NOYW1lIiwicm9sZSIsImFyaWEtbGFiZWwiLCJkZXRhaWwiLCJtZXNzYWdlIiwic2V0SXNPcGVuIiwidG9nZ2xlQ2FsbGJhY2siLCJ1c2VDYWxsYmFjayIsIkNhcmQiLCJ0YWciLCJDYXJkSGVhZGVyIiwiQ29sbGFwc2UiLCJDYXJkQm9keSIsIkVSUk9SX1RFWFQiLCJUWVBFX01BUCIsImluZm8iLCJpY29uTmFtZSIsImljb25UZXh0Iiwic3VjY2VzcyIsIndhcm5pbmciLCJ3YXJuIiwiU0NPUEVfTUFQIiwiaW5saW5lIiwic2VjdGlvbiIsIk1lc3NhZ2UiLCJvbkRpc21pc3MiLCJjYW5EaXNtaXNzIiwiaXNWaXNpYmxlIiwic2NvcGUiLCJ0eXBlTWFwIiwic2NvcGVNYXAiLCJ0eXBlQ2xhc3NOYW1lIiwic2NvcGVDbGFzc05hbWUiLCJoYXNEaXNtaXNzU3VwcG9ydCIsImNvbnNvbGUiLCJtb2RpZmllckNsYXNzTmFtZXMiLCJjb250YWluZXJTdHlsZU5hbWVzIiwiZmFkZVByb3BzIiwiRmFkZSIsInVubW91bnRPbkV4aXQiLCJiYXNlQ2xhc3MiLCJ0aW1lb3V0IiwiaW4iLCJJbmxpbmVNZXNzYWdlIiwibWVzc2FnZVByb3BzIiwiU2VjdGlvbk1lc3NhZ2UiLCJzZXRJc1Zpc2libGUiLCJESVJFQ1RJT05fQ0xBU1NfTUFQIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwiREVOU0lUWV9DTEFTU19NQVAiLCJjb21wYWN0IiwiZGVmYXVsdCIsIkRlc2NyaXB0aW9uTGlzdCIsImRlbnNpdHkiLCJkaXJlY3Rpb24iLCJtb2RpZmllckNsYXNzZXMiLCJlbnRyaWVzIiwiQXJyYXkiLCJpc0FycmF5IiwidmFsIiwiRHJvcGRvd25TZWxlY3RvciIsIm9uQ2hhbmdlIiwiY2FuU2VsZWN0TWFueSIsIm11bHRpcGxlIiwic2hvdWxkU2hvd01lc3NhZ2UiLCJ3ZWxjb21lTWVzc2FnZXMiLCJXZWxjb21lTWVzc2FnZSIsInNob3VsZFNob3ciLCJBbGVydCIsIm5ld01lc3NhZ2VzU3RhdGUiLCJQaWxsIiwicGlsbFN0eWxlTmFtZSIsInNob3VsZFRydW5jYXRlIiwicGxhY2Vob2xkZXIiLCJpc0NvcGllZCIsInNldElzQ29waWVkIiwib25Db3B5Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsInN0YXRlVGltZW91dCIsImlzRW1wdHkiLCJDb3B5VG9DbGlwYm9hcmQiLCJ0ZXh0IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiZGlzYWJsZWQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicmVhZE9ubHkiLCJSZWFkTW9yZSIsImV4cGFuZGVkIiwic2V0RXhwYW5kZWQiLCJoZWlnaHQiLCJyZWYiLCJoYXNPdmVyZmxvdyIsImN1cnJlbnQiLCJQYWdpbmF0b3JQYWdlIiwibnVtYmVyIiwiY2FsbGJhY2siLCJzdGFydCIsImVuZCIsInBhZ2VzIiwic3ByZWFkIiwiZGVsdGEiLCJNYXRoIiwiZmxvb3IiLCJtaWRkbGUiLCJtaWRkbGVQYWdlcyIsImZpbGwiLCJfIiwiaW5kZXgiLCJMb2dpbiIsInNldFVzZXJuYW1lIiwic2V0UGFzc3dvcmQiLCJvbkxvZ2luIiwiRm9ybSIsImUiLCJTeXN0ZW1JdGVtIiwiaG9zdCIsIlN5c3RlbXMiLCJkZWZpbml0aW9ucyIsIkFwcHNMaXN0aW5nSXRlbSIsImFwcCIsInZlcnNpb24iLCJBcHBzTGlzdGluZyIsInVzZUFwcHMiLCJhcHBTZWxlY3RDYWxsYmFjayIsImFwcExpc3QiLCJGaWxlTGlzdGluZ0l0ZW0iLCJmaWxlIiwiRmlsZUxpc3RpbmciLCJKb2JzTGlzdGluZ0l0ZW0iLCJqb2IiLCJ1dWlkIiwic3RhdHVzIiwiSm9ic0xpc3RpbmciLCJ1c2VKb2JzIiwib3JkZXJCeSIsImpvYnNMaXN0IiwiY2hpbGQiLCJKb2JTdWJtaXRTdGF0dXMiLCJKb2JMYXVuY2hlclByb3BzIiwiaW5pdGlhbFZhbHVlcyIsInN5c3RlbXNIb29rIiwic3VibWl0RGVjb2RlckNhbGxiYWNrIiwiam9iRmllbGRzIiwidmFsaWRhdGlvblNjaGVtYSIsInZhbHVlcyIsInNldFN1Ym1pdHRpbmciLCJsb2ciLCJpc1N1Ym1pdHRpbmciLCJTaWRlYmFySXRlbSIsInRvIiwiTmF2SXRlbSIsIk5hdkxpbmsiLCJleGFjdCIsIlNpZGViYXIiLCJOYXYiLCJFWEFNUExFX0xJTksiLCJzaG9ydCIsImhyZWYiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImxvbmciLCJFWEFNUExFX1RFWFQiLCJOT1RJRklDQVRJT05fVEVYVCIsInJlbCIsInJvd1NwYW4iLCJVc2VybmFtZSIsIlByZWZpeCIsIk5hbWUiLCJTdWZmaXgiLCJJY29uIiwiVUlQYXR0ZXJuc01lc3NhZ2UiLCJVSVBhdHRlcm5zRGVzY3JpcHRpb25MaXN0IiwiYXBwSWQiLCJhcHBWZXJzaW9uIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2xpY2UiLCJleGVjU3lzdGVtSWQiLCJzZXRKd3QiLCJzZWxlY3RlZFN5c3RlbSIsInNldFNlbGVjdGVkU3lzdGVtIiwibGlzdEFwcHMiLCJsaXN0U3lzdGVtcyIsImhpc3RvcnkiLCJhdXRoQ2FsbGJhY2siLCJzeXN0ZW1zTGlzdENhbGxiYWNrIiwic3lzdGVtU2VsZWN0Q2FsbGJhY2siLCJjb21wb25lbnQiLCJCb29sZWFuIiwiaG9zdG5hbWUiLCJtYXRjaCIsImdldEVsZW1lbnRCeUlkIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlYWR5IiwidGhlbiIsInJlZ2lzdHJhdGlvbiIsInVucmVnaXN0ZXIiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJtIiwiTyIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsImZ1bGZpbGxlZCIsImoiLCJldmVyeSIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibm1kIiwicGF0aHMiLCJpbnN0YWxsZWRDaHVua3MiLCIxNzkiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJiaW5kIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6IjZCQUFJQSxFLG9rQkNPU0MsRUFBbUMsQ0FDOUNDLE1BQU8sS0FDUEMsU0FBUyxFQUNUQyxNQUFPLE0sMlNDT0lDLEVBQXNCLFNBQUlDLEdBQ3JDLE1BQU8sQ0FDTEgsU0FBUyxFQUNUQyxNQUFPLEtBQ1BHLFFBQVMsR0FDVEMsT0FBUSxFQUNSQyxNQUFPSCxJQUlFSSxFQUFnQixTQUFJQyxHQUUvQixPQURZLE9BQTZCQSxHQUFRLENBQUVSLFNBQVMsRUFBTUMsTUFBTyxRQUk5RFEsRUFBYSxTQUFJRCxFQUErQlAsR0FFM0QsT0FEWSxPQUE2Qk8sR0FBUSxDQUFFUixTQUFTLEVBQU9DLE1BQUssS0FJN0RTLEVBQWEsU0FBSUYsRUFBK0JHLEVBQzNETixFQUFnQkMsRUFBZUgsRyxNQUd6QlMsR0FBOEIsSUFBQUMsV0FBVUwsR0FHOUMsSUFBS0csRUFBU0csT0FDWixPQUFPRixFQWFULEdBVEFBLEVBQU9QLE9BdENrQixTQUFDQSxHQUMxQixZQUFXVSxJQUFYVixFQUF1QixFQUFJQSxFQXFDWFcsQ0FBWVgsR0FDNUJPLEVBQU9OLE1BcENpQixTQUFDQSxFQUEyQkgsR0FDcEQsWUFBVVksSUFBVlQsRUFBc0JILEVBQWVHLEVBbUN0QlcsQ0FBV1gsRUFBT0gsR0FHakNTLEVBQU9aLFNBQVUsRUFDakJZLEVBQU9YLE1BQVEsS0FJTyxJQUFsQlcsRUFBT1AsT0FFVCxPQURBTyxFQUFPUixRQUFVTyxFQUNWQyxFQUlULEdBQUlKLEVBQVNKLFFBQVFVLFNBQVdULEVBRTlCLE9BREFPLEVBQU9SLFFBQVVRLEVBQU9SLFFBQVFjLE9BQU9QLEdBQ2hDQyxFQUlULEdBQUlKLEVBQVNKLFFBQVFVLE9BQVNULEVBRTVCLE9BREEsRUFBQU8sRUFBT1IsU0FBUWUsT0FBTSxXQUFDZCxFQUFRQyxHQUFVSyxJQUNq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MGMsRUFBb0IsU0FDekdpRCxFQUFzQmpELEVBQW9CUSxFQUFFeUMsRyIsImZpbGUiOiJtYWluLjIyZjcwOWRlNGEzZjNjNmI1NDk3LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gZnVuY3Rpb24ocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBjaHVua0lkcyA9IGRlZmVycmVkW2ldWzBdO1xuXHRcdHZhciBmbiA9IGRlZmVycmVkW2ldWzFdO1xuXHRcdHZhciBwcmlvcml0eSA9IGRlZmVycmVkW2ldWzJdO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeShmdW5jdGlvbihrZXkpIHsgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKTsgfSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHRyZXN1bHQgPSBmbigpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJpbXBvcnQgeyBBdXRoZW50aWNhdG9yU3RhdGUsIEF1dGhlbnRpY2F0b3JBY3Rpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBUQVBJU19BVVRIX0xPR0lOX1JFUVVFU1QsXG4gIFRBUElTX0FVVEhfTE9HSU5fRkFJTFVSRSxcbiAgVEFQSVNfQVVUSF9MT0dJTl9TVUNDRVNTXG59IGZyb20gJy4vYWN0aW9uVHlwZXMnO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBBdXRoZW50aWNhdG9yU3RhdGUgPSB7XG4gIHRva2VuOiBudWxsLFxuICBsb2FkaW5nOiBmYWxzZSxcbiAgZXJyb3I6IG51bGwsXG59O1xuXG5leHBvcnQgY29uc3QgYXV0aGVudGljYXRvciA9IChzdGF0ZTogQXV0aGVudGljYXRvclN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IEF1dGhlbnRpY2F0b3JBY3Rpb25zKTogQXV0aGVudGljYXRvclN0YXRlID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgVEFQSVNfQVVUSF9MT0dJTl9SRVFVRVNUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRva2VuOiBudWxsLFxuICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgIH07XG4gICAgY2FzZSBUQVBJU19BVVRIX0xPR0lOX1NVQ0NFU1M6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdG9rZW46IGFjdGlvbi5wYXlsb2FkLnRva2VuLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICB9O1xuICAgIGNhc2UgVEFQSVNfQVVUSF9MT0dJTl9GQUlMVVJFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRva2VuOiBudWxsLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGFjdGlvbi5wYXlsb2FkLmVycm9yLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59IiwiaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoJztcblxuLy8gUGFnaW5hdGVkIHJlc3VsdCB0eXBlIGFuZCB1dGlsaXR5IGZ1bmN0aW9uc1xuZXhwb3J0IHR5cGUgVGFwaXNMaXN0UmVzdWx0czxUPiA9IHtcbiAgbG9hZGluZzogYm9vbGVhbixcbiAgZXJyb3I6IEVycm9yLFxuICByZXN1bHRzOiBBcnJheTxUPixcbiAgb2Zmc2V0OiBudW1iZXIsXG4gIGxpbWl0OiBudW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IG9mZnNldENoZWNrID0gKG9mZnNldDogbnVtYmVyIHwgdW5kZWZpbmVkKTogbnVtYmVyID0+IFxuICBvZmZzZXQgPT09IHVuZGVmaW5lZCA/IDAgOiBvZmZzZXQ7XG5cbmV4cG9ydCBjb25zdCBsaW1pdENoZWNrID0gKGxpbWl0OiBudW1iZXIgfCB1bmRlZmluZWQsIGRlZmF1bHRMaW1pdDogbnVtYmVyKTogbnVtYmVyID0+XG4gIGxpbWl0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TGltaXQgOiBsaW1pdDtcblxuZXhwb3J0IGNvbnN0IGdldEVtcHR5TGlzdFJlc3VsdHMgPSA8VD4oZGVmYXVsdExpbWl0OiBudW1iZXIpOiBUYXBpc0xpc3RSZXN1bHRzPFQ+ID0+IHtcbiAgcmV0dXJuIHtcbiAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICBlcnJvcjogbnVsbCxcbiAgICByZXN1bHRzOiBbXSxcbiAgICBvZmZzZXQ6IDAsXG4gICAgbGltaXQ6IGRlZmF1bHRMaW1pdFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzZXRSZXF1ZXN0aW5nID0gPFQ+KG9yaWdpbmFsOiBUYXBpc0xpc3RSZXN1bHRzPFQ+KTogVGFwaXNMaXN0UmVzdWx0czxUPiA9PiB7XG4gIGNvbnN0IHJlc3VsdDogVGFwaXNMaXN0UmVzdWx0czxUPiA9IHsgLi4ub3JpZ2luYWwsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBjb25zdCBzZXRGYWlsdXJlID0gPFQ+KG9yaWdpbmFsOiBUYXBpc0xpc3RSZXN1bHRzPFQ+LCBlcnJvcjogRXJyb3IpOiBUYXBpc0xpc3RSZXN1bHRzPFQ+ID0+IHtcbiAgY29uc3QgcmVzdWx0OiBUYXBpc0xpc3RSZXN1bHRzPFQ+ID0geyAuLi5vcmlnaW5hbCwgbG9hZGluZzogZmFsc2UsIGVycm9yIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVMaXN0ID0gPFQ+KG9yaWdpbmFsOiBUYXBpc0xpc3RSZXN1bHRzPFQ+LCBpbmNvbWluZzogQXJyYXk8VD4sIFxuICBvZmZzZXQ6IG51bWJlciwgbGltaXQ6IG51bWJlciwgZGVmYXVsdExpbWl0OiBudW1iZXIpOiBUYXBpc0xpc3RSZXN1bHRzPFQ+ID0+IHtcblxuICAvLyBEZWVwIGNsb25lIHJlc3VsdHNcbiAgY29uc3QgcmVzdWx0OiBUYXBpc0xpc3RSZXN1bHRzPFQ+ID0gY2xvbmVEZWVwKG9yaWdpbmFsKTtcblxuICAvLyBJZiBubyByZXN1bHRzIHRvIGJlIGFkZGVkLCBkbyBub3RoaW5nXG4gIGlmICghaW5jb21pbmcubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBvZmZzZXRzIGFuZCBsaW1pdHNcbiAgcmVzdWx0Lm9mZnNldCA9IG9mZnNldENoZWNrKG9mZnNldCk7XG4gIHJlc3VsdC5saW1pdCA9IGxpbWl0Q2hlY2sobGltaXQsIGRlZmF1bHRMaW1pdCk7XG5cbiAgLy8gVXBkYXRlIGxvYWRpbmcgc3RhdGVzXG4gIHJlc3VsdC5sb2FkaW5nID0gZmFsc2U7XG4gIHJlc3VsdC5lcnJvciA9IG51bGw7XG5cbiAgLy8gSWYgdGhlIG9mZnNldCBpcyAwLCBhc3N1bWUgdGhhdCB0aGlzIGlzIGEgbmV3IGxpc3Rpbmcgb3BlcmF0aW9uXG4gIC8vIGFuZCByZXBsYWNlIHRoZSBlbnRpcmUgZXhpc3RpbmcgbGlzdC5cbiAgaWYgKHJlc3VsdC5vZmZzZXQgPT09IDApIHtcbiAgICByZXN1bHQucmVzdWx0cyA9IGluY29taW5nO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBJZiByZXN1bHRzIGFyZSB0aGUgbmV4dCBwYWdlLCBhcHBlbmQgdGhlbVxuICBpZiAob3JpZ2luYWwucmVzdWx0cy5sZW5ndGggPT09IG9mZnNldCkge1xuICAgIHJlc3VsdC5yZXN1bHRzID0gcmVzdWx0LnJlc3VsdHMuY29uY2F0KGluY29taW5nKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gSWYgcmVzdWx0cyBhcmUgaW4gYW4gZXhpc3RpbmcgcmFuZ2UsIHJlcGxhY2UgdGhlbVxuICBpZiAob3JpZ2luYWwucmVzdWx0cy5sZW5ndGggPiBvZmZzZXQpIHtcbiAgICByZXN1bHQucmVzdWx0cy5zcGxpY2Uob2Zmc2V0LCBsaW1pdCwgLi4uaW5jb21pbmcpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBJZiB0aGUgb2Zmc2V0IGlzIGJleW9uZCB0aGUgZXhpc3RpbmcgcmFuZ2UsIHRoZW4gcGFkIHdpdGggbnVsbFxuICBpZiAob3JpZ2luYWwucmVzdWx0cy5sZW5ndGggPCBvZmZzZXQpIHtcbiAgICBjb25zdCBwYWRkaW5nOiBBcnJheTxUPiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2Zmc2V0IC0gb3JpZ2luYWwucmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFkZGluZy5wdXNoKG51bGwpO1xuICAgIH1cbiAgICByZXN1bHQucmVzdWx0cyA9IHJlc3VsdC5yZXN1bHRzLmNvbmNhdChwYWRkaW5nKS5jb25jYXQoaW5jb21pbmcpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCB7XG4gIFN5c3RlbXNSZWR1Y2VyU3RhdGUsXG4gIFN5c3RlbXNMaXN0aW5nUmVxdWVzdFBheWxvYWQsXG4gIFN5c3RlbXNMaXN0aW5nU3VjY2Vzc1BheWxvYWQsXG4gIFN5c3RlbXNMaXN0aW5nRmFpbHVyZVBheWxvYWRcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICB1cGRhdGVMaXN0LFxuICBzZXRSZXF1ZXN0aW5nLFxuICBzZXRGYWlsdXJlLFxuICBnZXRFbXB0eUxpc3RSZXN1bHRzLFxuICBUYXBpc0xpc3RSZXN1bHRzXG59IGZyb20gJ3RhcGlzLXJlZHV4L3R5cGVzL3Jlc3VsdHMnXG5pbXBvcnQgeyBUQVBJU19ERUZBVUxUX1NZU1RFTVNfTElTVElOR19MSU1JVCB9IGZyb20gJ3RhcGlzLXJlZHV4L2NvbnN0YW50cy90YXBpcyc7XG5pbXBvcnQgKiBhcyBBQ1RJT05TIGZyb20gJy4vYWN0aW9uVHlwZXMnO1xuaW1wb3J0IHsgU3lzdGVtcyB9IGZyb20gJ0B0YXBpcy90YXBpcy10eXBlc2NyaXB0JztcblxuXG5jb25zdCBlbXB0eVJlc3VsdHMgPSBnZXRFbXB0eUxpc3RSZXN1bHRzKFRBUElTX0RFRkFVTFRfU1lTVEVNU19MSVNUSU5HX0xJTUlUKTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogU3lzdGVtc1JlZHVjZXJTdGF0ZSA9IHtcbiAgc3lzdGVtczogeyAuLi5lbXB0eVJlc3VsdHMgfVxufTtcblxuY29uc3Qgc2V0TGlzdGluZ1JlcXVlc3QgPSAoc3lzdGVtczogVGFwaXNMaXN0UmVzdWx0czxTeXN0ZW1zLlRhcGlzU3lzdGVtPixcbiAgcGF5bG9hZDogU3lzdGVtc0xpc3RpbmdSZXF1ZXN0UGF5bG9hZCk6IFRhcGlzTGlzdFJlc3VsdHM8U3lzdGVtcy5UYXBpc1N5c3RlbT4gPT4ge1xuICBjb25zdCByZXN1bHQgPSBzZXRSZXF1ZXN0aW5nKHN5c3RlbXMpO1xuICByZXR1cm4gcmVzdWx0O1xufSBcblxuY29uc3Qgc2V0TGlzdGluZ1N1Y2Nlc3MgPSAoc3lzdGVtczogVGFwaXNMaXN0UmVzdWx0czxTeXN0ZW1zLlRhcGlzU3lzdGVtPixcbiAgcGF5bG9hZDogU3lzdGVtc0xpc3RpbmdTdWNjZXNzUGF5bG9hZCk6IFRhcGlzTGlzdFJlc3VsdHM8U3lzdGVtcy5UYXBpc1N5c3RlbT4gPT4ge1xuICAvLyBUT0RPOiBIYW5kbGUgZGlmZmVyZW50IGNvbWJpbmF0aW9ucyBvZiBza2lwIGFuZCBzdGFydEFmdGVyIHJlcXVlc3RzXG4gIGNvbnN0IHJlc3VsdCA9IHVwZGF0ZUxpc3Qoc3lzdGVtcywgcGF5bG9hZC5pbmNvbWluZywgcGF5bG9hZC5wYXJhbXMuc2tpcCwgXG4gICAgcGF5bG9hZC5wYXJhbXMubGltaXQsIFRBUElTX0RFRkFVTFRfU1lTVEVNU19MSVNUSU5HX0xJTUlUKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3Qgc2V0TGlzdGluZ0ZhaWx1cmUgPSAoc3lzdGVtczogVGFwaXNMaXN0UmVzdWx0czxTeXN0ZW1zLlRhcGlzU3lzdGVtPixcbiAgcGF5bG9hZDogU3lzdGVtc0xpc3RpbmdGYWlsdXJlUGF5bG9hZCk6IFRhcGlzTGlzdFJlc3VsdHM8U3lzdGVtcy5UYXBpc1N5c3RlbT4gPT4ge1xuICBjb25zdCByZXN1bHQgPSBzZXRGYWlsdXJlKHN5c3RlbXMsIHBheWxvYWQuZXJyb3IpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3lzdGVtcyhzdGF0ZTogU3lzdGVtc1JlZHVjZXJTdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKTogU3lzdGVtc1JlZHVjZXJTdGF0ZSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTlMuVEFQSVNfU1lTVEVNU19MSVNUX1JFUVVFU1Q6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc3lzdGVtczogc2V0TGlzdGluZ1JlcXVlc3Qoc3RhdGUuc3lzdGVtcywgYWN0aW9uLnBheWxvYWQpXG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OUy5UQVBJU19TWVNURU1TX0xJU1RfU1VDQ0VTUzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzeXN0ZW1zOiBzZXRMaXN0aW5nU3VjY2VzcyhzdGF0ZS5zeXN0ZW1zLCBhY3Rpb24ucGF5bG9hZClcbiAgICAgIH07XG4gICAgY2FzZSBBQ1RJT05TLlRBUElTX1NZU1RFTVNfTElTVF9GQUlMVVJFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHN5c3RlbXM6IHNldExpc3RpbmdGYWlsdXJlKHN0YXRlLnN5c3RlbXMsIGFjdGlvbi5wYXlsb2FkKVxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgVEFQSVNfREVGQVVMVF9GSUxFU19MSVNUSU5HX0xJTUlUID0gMTAwMDtcbmV4cG9ydCBjb25zdCBUQVBJU19ERUZBVUxUX1NZU1RFTVNfTElTVElOR19MSU1JVCA9IDEwMDtcbmV4cG9ydCBjb25zdCBUQVBJU19ERUZBVUxUX0FQUFNfTElTVElOR19MSU1JVCA9IDEwMDtcbmV4cG9ydCBjb25zdCBUQVBJU19ERUZBVUxUX0pPQlNfTElTVElOR19MSU1JVCA9IDEwMDtcbiIsImV4cG9ydCBjb25zdCBUQVBJU19GSUxFU19MSVNUX1JFUVVFU1QgPSAnVEFQSVNfRklMRVNfTElTVF9SRVFVRVNUJztcbmV4cG9ydCBjb25zdCBUQVBJU19GSUxFU19MSVNUX1NVQ0NFU1MgPSAnVEFQSVNfRklMRVNfTElTVF9TVUNDRVNTJztcbmV4cG9ydCBjb25zdCBUQVBJU19GSUxFU19MSVNUX0ZBSUxVUkUgPSAnVEFQSVNfRklMRVNfTElTVF9GQUlMVVJFJzsiLCJpbXBvcnQgeyBGaWxlcyB9IGZyb20gJ0B0YXBpcy90YXBpcy10eXBlc2NyaXB0JztcbmltcG9ydCAqIGFzIEFDVElPTlMgZnJvbSAnLi9hY3Rpb25UeXBlcyc7XG5pbXBvcnQge1xuICBGaWxlc1JlZHVjZXJTdGF0ZSxcbiAgRmlsZUxpc3RpbmdTeXN0ZW1NYXAsXG4gIEZpbGVMaXN0aW5nQWN0aW9ucyxcbiAgRmlsZUxpc3RpbmdSZXF1ZXN0UGF5bG9hZCxcbiAgRmlsZUxpc3RpbmdGYWlsdXJlUGF5bG9hZCxcbiAgRmlsZUxpc3RpbmdTdWNjZXNzUGF5bG9hZFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIHVwZGF0ZUxpc3QsXG4gIHNldFJlcXVlc3RpbmcsXG4gIHNldEZhaWx1cmUsXG4gIGdldEVtcHR5TGlzdFJlc3VsdHNcbn0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMvcmVzdWx0cyc7XG5pbXBvcnQgeyBUQVBJU19ERUZBVUxUX0ZJTEVTX0xJU1RJTkdfTElNSVQgfSBmcm9tICd0YXBpcy1yZWR1eC9jb25zdGFudHMvdGFwaXMnO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBGaWxlc1JlZHVjZXJTdGF0ZSA9IHtcbiAgbGlzdGluZ3M6IHt9XG59O1xuXG4vLyBHZW5lcmF0ZXMgYSBsaXN0aW5nIHN0YXRlIHRoYXQgaGFzIGF0IGxlYXN0IGEgZGVmYXVsdCBzeXN0ZW1JZCBhbmQgcGF0aCBlbnRyeVxuZXhwb3J0IGNvbnN0IGxpc3RpbmdNYXBDaGVjayA9IChsaXN0aW5nczogRmlsZUxpc3RpbmdTeXN0ZW1NYXAsIFxuICBzeXN0ZW1JZDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBGaWxlTGlzdGluZ1N5c3RlbU1hcCA9PiB7XG4gIGNvbnN0IHJlc3VsdDogRmlsZUxpc3RpbmdTeXN0ZW1NYXAgPSB7IC4uLmxpc3RpbmdzIH07XG4gIGlmICghKHN5c3RlbUlkIGluIHJlc3VsdCkpIHtcbiAgICByZXN1bHRbc3lzdGVtSWRdID0ge31cbiAgfVxuICBpZiAoIShwYXRoIGluIHJlc3VsdFtzeXN0ZW1JZF0pKSB7XG4gICAgcmVzdWx0W3N5c3RlbUlkXVtwYXRoXSA9IGdldEVtcHR5TGlzdFJlc3VsdHM8RmlsZXMuRmlsZUluZm8+KFxuICAgICAgVEFQSVNfREVGQVVMVF9GSUxFU19MSVNUSU5HX0xJTUlUKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBzZXRMaXN0aW5nU3VjY2VzcyA9IChsaXN0aW5nczogRmlsZUxpc3RpbmdTeXN0ZW1NYXAsIHBheWxvYWQ6IEZpbGVMaXN0aW5nU3VjY2Vzc1BheWxvYWQpOiBGaWxlTGlzdGluZ1N5c3RlbU1hcCA9PiB7XG4gIC8vIEFwcGVuZCBsaXN0aW5nIHJlc3VsdHMgdG8gZXhpc3RpbmcgZGVmaW5pdGlvbnMsIGdlbmVyYXRlIG5ldyBvYmplY3RcbiAgY29uc3QgeyBzeXN0ZW1JZCwgcGF0aCwgaW5jb21pbmcsIG9mZnNldCwgbGltaXQgfSA9IHBheWxvYWQ7XG4gIGNvbnN0IHJlc3VsdDogRmlsZUxpc3RpbmdTeXN0ZW1NYXAgPSBsaXN0aW5nTWFwQ2hlY2sobGlzdGluZ3MsIHN5c3RlbUlkLCBwYXRoKTtcbiAgcmVzdWx0W3N5c3RlbUlkXVtwYXRoXSA9IHVwZGF0ZUxpc3Q8RmlsZXMuRmlsZUluZm8+KFxuICAgIHJlc3VsdFtzeXN0ZW1JZF1bcGF0aF0sXG4gICAgaW5jb21pbmcsXG4gICAgb2Zmc2V0LFxuICAgIGxpbWl0LCBcbiAgICBUQVBJU19ERUZBVUxUX0ZJTEVTX0xJU1RJTkdfTElNSVRcbiAgKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmNvbnN0IHNldExpc3RpbmdSZXF1ZXN0ID0gKGxpc3RpbmdzOiBGaWxlTGlzdGluZ1N5c3RlbU1hcCwgXG4gIHBheWxvYWQ6IEZpbGVMaXN0aW5nUmVxdWVzdFBheWxvYWQpOiBGaWxlTGlzdGluZ1N5c3RlbU1hcCA9PiB7XG4gIGNvbnN0IHsgc3lzdGVtSWQsIHBhdGggfSA9IHBheWxvYWQ7XG4gIGNvbnN0IHJlc3VsdDogRmlsZUxpc3RpbmdTeXN0ZW1NYXAgPSBsaXN0aW5nTWFwQ2hlY2sobGlzdGluZ3MsIHN5c3RlbUlkLCBwYXRoKTtcbiAgcmVzdWx0W3N5c3RlbUlkXVtwYXRoXSA9IHNldFJlcXVlc3Rpbmc8RmlsZXMuRmlsZUluZm8+KHJlc3VsdFtzeXN0ZW1JZF1bcGF0aF0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBzZXRMaXN0aW5nRmFpbHVyZSA9IChsaXN0aW5nczogRmlsZUxpc3RpbmdTeXN0ZW1NYXAsIFxuICBwYXlsb2FkOiBGaWxlTGlzdGluZ0ZhaWx1cmVQYXlsb2FkKTogRmlsZUxpc3RpbmdTeXN0ZW1NYXAgPT4gIHtcbiAgY29uc3QgeyBzeXN0ZW1JZCwgcGF0aCwgZXJyb3IgfSA9IHBheWxvYWQ7XG4gIGNvbnN0IHJlc3VsdDogRmlsZUxpc3RpbmdTeXN0ZW1NYXAgPSBsaXN0aW5nTWFwQ2hlY2sobGlzdGluZ3MsIHN5c3RlbUlkLCBwYXRoKTtcbiAgcmVzdWx0W3N5c3RlbUlkXVtwYXRoXSA9IHNldEZhaWx1cmU8RmlsZXMuRmlsZUluZm8+KHJlc3VsdFtzeXN0ZW1JZF1bcGF0aF0sIGVycm9yKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGVzKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IEZpbGVMaXN0aW5nQWN0aW9ucyk6IEZpbGVzUmVkdWNlclN0YXRlIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OUy5UQVBJU19GSUxFU19MSVNUX1JFUVVFU1Q6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbGlzdGluZ3M6IHNldExpc3RpbmdSZXF1ZXN0KHN0YXRlLmxpc3RpbmdzLCBhY3Rpb24ucGF5bG9hZCkgXG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OUy5UQVBJU19GSUxFU19MSVNUX1NVQ0NFU1M6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbGlzdGluZ3M6IHNldExpc3RpbmdTdWNjZXNzKHN0YXRlLmxpc3RpbmdzLCBhY3Rpb24ucGF5bG9hZClcbiAgICAgIH07XG4gICAgY2FzZSBBQ1RJT05TLlRBUElTX0ZJTEVTX0xJU1RfRkFJTFVSRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsaXN0aW5nczogc2V0TGlzdGluZ0ZhaWx1cmUoc3RhdGUubGlzdGluZ3MsIGFjdGlvbi5wYXlsb2FkKVxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgVEFQSVNfQVBQU19MSVNUX1JFUVVFU1QgPSAnVEFQSVNfQVBQU19MSVNUX1JFUVVFU1QnO1xuZXhwb3J0IGNvbnN0IFRBUElTX0FQUFNfTElTVF9TVUNDRVNTID0gJ1RBUElTX0FQUFNfTElTVF9TVUNDRVNTJztcbmV4cG9ydCBjb25zdCBUQVBJU19BUFBTX0xJU1RfRkFJTFVSRSA9ICdUQVBJU19BUFBTX0xJU1RfRkFJTFVSRSc7IiwiaW1wb3J0IHsgQXBwc1JlZHVjZXJTdGF0ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIEFwcHNMaXN0aW5nUmVxdWVzdFBheWxvYWQsXG4gIEFwcHNMaXN0aW5nU3VjY2Vzc1BheWxvYWQsXG4gIEFwcHNMaXN0aW5nRmFpbHVyZVBheWxvYWQsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgdXBkYXRlTGlzdCxcbiAgc2V0UmVxdWVzdGluZyxcbiAgc2V0RmFpbHVyZSxcbiAgZ2V0RW1wdHlMaXN0UmVzdWx0cyxcbiAgVGFwaXNMaXN0UmVzdWx0c1xufSBmcm9tICd0YXBpcy1yZWR1eC90eXBlcy9yZXN1bHRzJ1xuaW1wb3J0IHsgVEFQSVNfREVGQVVMVF9BUFBTX0xJU1RJTkdfTElNSVQgfSBmcm9tICd0YXBpcy1yZWR1eC9jb25zdGFudHMvdGFwaXMnO1xuaW1wb3J0ICogYXMgQUNUSU9OUyBmcm9tICcuL2FjdGlvblR5cGVzJztcbmltcG9ydCB7IEFwcHMgfSBmcm9tICdAdGFwaXMvdGFwaXMtdHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBBcHBzUmVkdWNlciB9IGZyb20gJy4uL3R5cGVzJztcblxuXG5jb25zdCBlbXB0eVJlc3VsdHMgPSBnZXRFbXB0eUxpc3RSZXN1bHRzKFRBUElTX0RFRkFVTFRfQVBQU19MSVNUSU5HX0xJTUlUKTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogQXBwc1JlZHVjZXJTdGF0ZSA9IHtcbiAgYXBwczogeyAuLi5lbXB0eVJlc3VsdHMgfVxufTtcblxuY29uc3Qgc2V0TGlzdGluZ1JlcXVlc3QgPSAoYXBwczogVGFwaXNMaXN0UmVzdWx0czxBcHBzLlRhcGlzQXBwPixcbiAgcGF5bG9hZDogQXBwc0xpc3RpbmdSZXF1ZXN0UGF5bG9hZCk6IFRhcGlzTGlzdFJlc3VsdHM8QXBwcy5UYXBpc0FwcD4gPT4ge1xuICBjb25zdCByZXN1bHQgPSBzZXRSZXF1ZXN0aW5nKGFwcHMpO1xuICByZXR1cm4gcmVzdWx0O1xufSBcblxuY29uc3Qgc2V0TGlzdGluZ1N1Y2Nlc3MgPSAoYXBwczogVGFwaXNMaXN0UmVzdWx0czxBcHBzLlRhcGlzQXBwPixcbiAgcGF5bG9hZDogQXBwc0xpc3RpbmdTdWNjZXNzUGF5bG9hZCk6IFRhcGlzTGlzdFJlc3VsdHM8QXBwcy5UYXBpc0FwcD4gPT4ge1xuICAvLyBUT0RPOiBIYW5kbGUgZGlmZmVyZW50IGNvbWJpbmF0aW9ucyBvZiBza2lwIGFuZCBzdGFydEFmdGVyIHJlcXVlc3RzXG4gIGNvbnN0IHJlc3VsdCA9IHVwZGF0ZUxpc3QoYXBwcywgcGF5bG9hZC5pbmNvbWluZywgcGF5bG9hZC5wYXJhbXMuc2tpcCwgXG4gICAgcGF5bG9hZC5wYXJhbXMubGltaXQsIFRBUElTX0RFRkFVTFRfQVBQU19MSVNUSU5HX0xJTUlUKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3Qgc2V0TGlzdGluZ0ZhaWx1cmUgPSAoYXBwczogVGFwaXNMaXN0UmVzdWx0czxBcHBzLlRhcGlzQXBwPixcbiAgcGF5bG9hZDogQXBwc0xpc3RpbmdGYWlsdXJlUGF5bG9hZCk6IFRhcGlzTGlzdFJlc3VsdHM8QXBwcy5UYXBpc0FwcD4gPT4ge1xuICBjb25zdCByZXN1bHQgPSBzZXRGYWlsdXJlKGFwcHMsIHBheWxvYWQuZXJyb3IpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgY29uc3QgbGlzdDogQXBwc1JlZHVjZXIgPSAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBBQ1RJT05TLlRBUElTX0FQUFNfTElTVF9SRVFVRVNUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGFwcHM6IHNldExpc3RpbmdSZXF1ZXN0KHN0YXRlLmFwcHMsIGFjdGlvbi5wYXlsb2FkKVxuICAgICAgfTtcbiAgICBjYXNlIEFDVElPTlMuVEFQSVNfQVBQU19MSVNUX1NVQ0NFU1M6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYXBwczogc2V0TGlzdGluZ1N1Y2Nlc3Moc3RhdGUuYXBwcywgYWN0aW9uLnBheWxvYWQpXG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OUy5UQVBJU19BUFBTX0xJU1RfRkFJTFVSRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBhcHBzOiBzZXRMaXN0aW5nRmFpbHVyZShzdGF0ZS5hcHBzLCBhY3Rpb24ucGF5bG9hZClcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgbGlzdCB9IGZyb20gJy4vbGlzdC9yZWR1Y2VyJztcbmltcG9ydCB7IGdldEVtcHR5TGlzdFJlc3VsdHMgfSBmcm9tICd0YXBpcy1yZWR1eC90eXBlcy9yZXN1bHRzJztcbmltcG9ydCB7IEFwcHNSZWR1Y2VyU3RhdGUsIEFwcHNBY3Rpb24sIEFwcHNSZWR1Y2VyIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBUQVBJU19ERUZBVUxUX0FQUFNfTElTVElOR19MSU1JVCB9IGZyb20gJ3RhcGlzLXJlZHV4L2NvbnN0YW50cy90YXBpcyc7XG5cbmNvbnN0IGVtcHR5UmVzdWx0cyA9IGdldEVtcHR5TGlzdFJlc3VsdHMoVEFQSVNfREVGQVVMVF9BUFBTX0xJU1RJTkdfTElNSVQpO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBBcHBzUmVkdWNlclN0YXRlID0ge1xuICBhcHBzOiB7IC4uLmVtcHR5UmVzdWx0cyB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwcyhzdGF0ZTogQXBwc1JlZHVjZXJTdGF0ZT1pbml0aWFsU3RhdGUsIGFjdGlvbjogQXBwc0FjdGlvbik6IEFwcHNSZWR1Y2VyU3RhdGUge1xuICAvLyBBcHBseSBlYWNoIG9mIHRoZSBzdWItcmVkdWNlcnMgaW4gc2VxdWVuY2VcbiAgY29uc3QgcmVkdWNlcnM6IEFycmF5PEFwcHNSZWR1Y2VyPiA9IFsgbGlzdCBdO1xuICBsZXQgcmVzdWx0ID0geyAuLi5zdGF0ZSB9O1xuICByZWR1Y2Vycy5mb3JFYWNoKFxuICAgIChyZWR1Y2VyKSA9PiB7XG4gICAgICByZXN1bHQgPSByZWR1Y2VyKHJlc3VsdCwgYWN0aW9uKVxuICAgIH1cbiAgKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJleHBvcnQgY29uc3QgVEFQSVNfSk9CU19MSVNUX1JFUVVFU1QgPSAnVEFQSVNfSk9CU19MSVNUX1JFUVVFU1QnO1xuZXhwb3J0IGNvbnN0IFRBUElTX0pPQlNfTElTVF9TVUNDRVNTID0gJ1RBUElTX0pPQlNfTElTVF9TVUNDRVNTJztcbmV4cG9ydCBjb25zdCBUQVBJU19KT0JTX0xJU1RfRkFJTFVSRSA9ICdUQVBJU19KT0JTX0xJU1RfRkFJTFVSRSc7IiwiaW1wb3J0IHsgSm9ic1JlZHVjZXJTdGF0ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIEpvYnNMaXN0aW5nUmVxdWVzdFBheWxvYWQsXG4gIEpvYnNMaXN0aW5nU3VjY2Vzc1BheWxvYWQsXG4gIEpvYnNMaXN0aW5nRmFpbHVyZVBheWxvYWQsXG4gIEpvYnNMaXN0aW5nQWN0aW9uXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgdXBkYXRlTGlzdCxcbiAgc2V0UmVxdWVzdGluZyxcbiAgc2V0RmFpbHVyZSxcbiAgZ2V0RW1wdHlMaXN0UmVzdWx0cyxcbiAgVGFwaXNMaXN0UmVzdWx0c1xufSBmcm9tICd0YXBpcy1yZWR1eC90eXBlcy9yZXN1bHRzJ1xuaW1wb3J0IHsgVEFQSVNfREVGQVVMVF9KT0JTX0xJU1RJTkdfTElNSVQgfSBmcm9tICd0YXBpcy1yZWR1eC9jb25zdGFudHMvdGFwaXMnO1xuaW1wb3J0ICogYXMgQUNUSU9OUyBmcm9tICcuL2FjdGlvblR5cGVzJztcbmltcG9ydCB7IEpvYnMsIFN5c3RlbXMgfSBmcm9tICdAdGFwaXMvdGFwaXMtdHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBKb2JzUmVkdWNlciwgSm9ic0FjdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcblxuXG5jb25zdCBlbXB0eVJlc3VsdHMgPSBnZXRFbXB0eUxpc3RSZXN1bHRzKFRBUElTX0RFRkFVTFRfSk9CU19MSVNUSU5HX0xJTUlUKTtcblxuY29uc3Qgc2V0TGlzdGluZ1JlcXVlc3QgPSAoam9iczogVGFwaXNMaXN0UmVzdWx0czxKb2JzLkpvYkxpc3REVE8+LFxuICBwYXlsb2FkOiBKb2JzTGlzdGluZ1JlcXVlc3RQYXlsb2FkKTogVGFwaXNMaXN0UmVzdWx0czxKb2JzLkpvYkxpc3REVE8+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gc2V0UmVxdWVzdGluZyhqb2JzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0gXG5cbmNvbnN0IHNldExpc3RpbmdTdWNjZXNzID0gKGpvYnM6IFRhcGlzTGlzdFJlc3VsdHM8Sm9icy5Kb2JMaXN0RFRPPixcbiAgcGF5bG9hZDogSm9ic0xpc3RpbmdTdWNjZXNzUGF5bG9hZCk6IFRhcGlzTGlzdFJlc3VsdHM8Sm9icy5Kb2JMaXN0RFRPPiA9PiB7XG4gIC8vIFRPRE86IEhhbmRsZSBkaWZmZXJlbnQgY29tYmluYXRpb25zIG9mIHNraXAgYW5kIHN0YXJ0QWZ0ZXIgcmVxdWVzdHNcbiAgY29uc3QgcmVzdWx0ID0gdXBkYXRlTGlzdChqb2JzLCBwYXlsb2FkLmluY29taW5nLCBwYXlsb2FkLnBhcmFtcy5za2lwLCBcbiAgICBwYXlsb2FkLnBhcmFtcy5saW1pdCwgVEFQSVNfREVGQVVMVF9KT0JTX0xJU1RJTkdfTElNSVQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBzZXRMaXN0aW5nRmFpbHVyZSA9IChqb2JzOiBUYXBpc0xpc3RSZXN1bHRzPEpvYnMuSm9iTGlzdERUTz4sXG4gIHBheWxvYWQ6IEpvYnNMaXN0aW5nRmFpbHVyZVBheWxvYWQpOiBUYXBpc0xpc3RSZXN1bHRzPEpvYnMuSm9iTGlzdERUTz4gPT4ge1xuICBjb25zdCByZXN1bHQgPSBzZXRGYWlsdXJlKGpvYnMsIHBheWxvYWQuZXJyb3IpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgY29uc3QgbGlzdDogSm9ic1JlZHVjZXIgPSAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBBQ1RJT05TLlRBUElTX0pPQlNfTElTVF9SRVFVRVNUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGpvYnM6IHNldExpc3RpbmdSZXF1ZXN0KHN0YXRlLmpvYnMsIGFjdGlvbi5wYXlsb2FkKVxuICAgICAgfTtcbiAgICBjYXNlIEFDVElPTlMuVEFQSVNfSk9CU19MSVNUX1NVQ0NFU1M6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgam9iczogc2V0TGlzdGluZ1N1Y2Nlc3Moc3RhdGUuam9icywgYWN0aW9uLnBheWxvYWQpXG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OUy5UQVBJU19KT0JTX0xJU1RfRkFJTFVSRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBqb2JzOiBzZXRMaXN0aW5nRmFpbHVyZShzdGF0ZS5qb2JzLCBhY3Rpb24ucGF5bG9hZClcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgQUNUSU9OUyBmcm9tICcuL2FjdGlvblR5cGVzJztcbmltcG9ydCB7IEpvYnNSZWR1Y2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5cbmV4cG9ydCBjb25zdCBzdWJtaXQ6IEpvYnNSZWR1Y2VyID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OUy5UQVBJU19KT0JTX1NVQk1JVF9SRVFVRVNUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIHJlc3VsdDogbnVsbFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OUy5UQVBJU19KT0JTX1NVQk1JVF9TVUNDRVNTOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICByZXN1bHQ6IGFjdGlvbi5wYXlsb2FkLnJlc3VsdFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OUy5UQVBJU19KT0JTX1NVQk1JVF9GQUlMVVJFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogYWN0aW9uLnBheWxvYWQuZXJyb3IsXG4gICAgICAgICAgcmVzdWx0OiBudWxsXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgY2FzZSBBQ1RJT05TLlRBUElTX0pPQlNfU1VCTUlUX1JFU0VUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICByZXN1bHQ6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBUQVBJU19KT0JTX1NVQk1JVF9SRVFVRVNUID0gJ1RBUElTX0pPQlNfU1VCTUlUX1JFUVVFU1QnO1xuZXhwb3J0IGNvbnN0IFRBUElTX0pPQlNfU1VCTUlUX1NVQ0NFU1MgPSAnVEFQSVNfSk9CU19TVUJNSVRfU1VDQ0VTUyc7XG5leHBvcnQgY29uc3QgVEFQSVNfSk9CU19TVUJNSVRfRkFJTFVSRSA9ICdUQVBJU19KT0JTX1NVQk1JVF9GQUlMVVJFJztcbmV4cG9ydCBjb25zdCBUQVBJU19KT0JTX1NVQk1JVF9SRVNFVCA9ICdUQVBJU19KT0JTX1NVQk1JVF9SRVNFVCc7IiwiaW1wb3J0IHsgbGlzdCB9IGZyb20gJy4vbGlzdC9yZWR1Y2VyJztcbmltcG9ydCB7IHN1Ym1pdCB9IGZyb20gJy4vc3VibWl0L3JlZHVjZXInO1xuaW1wb3J0IHsgZ2V0RW1wdHlMaXN0UmVzdWx0cyB9IGZyb20gJ3RhcGlzLXJlZHV4L3R5cGVzL3Jlc3VsdHMnO1xuaW1wb3J0IHsgSm9ic1JlZHVjZXJTdGF0ZSwgSm9ic0FjdGlvbiwgSm9ic1JlZHVjZXIgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFRBUElTX0RFRkFVTFRfSk9CU19MSVNUSU5HX0xJTUlUIH0gZnJvbSAndGFwaXMtcmVkdXgvY29uc3RhbnRzL3RhcGlzJztcblxuY29uc3QgZW1wdHlSZXN1bHRzID0gZ2V0RW1wdHlMaXN0UmVzdWx0cyhUQVBJU19ERUZBVUxUX0pPQlNfTElTVElOR19MSU1JVCk7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IEpvYnNSZWR1Y2VyU3RhdGUgPSB7XG4gIGpvYnM6IHsgLi4uZW1wdHlSZXN1bHRzIH0sXG4gIHN1Ym1pc3Npb246IHtcbiAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICBlcnJvcjogbnVsbCxcbiAgICByZXN1bHQ6IG51bGxcbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGpvYnMoc3RhdGU6IEpvYnNSZWR1Y2VyU3RhdGU9aW5pdGlhbFN0YXRlLCBhY3Rpb246IEpvYnNBY3Rpb24pOiBKb2JzUmVkdWNlclN0YXRlIHtcbiAgLy8gQXBwbHkgZWFjaCBvZiB0aGUgc3ViLXJlZHVjZXJzIGluIHNlcXVlbmNlXG4gIGNvbnN0IHJlZHVjZXJzOiBBcnJheTxKb2JzUmVkdWNlcj4gPSBbIGxpc3QsIHN1Ym1pdCBdO1xuICBsZXQgcmVzdWx0ID0geyAuLi5zdGF0ZSB9O1xuICByZWR1Y2Vycy5mb3JFYWNoKFxuICAgIChyZWR1Y2VyKSA9PiB7XG4gICAgICByZXN1bHQgPSByZWR1Y2VyKHJlc3VsdCwgYWN0aW9uKVxuICAgIH1cbiAgKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBhdXRoZW50aWNhdG9yIH0gZnJvbSAnLi4vYXV0aGVudGljYXRvci9yZWR1Y2VyJztcbmltcG9ydCB7IHN5c3RlbXMgfSBmcm9tICcuLi9zeXN0ZW1zL3JlZHVjZXInO1xuaW1wb3J0IHsgZmlsZXMgfSBmcm9tICcuLi9maWxlcy9yZWR1Y2VyJztcbmltcG9ydCB7IGFwcHMgfSBmcm9tICcuLi9hcHBzL3JlZHVjZXInO1xuaW1wb3J0IHsgam9icyB9IGZyb20gJy4uL2pvYnMvcmVkdWNlcic7XG5cbmNvbnN0IHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcbiAgYXV0aGVudGljYXRvcixcbiAgc3lzdGVtcyxcbiAgZmlsZXMsXG4gIGFwcHMsXG4gIGpvYnNcbn0pO1xuXG5leHBvcnQgdHlwZSBUYXBpc1N0YXRlID0gUmV0dXJuVHlwZTx0eXBlb2Ygcm9vdFJlZHVjZXI+O1xuXG5leHBvcnQgZGVmYXVsdCByb290UmVkdWNlcjsiLCJleHBvcnQgY29uc3QgVEFQSVNfQVVUSF9MT0dJTl9SRVFVRVNUID0gXCJUQVBJU19BVVRIX0xPR0lOX1JFUVVFU1RcIjtcbmV4cG9ydCBjb25zdCBUQVBJU19BVVRIX0xPR0lOX1NVQ0NFU1MgPSBcIlRBUElTX0FVVEhfTE9HSU5fU1VDQ0VTU1wiO1xuZXhwb3J0IGNvbnN0IFRBUElTX0FVVEhfTE9HSU5fRkFJTFVSRSA9IFwiVEFQSVNfQVVUSF9MT0dJTl9GQUlMVVJFXCI7IiwiZXhwb3J0IGNvbnN0IFRBUElTX1NZU1RFTVNfTElTVF9SRVFVRVNUID0gJ1RBUElTX1NZU1RFTVNfTElTVF9SRVFVRVNUJztcbmV4cG9ydCBjb25zdCBUQVBJU19TWVNURU1TX0xJU1RfU1VDQ0VTUyA9ICdUQVBJU19TWVNURU1TX0xJU1RfU1VDQ0VTUyc7XG5leHBvcnQgY29uc3QgVEFQSVNfU1lTVEVNU19MSVNUX0ZBSUxVUkUgPSAnVEFQSVNfU1lTVEVNU19MSVNUX0ZBSUxVUkUnOyIsImltcG9ydCB7IGNhbGwsIHB1dCwgdGFrZUxlYWRpbmcgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuaW1wb3J0IHsgXG4gIFRBUElTX0FVVEhfTE9HSU5fUkVRVUVTVCxcbiAgVEFQSVNfQVVUSF9MT0dJTl9TVUNDRVNTLFxuICBUQVBJU19BVVRIX0xPR0lOX0ZBSUxVUkVcbn0gZnJvbSAnLi9hY3Rpb25UeXBlcyc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdG9yTG9naW5SZXF1ZXN0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdG9yIH0gZnJvbSAnQHRhcGlzL3RhcGlzLXR5cGVzY3JpcHQnO1xuaW1wb3J0IGZldGNoIGZyb20gJ2Nyb3NzLWZldGNoJztcblxuZXhwb3J0IGZ1bmN0aW9uKiB0YXBpc0F1dGgocGF5bG9hZCkge1xuICAgIGNvbnN0IHsgY29uZmlnLCB1c2VybmFtZSwgcGFzc3dvcmQgfSA9IHBheWxvYWQ7XG5cbiAgICAvLyBBdXRoZW50aWNhdG9yIGRvZXMgbm90IHNlZW0gdG8gYmUgcHJvcGVybHkgc3VwcG9ydGVkIGluIHRoZSBBUEkgU3BlY1xuICAgIC8vIFNlYXJjaCBmb3IgYSB0ZW5hbnQgdXJsIGEgcHJvdmlkZWQgdGFwaXMgY29uZmlnLCBvciBqdXN0IHVzZSBlbnZpcm9ubWVudCBkZWZhdWx0XG4gICAgY29uc3QgZGVmYXVsdFVybCA9IHByb2Nlc3MuZW52LlRBUElTX1RFTkFOVF9VUkw7XG4gICAgY29uc3QgdGVuYW50ID0gY29uZmlnID8gY29uZmlnLnRlbmFudCB8fCBkZWZhdWx0VXJsIDogZGVmYXVsdFVybDtcblxuICAgIC8vIEdlbmVyYXRlIGEgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIHRoZSBtb2R1bGUgd2l0aCB0aGVcbiAgICAvLyBBUEkgVVJMIGFuZCB0aGUgYXV0aG9yaXphdGlvbiBoZWFkZXJcbiAgICBjb25zdCBjb25maWd1cmF0aW9uID0gbmV3IChBdXRoZW50aWNhdG9yLkNvbmZpZ3VyYXRpb24pKHtcbiAgICAgIGJhc2VQYXRoOiB0ZW5hbnQsXG4gICAgICBmZXRjaEFwaTogZmV0Y2hcbiAgICB9KTtcbiAgICBjb25zdCBhcGk6IEF1dGhlbnRpY2F0b3IuVG9rZW5zQXBpID0gbmV3IEF1dGhlbnRpY2F0b3IuVG9rZW5zQXBpKGNvbmZpZ3VyYXRpb24pO1xuICAgIGNvbnN0IHJlcUNyZWF0ZVRva2VuOiBBdXRoZW50aWNhdG9yLlJlcUNyZWF0ZVRva2VuID0ge1xuICAgICAgZ3JhbnRfdHlwZTogXCJwYXNzd29yZFwiLFxuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZFxuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0OiBBdXRoZW50aWNhdG9yLkNyZWF0ZVRva2VuUmVxdWVzdCA9IHtcbiAgICAgIHJlcUNyZWF0ZVRva2VuXG4gICAgfVxuICAgIC8vIE1ha2UgQVBJIGNhbGxcbiAgICBjb25zdCByZXNwb25zZTogQXV0aGVudGljYXRvci5SZXNwQ3JlYXRlVG9rZW4gPSB5aWVsZCBjYWxsKFthcGksIGFwaS5jcmVhdGVUb2tlbl0sIHJlcXVlc3QpO1xuICAgIHJldHVybiByZXNwb25zZS5yZXN1bHQuYWNjZXNzX3Rva2VuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24qIGF1dGhlbnRpY2F0b3JMb2dpbihhY3Rpb246IEF1dGhlbnRpY2F0b3JMb2dpblJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB0b2tlbiA9IHlpZWxkIGNhbGwodGFwaXNBdXRoLCBhY3Rpb24ucGF5bG9hZCk7XG4gICAgLy8gTm90aWZ5IHRhcGlzLXJlZHV4IHN0b3JlIG9mIHRva2VuXG4gICAgeWllbGQgcHV0KHtcbiAgICAgIHR5cGU6IFRBUElTX0FVVEhfTE9HSU5fU1VDQ0VTUyxcbiAgICAgIHBheWxvYWQ6IHsgdG9rZW4gfVxuICAgIH0pO1xuICAgIC8vIENhbGwgZXh0ZXJuYWwgY2FsbGJhY2sgd2l0aCBhIGNvcHkgb2YgdGhlIHRva2VuXG4gICAgaWYgKGFjdGlvbi5wYXlsb2FkLm9uQXV0aCkge1xuICAgICAgeWllbGQgY2FsbChhY3Rpb24ucGF5bG9hZC5vbkF1dGgsIHsgLi4udG9rZW4gfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIENhdGNoIGFueSBlcnJvcnMgYW5kIHNhdmUgZXhjZXB0aW9uIGluIHRhcGlzLXJlZHV4XG4gICAgeWllbGQgcHV0KHtcbiAgICAgIHR5cGU6IFRBUElTX0FVVEhfTE9HSU5fRkFJTFVSRSxcbiAgICAgIHBheWxvYWQ6IHsgZXJyb3IgfVxuICAgIH0pO1xuICAgIGlmIChhY3Rpb24ucGF5bG9hZC5vbkF1dGgpIHtcbiAgICAgIHlpZWxkIGNhbGwoYWN0aW9uLnBheWxvYWQub25BdXRoLCBlcnJvcik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogd2F0Y2hMb2dpbigpIHtcbiAgeWllbGQgdGFrZUxlYWRpbmcoVEFQSVNfQVVUSF9MT0dJTl9SRVFVRVNULCBhdXRoZW50aWNhdG9yTG9naW4pO1xufVxuIiwiaW1wb3J0IHsgVGFwaXNTdGF0ZSB9IGZyb20gJy4uL3N0b3JlL3Jvb3RSZWR1Y2VyJztcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGdldFRva2VuID0gKHN0YXRlOiBUYXBpc1N0YXRlKTogVG9rZW4gPT4gc3RhdGUuYXV0aGVudGljYXRvci50b2tlbjtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0VG9rZW47XG4iLCJpbXBvcnQgeyBjYWxsLCBwdXQsIHNlbGVjdCwgdGFrZUV2ZXJ5IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcbmltcG9ydCBnZXRUb2tlbiBmcm9tICcuLi9hdXRoZW50aWNhdG9yL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBBcGlTYWdhUmVxdWVzdCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0ICogYXMgQUNUSU9OUyBmcm9tICcuL2FjdGlvblR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uKiBhcGlTYWdhPFQ+KGFjdGlvbjogQXBpU2FnYVJlcXVlc3Q8VD4pIHtcbiAgY29uc3QgeyBjb25maWcsIG9uQXBpLCBvblJlcXVlc3QsIG9uU3VjY2Vzcywgb25GYWlsdXJlLCBtb2R1bGUsIGZ1bmMsIGFyZ3MgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICB0cnkge1xuICAgIC8vIE5vdGlmeSBleHRlcm5hbCByZWR1Y2VyIHRoYXQgYSByZXF1ZXN0IGhhcyBiZWd1blxuICAgIGlmIChvblJlcXVlc3QpIHtcbiAgICAgIHlpZWxkIHB1dChvblJlcXVlc3QoKSk7XG4gICAgfVxuXG4gICAgLy8gR2V0IGFueSBzYXZlZCB0b2tlbiBmcm9tIHRoZSBjdXJyZW50IHN0b3JlXG4gICAgY29uc3Qgc3RvcmVUb2tlbiA9IHlpZWxkIHNlbGVjdChnZXRUb2tlbik7XG5cbiAgICAvLyBTZWFyY2ggZm9yIGEgdG9rZW4gaW4gYSBwcm92aWRlZCB0YXBpcyBjb25maWcsIG9yIGp1c3QgdXNlIHRoZSBzdG9yZSdzIHRva2VuXG4gICAgY29uc3QgdG9rZW4gPSBjb25maWcgPyBjb25maWcuand0IHx8IHN0b3JlVG9rZW4uYWNjZXNzX3Rva2VuIDogc3RvcmVUb2tlbi5hY2Nlc3NfdG9rZW47XG5cbiAgICAvLyBTZWFyY2ggZm9yIGEgdGVuYW50IHVybCBhIHByb3ZpZGVkIHRhcGlzIGNvbmZpZywgb3IganVzdCB1c2UgZW52aXJvbm1lbnQgZGVmYXVsdFxuICAgIGNvbnN0IGRlZmF1bHRVcmwgPSBwcm9jZXNzLmVudi5UQVBJU19URU5BTlRfVVJMO1xuICAgIGNvbnN0IHRlbmFudCA9IGNvbmZpZyA/IGNvbmZpZy50ZW5hbnQgfHwgZGVmYXVsdFVybCA6IGRlZmF1bHRVcmw7XG5cbiAgICAvLyBHZW5lcmF0ZSBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0aGUgbW9kdWxlIHdpdGggdGhlXG4gICAgLy8gQVBJIFVSTCBhbmQgdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyXG4gICAgY29uc3QgY29uZmlndXJhdGlvbiA9IG5ldyAobW9kdWxlLkNvbmZpZ3VyYXRpb24pKHtcbiAgICAgIGJhc2VQYXRoOiB0ZW5hbnQsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiWC1UYXBpcy1Ub2tlblwiOiB0b2tlblxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBBUElcbiAgICBjb25zdCBhcGk6IHR5cGVvZiBhY3Rpb24ucGF5bG9hZC5hcGkgPSBuZXcgKGFjdGlvbi5wYXlsb2FkLmFwaSkoY29uZmlndXJhdGlvbik7XG5cbiAgICAvLyBDYWxsIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24gbmFtZSwgYW5kIGV4cGVjdCB0aGF0IHNwZWNpZmljIHJldHVybiB0eXBlXG4gICAgY29uc3QgcmVzdWx0OiBUID0geWllbGQgY2FsbChbYXBpLCBmdW5jXSwgLi4uYXJncyk7XG5cbiAgICAvLyBOb3RpZnkgdGhlIGV4dGVybmFsIHJlZHVjZXIgdGhhdCB3ZSBoYXZlIHRoZSBkZXNpcmVkIHJlc3VsdFxuICAgIGlmIChvblN1Y2Nlc3MpIHtcbiAgICAgIHlpZWxkIHB1dChvblN1Y2Nlc3MocmVzdWx0KSk7XG4gICAgfVxuICAgIFxuICAgIC8vIElmIHRoZXJlIGlzIGFuIG9uQXBpIGNhbGxiYWNrLCBjYWxsIGl0IG5vdy5cbiAgICBpZiAob25BcGkpIHtcbiAgICAgIHlpZWxkIGNhbGwob25BcGksIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLy8gU2VuZCBnZW5lcmFsIFNVQ0NFU1MgZXZlbnRcbiAgICB5aWVsZCBwdXQoeyB0eXBlOiBBQ1RJT05TLlRBUElTX1JFRFVYX0FQSV9TVUNDRVNTIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIElmIGVycm9yIGhhcyBhIGpzb24gYm9keSwgcmVwbGFjZSB0aGUgZXJyb3Igd2l0aCB0aGUganNvbiBib2R5XG4gICAgaWYgKGVycm9yLmpzb24pIHtcbiAgICAgIGVycm9yID0geWllbGQgZXJyb3IuanNvbigpO1xuICAgIH1cbiAgICAvLyBOb3RpZnkgdGhlIGV4dGVybmFsIHJlZHVjZXIgdGhhdCB0aGVyZSBpcyBhbiBlcnJvclxuICAgIGlmIChvbkZhaWx1cmUpIHtcbiAgICAgIHlpZWxkIHB1dChvbkZhaWx1cmUoZXJyb3IpKTtcbiAgICB9ICAgIFxuXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gb25BcGkgY2FsbGJhY2ssIGNhbGwgaXQgd2l0aCB0aGUgZXJyb3JcbiAgICBpZiAob25BcGkpIHtcbiAgICAgIHlpZWxkIGNhbGwob25BcGksIGVycm9yKTtcbiAgICB9XG5cbiAgICAvLyBTZW5kIGdlbmVyYWwgRkFJTFVSRSBldmVudFxuICAgIHlpZWxkIHB1dCh7IHR5cGU6IEFDVElPTlMuVEFQSVNfUkVEVVhfQVBJX0ZBSUxVUkUgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiB3YXRjaEFwaVNhZ2EoKSB7XG4gIHlpZWxkIHRha2VFdmVyeShBQ1RJT05TLlRBUElTX1JFRFVYX0FQSV9SRVFVRVNULCBhcGlTYWdhKTtcbn1cbiIsImV4cG9ydCBjb25zdCBUQVBJU19SRURVWF9BUElfUkVRVUVTVCA9IFwiVEFQSVNfUkVEVVhfQVBJX1JFUVVFU1RcIjtcbmV4cG9ydCBjb25zdCBUQVBJU19SRURVWF9BUElfU1VDQ0VTUyA9IFwiVEFQSVNfUkVEVVhfQVBJX1NVQ0NFU1NcIjtcbmV4cG9ydCBjb25zdCBUQVBJU19SRURVWF9BUElfRkFJTFVSRSA9IFwiVEFQSVNfUkVEVVhfQVBJX0ZBSUxVUkVcIjsiLCJpbXBvcnQgeyBhbGwgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuaW1wb3J0IHsgd2F0Y2hMb2dpbiB9IGZyb20gJy4uL2F1dGhlbnRpY2F0b3Ivc2FnYXMnO1xuaW1wb3J0IHsgd2F0Y2hBcGlTYWdhIH0gZnJvbSAnLi9zYWdhcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiByb290U2FnYSgpIHtcbiAgeWllbGQgYWxsKFt3YXRjaEFwaVNhZ2EoKSwgd2F0Y2hMb2dpbigpXSk7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAncmVkdXgtbG9nZ2VyJztcbmltcG9ydCBjcmVhdGVTYWdhTWlkZGxld2FyZSBmcm9tICdyZWR1eC1zYWdhJztcbmltcG9ydCByb290UmVkdWNlciBmcm9tICcuL3Jvb3RSZWR1Y2VyJzsgXG5pbXBvcnQgcm9vdFNhZ2EgZnJvbSAnLi4vc2FnYXMnO1xuXG5jb25zdCBzYWdhTWlkZGxld2FyZSA9IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlKCk7XG5cbmNvbnN0IG1pZGRsZXdhcmVzID0gW107XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBtaWRkbGV3YXJlcy5wdXNoKGNyZWF0ZUxvZ2dlcigpKTtcbn1cblxubWlkZGxld2FyZXMucHVzaChzYWdhTWlkZGxld2FyZSk7XG5cbmNvbnN0IGNvbmZpZ3VyZVN0b3JlID0gKCkgPT4ge1xuICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBhcHBseU1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpKTtcbiAgc2FnYU1pZGRsZXdhcmUucnVuKHJvb3RTYWdhKTtcbiAgcmV0dXJuIHN0b3JlO1xufSBcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlndXJlU3RvcmU7IiwiaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBhdXRoZW50aWNhdG9yTG9naW5SZXF1ZXN0IH0gZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB7IFRhcGlzU3RhdGUgfSBmcm9tICcuLi9zdG9yZS9yb290UmVkdWNlcic7XG5pbXBvcnQgeyBMb2dpbkNhbGxiYWNrIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi90eXBlcy9jb25maWcnO1xuXG5jb25zdCB1c2VBdXRoZW50aWNhdG9yID0gKGNvbmZpZzogQ29uZmlnKSA9PiB7XG4gIGNvbnN0IHsgdG9rZW4sIGxvYWRpbmcsIGVycm9yIH0gPSB1c2VTZWxlY3Rvcigoc3RhdGU6IFRhcGlzU3RhdGUpID0+IHN0YXRlLmF1dGhlbnRpY2F0b3IpO1xuICByZXR1cm4ge1xuICAgIHRva2VuLFxuICAgIGxvYWRpbmcsXG4gICAgZXJyb3IsXG4gICAgbG9naW46ICh1c2VybmFtZSwgcGFzc3dvcmQsIG9uQXV0aDogTG9naW5DYWxsYmFjayA9IG51bGwpID0+XG4gICAgICBhdXRoZW50aWNhdG9yTG9naW5SZXF1ZXN0KHtcbiAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIG9uQXV0aFxuICAgICAgfSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUF1dGhlbnRpY2F0b3I7XG4iLCJpbXBvcnQge1xuICBUQVBJU19BVVRIX0xPR0lOX0ZBSUxVUkUsXG4gIFRBUElTX0FVVEhfTE9HSU5fU1VDQ0VTUyxcbiAgVEFQSVNfQVVUSF9MT0dJTl9SRVFVRVNUXG59IGZyb20gXCIuL2FjdGlvblR5cGVzXCI7XG5pbXBvcnQge1xuICBBdXRoZW50aWNhdG9yTG9naW5GYWlsdXJlLFxuICBBdXRoZW50aWNhdG9yTG9naW5GYWlsdXJlUGF5bG9hZCxcbiAgQXV0aGVudGljYXRvckxvZ2luUmVxdWVzdCxcbiAgQXV0aGVudGljYXRvckxvZ2luU3VjY2VzcyxcbiAgQXV0aGVudGljYXRvckxvZ2luU3VjY2Vzc1BheWxvYWQsXG4gIExvZ2luUmVxdWVzdFxufSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgYXV0aGVudGljYXRvckxvZ2luUmVxdWVzdCA9IChcbiAgcmVxdWVzdDogTG9naW5SZXF1ZXN0XG4pOiBBdXRoZW50aWNhdG9yTG9naW5SZXF1ZXN0ID0+ICh7XG4gIHR5cGU6IFRBUElTX0FVVEhfTE9HSU5fUkVRVUVTVCxcbiAgcGF5bG9hZDogcmVxdWVzdFxufSk7XG5cbmV4cG9ydCBjb25zdCBhdXRoZW50aWNhdG9yTG9naW5TdWNjZXNzID0gKFxuICBwYXlsb2FkOiBBdXRoZW50aWNhdG9yTG9naW5TdWNjZXNzUGF5bG9hZFxuKTogQXV0aGVudGljYXRvckxvZ2luU3VjY2VzcyA9PiAoe1xuICB0eXBlOiBUQVBJU19BVVRIX0xPR0lOX1NVQ0NFU1MsXG4gIHBheWxvYWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IGF1dGhlbnRpY2F0b3JMb2dpbkZhaWx1cmUgPSAoXG4gIHBheWxvYWQ6IEF1dGhlbnRpY2F0b3JMb2dpbkZhaWx1cmVQYXlsb2FkXG4pOiBBdXRoZW50aWNhdG9yTG9naW5GYWlsdXJlID0+ICh7XG4gIHR5cGU6IFRBUElTX0FVVEhfTE9HSU5fRkFJTFVSRSxcbiAgcGF5bG9hZCxcbn0pOyIsImltcG9ydCB7IEFwaVNhZ2FQYXlsb2FkLCBBcGlTYWdhUmVxdWVzdCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgVEFQSVNfUkVEVVhfQVBJX1JFUVVFU1QgfSBmcm9tICcuL2FjdGlvblR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwaUNhbGw8VD4oZGlzcGF0Y2g6IEFwaVNhZ2FQYXlsb2FkPFQ+KTogQXBpU2FnYVJlcXVlc3Q8VD4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFRBUElTX1JFRFVYX0FQSV9SRVFVRVNULFxuICAgIHBheWxvYWQ6IGRpc3BhdGNoXG4gIH1cbn0gIiwiaW1wb3J0IHsgYXBpQ2FsbCB9IGZyb20gJy4uL3NhZ2FzL2FjdGlvbnMnO1xuaW1wb3J0ICogYXMgQUNUSU9OUyBmcm9tICcuL2FjdGlvblR5cGVzJztcbmltcG9ydCB7IFN5c3RlbXMgfSBmcm9tICdAdGFwaXMvdGFwaXMtdHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBTeXN0ZW1zTGlzdENhbGxiYWNrIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBPblJlcXVlc3RDYWxsYmFjayxcbiAgT25TdWNjZXNzQ2FsbGJhY2ssXG4gIE9uRmFpbHVyZUNhbGxiYWNrXG59IGZyb20gJ3RhcGlzLXJlZHV4L3NhZ2FzL3R5cGVzJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJ3RhcGlzLXJlZHV4L3R5cGVzJztcblxuLy8gQ3JlYXRlIGEgJ2xpc3QnIGRpc3BhdGNoIGdlbmVyYXRvclxuZXhwb3J0IGNvbnN0IGxpc3QgPSAoY29uZmlnOiBDb25maWcgPSBudWxsLCBvbkxpc3Q6IFN5c3RlbXNMaXN0Q2FsbGJhY2sgPSBudWxsLCBwYXJhbXM6IFN5c3RlbXMuR2V0U3lzdGVtc1JlcXVlc3QgPSB7fSkgPT4ge1xuICBjb25zdCBvblJlcXVlc3Q6IE9uUmVxdWVzdENhbGxiYWNrID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBBQ1RJT05TLlRBUElTX1NZU1RFTVNfTElTVF9SRVFVRVNULFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG9uU3VjY2VzczogT25TdWNjZXNzQ2FsbGJhY2s8U3lzdGVtcy5SZXNwU3lzdGVtcz4gPSAocmVzdWx0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEFDVElPTlMuVEFQSVNfU1lTVEVNU19MSVNUX1NVQ0NFU1MsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgaW5jb21pbmc6IHJlc3VsdC5yZXN1bHRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBvbkZhaWx1cmU6IE9uRmFpbHVyZUNhbGxiYWNrID0gKGVycm9yKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEFDVElPTlMuVEFQSVNfU1lTVEVNU19MSVNUX0ZBSUxVUkUsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIGVycm9yLFxuICAgICAgICBwYXJhbXNcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXBpQ2FsbDxTeXN0ZW1zLlJlc3BTeXN0ZW1zPih7XG4gICAgY29uZmlnLFxuICAgIG9uQXBpOiBvbkxpc3QsXG4gICAgb25SZXF1ZXN0LFxuICAgIG9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmUsXG4gICAgbW9kdWxlOiBTeXN0ZW1zLFxuICAgIGFwaTogU3lzdGVtcy5TeXN0ZW1zQXBpLFxuICAgIGZ1bmM6IFN5c3RlbXMuU3lzdGVtc0FwaS5wcm90b3R5cGUuZ2V0U3lzdGVtcyxcbiAgICBhcmdzOiBbcGFyYW1zXVxuICB9KTtcbn07XG4iLCJpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGxpc3QgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgVGFwaXNTdGF0ZSB9IGZyb20gJy4uL3N0b3JlL3Jvb3RSZWR1Y2VyJztcbmltcG9ydCB7IFN5c3RlbXNMaXN0Q2FsbGJhY2sgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFN5c3RlbXMgfSBmcm9tICdAdGFwaXMvdGFwaXMtdHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICd0YXBpcy1yZWR1eC90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3lzdGVtc0xpc3RQYXJhbXMge1xuICBvbkxpc3Q/OiBTeXN0ZW1zTGlzdENhbGxiYWNrLFxuICByZXF1ZXN0PzogU3lzdGVtcy5HZXRTeXN0ZW1zUmVxdWVzdFxufVxuXG5jb25zdCB1c2VTeXN0ZW1zID0gKGNvbmZpZzogQ29uZmlnID0gbnVsbCkgPT4ge1xuICBjb25zdCB7IHN5c3RlbXMgfSA9IHVzZVNlbGVjdG9yKChzdGF0ZTogVGFwaXNTdGF0ZSkgPT4gc3RhdGUuc3lzdGVtcyk7XG4gIHJldHVybiB7XG4gICAgc3lzdGVtcyxcbiAgICBsaXN0OiAocGFyYW1zOiBTeXN0ZW1zTGlzdFBhcmFtcykgPT4gbGlzdChjb25maWcsIHBhcmFtcy5vbkxpc3QsIHBhcmFtcy5yZXF1ZXN0IHx8IHt9KSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVN5c3RlbXM7XG4iLCJpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGxpc3QgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgVGFwaXNTdGF0ZSB9IGZyb20gJy4uL3N0b3JlL3Jvb3RSZWR1Y2VyJztcbmltcG9ydCB7IEZpbGVMaXN0aW5nQ2FsbGJhY2sgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEZpbGVzIH0gZnJvbSAnQHRhcGlzL3RhcGlzLXR5cGVzY3JpcHQnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMnO1xuZXhwb3J0IGludGVyZmFjZSBMaXN0RmlsZXNBZGRpdGlvbmFsUGFyYW1ldGVycyB7XG4gIG9uTGlzdD86IEZpbGVMaXN0aW5nQ2FsbGJhY2ssXG4gIHJlcXVlc3Q6IEZpbGVzLkxpc3RGaWxlc1JlcXVlc3Rcbn1cblxuY29uc3QgdXNlRmlsZXMgPSAoY29uZmlnOiBDb25maWcgPSBudWxsKSA9PiB7XG4gIGNvbnN0IHsgbGlzdGluZ3MgfSA9IHVzZVNlbGVjdG9yKChzdGF0ZTogVGFwaXNTdGF0ZSkgPT4gc3RhdGUuZmlsZXMpO1xuICByZXR1cm4ge1xuICAgIGxpc3RpbmdzLFxuICAgIGxpc3Q6IChwYXJhbXM6IExpc3RGaWxlc0FkZGl0aW9uYWxQYXJhbWV0ZXJzKSA9PiBsaXN0KFxuICAgICAgY29uZmlnLCBwYXJhbXMub25MaXN0LCBwYXJhbXMucmVxdWVzdFxuICAgICksXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VGaWxlcztcbiIsImltcG9ydCB7IGFwaUNhbGwgfSBmcm9tICcuLi9zYWdhcy9hY3Rpb25zJztcbmltcG9ydCAqIGFzIEFDVElPTlMgZnJvbSAnLi9hY3Rpb25UeXBlcyc7XG5pbXBvcnQgeyBGaWxlcyB9IGZyb20gJ0B0YXBpcy90YXBpcy10eXBlc2NyaXB0JztcbmltcG9ydCB7XG4gIEZpbGVMaXN0aW5nQ2FsbGJhY2tcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICd0YXBpcy1yZWR1eC90eXBlcyc7XG5pbXBvcnQgeyBUQVBJU19ERUZBVUxUX0ZJTEVTX0xJU1RJTkdfTElNSVQgfSBmcm9tICd0YXBpcy1yZWR1eC9jb25zdGFudHMvdGFwaXMnO1xuaW1wb3J0IHtcbiAgT25SZXF1ZXN0Q2FsbGJhY2ssXG4gIE9uU3VjY2Vzc0NhbGxiYWNrLFxuICBPbkZhaWx1cmVDYWxsYmFja1xufSBmcm9tICd0YXBpcy1yZWR1eC9zYWdhcy90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBsaXN0ID0gKGNvbmZpZzogQ29uZmlnID0gbnVsbCwgb25MaXN0OiBGaWxlTGlzdGluZ0NhbGxiYWNrID0gbnVsbCwgcmVxdWVzdDogRmlsZXMuTGlzdEZpbGVzUmVxdWVzdCkgPT4ge1xuXG4gIGNvbnN0IHsgc3lzdGVtSWQsIHBhdGgsIG9mZnNldCwgbGltaXQgfSA9IHJlcXVlc3Q7XG5cbiAgY29uc3Qgb25SZXF1ZXN0OiBPblJlcXVlc3RDYWxsYmFjayA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQUNUSU9OUy5UQVBJU19GSUxFU19MSVNUX1JFUVVFU1QsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHN5c3RlbUlkLFxuICAgICAgICBwYXRoLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIGxpbWl0XG4gICAgICB9ICBcbiAgICB9XG4gIH1cblxuICBjb25zdCBvblN1Y2Nlc3M6IE9uU3VjY2Vzc0NhbGxiYWNrPEZpbGVzLkZpbGVMaXN0aW5nUmVzcG9uc2U+ID0gKHJlc3VsdCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBBQ1RJT05TLlRBUElTX0ZJTEVTX0xJU1RfU1VDQ0VTUyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgc3lzdGVtSWQsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIGluY29taW5nOiByZXN1bHQucmVzdWx0LFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIGxpbWl0XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25GYWlsdXJlOiBPbkZhaWx1cmVDYWxsYmFjayA9IChlcnJvcikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBBQ1RJT05TLlRBUElTX0ZJTEVTX0xJU1RfRkFJTFVSRSxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgc3lzdGVtSWQsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIGVycm9yXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFwaUNhbGw8RmlsZXMuRmlsZUxpc3RpbmdSZXNwb25zZT4oe1xuICAgIGNvbmZpZyxcbiAgICBvbkFwaTogb25MaXN0LFxuICAgIG9uUmVxdWVzdCxcbiAgICBvblN1Y2Nlc3MsXG4gICAgb25GYWlsdXJlLFxuICAgIG1vZHVsZTogRmlsZXMsXG4gICAgYXBpOiBGaWxlcy5GaWxlT3BlcmF0aW9uc0FwaSxcbiAgICBmdW5jOiBGaWxlcy5GaWxlT3BlcmF0aW9uc0FwaS5wcm90b3R5cGUubGlzdEZpbGVzLFxuICAgIGFyZ3M6IFtyZXF1ZXN0XVxuICB9KTtcbn07XG4iLCJpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGxpc3QgfSBmcm9tICcuL2xpc3QvYWN0aW9ucyc7XG5pbXBvcnQgeyBUYXBpc1N0YXRlIH0gZnJvbSAnLi4vc3RvcmUvcm9vdFJlZHVjZXInO1xuaW1wb3J0IHsgQXBwc0xpc3RDYWxsYmFjayB9IGZyb20gJy4vbGlzdC90eXBlcyc7XG5pbXBvcnQgeyBBcHBzIH0gZnJvbSAnQHRhcGlzL3RhcGlzLXR5cGVzY3JpcHQnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMnO1xuZXhwb3J0IGludGVyZmFjZSBMaXN0QXBwc1BhcmFtcyB7XG4gIG9uTGlzdD86IEFwcHNMaXN0Q2FsbGJhY2ssXG4gIHJlcXVlc3Q/OiBBcHBzLkdldEFwcHNSZXF1ZXN0XG59XG5cbmNvbnN0IHVzZVN5c3RlbXMgPSAoY29uZmlnOiBDb25maWcgPSBudWxsKSA9PiB7XG4gIGNvbnN0IHsgYXBwcyB9ID0gdXNlU2VsZWN0b3IoKHN0YXRlOiBUYXBpc1N0YXRlKSA9PiBzdGF0ZS5hcHBzKTtcbiAgcmV0dXJuIHtcbiAgICBhcHBzLFxuICAgIGxpc3Q6IChwYXJhbXM6IExpc3RBcHBzUGFyYW1zKSA9PiBsaXN0KGNvbmZpZywgcGFyYW1zLm9uTGlzdCwgcGFyYW1zLnJlcXVlc3QgfHwge30pLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlU3lzdGVtcztcbiIsImltcG9ydCB7IGFwaUNhbGwgfSBmcm9tICcuLi8uLi9zYWdhcy9hY3Rpb25zJztcbmltcG9ydCAqIGFzIEFDVElPTlMgZnJvbSAnLi9hY3Rpb25UeXBlcyc7XG5pbXBvcnQgeyBBcHBzIH0gZnJvbSAnQHRhcGlzL3RhcGlzLXR5cGVzY3JpcHQnO1xuaW1wb3J0IHsgQXBwc0xpc3RDYWxsYmFjayB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgT25SZXF1ZXN0Q2FsbGJhY2ssXG4gIE9uU3VjY2Vzc0NhbGxiYWNrLFxuICBPbkZhaWx1cmVDYWxsYmFja1xufSBmcm9tICd0YXBpcy1yZWR1eC9zYWdhcy90eXBlcyc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICd0YXBpcy1yZWR1eC90eXBlcyc7XG5cblxuLy8gQ3JlYXRlIGEgJ2xpc3QnIGRpc3BhdGNoIGdlbmVyYXRvclxuZXhwb3J0IGNvbnN0IGxpc3QgPSAoY29uZmlnOiBDb25maWcgPSBudWxsLCBvbkxpc3Q6IEFwcHNMaXN0Q2FsbGJhY2sgPSBudWxsLCBwYXJhbXM6IEFwcHMuR2V0QXBwc1JlcXVlc3QgPSB7fSkgPT4ge1xuICBjb25zdCBvblJlcXVlc3Q6IE9uUmVxdWVzdENhbGxiYWNrID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBBQ1RJT05TLlRBUElTX0FQUFNfTElTVF9SRVFVRVNULFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG9uU3VjY2VzczogT25TdWNjZXNzQ2FsbGJhY2s8QXBwcy5SZXNwQXBwcz4gPSAocmVzdWx0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEFDVElPTlMuVEFQSVNfQVBQU19MSVNUX1NVQ0NFU1MsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgaW5jb21pbmc6IHJlc3VsdC5yZXN1bHRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBvbkZhaWx1cmU6IE9uRmFpbHVyZUNhbGxiYWNrID0gKGVycm9yKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEFDVElPTlMuVEFQSVNfQVBQU19MSVNUX0ZBSUxVUkUsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIGVycm9yLFxuICAgICAgICBwYXJhbXNcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXBpQ2FsbDxBcHBzLlJlc3BBcHBzPih7XG4gICAgY29uZmlnLFxuICAgIG9uQXBpOiBvbkxpc3QsXG4gICAgb25SZXF1ZXN0LFxuICAgIG9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmUsXG4gICAgbW9kdWxlOiBBcHBzLFxuICAgIGFwaTogQXBwcy5BcHBsaWNhdGlvbnNBcGksXG4gICAgZnVuYzogQXBwcy5BcHBsaWNhdGlvbnNBcGkucHJvdG90eXBlLmdldEFwcHMsXG4gICAgYXJnczogW3BhcmFtc11cbiAgfSk7XG59O1xuIiwiaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBsaXN0IH0gZnJvbSAnLi9saXN0L2FjdGlvbnMnO1xuaW1wb3J0IHsgcmVzZXRTdWJtaXQsIHN1Ym1pdCB9IGZyb20gJy4vc3VibWl0L2FjdGlvbnMnO1xuaW1wb3J0IHsgVGFwaXNTdGF0ZSB9IGZyb20gJy4uL3N0b3JlL3Jvb3RSZWR1Y2VyJztcbmltcG9ydCB7IEpvYnNMaXN0Q2FsbGJhY2sgfSBmcm9tICcuL2xpc3QvdHlwZXMnO1xuaW1wb3J0IHsgSm9ic1N1Ym1pdENhbGxiYWNrIH0gZnJvbSAnLi9zdWJtaXQvdHlwZXMnO1xuaW1wb3J0IHsgSm9icyB9IGZyb20gJ0B0YXBpcy90YXBpcy10eXBlc2NyaXB0JztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJ3RhcGlzLXJlZHV4L3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBMaXN0Sm9ic1BhcmFtcyB7XG4gIG9uTGlzdD86IEpvYnNMaXN0Q2FsbGJhY2tcbiAgcmVxdWVzdD86IEpvYnMuR2V0Sm9iTGlzdFJlcXVlc3Rcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdWJtaXRKb2JzUGFyYW1zIHtcbiAgb25TdWJtaXQ/OiBKb2JzU3VibWl0Q2FsbGJhY2tcbiAgcmVxdWVzdDogSm9icy5SZXFTdWJtaXRKb2Jcbn1cblxuY29uc3QgdXNlU3lzdGVtcyA9IChjb25maWc6IENvbmZpZyA9IG51bGwpID0+IHtcbiAgY29uc3QgeyBqb2JzLCBzdWJtaXNzaW9uIH0gPSB1c2VTZWxlY3Rvcigoc3RhdGU6IFRhcGlzU3RhdGUpID0+IHN0YXRlLmpvYnMpO1xuICByZXR1cm4ge1xuICAgIGpvYnMsXG4gICAgc3VibWlzc2lvbixcbiAgICBsaXN0OiAocGFyYW1zOiBMaXN0Sm9ic1BhcmFtcykgPT4gbGlzdChjb25maWcsIHBhcmFtcy5vbkxpc3QsIHBhcmFtcy5yZXF1ZXN0KSxcbiAgICBzdWJtaXQ6IChwYXJhbXM6IFN1Ym1pdEpvYnNQYXJhbXMpID0+IHN1Ym1pdChjb25maWcsIHBhcmFtcy5vblN1Ym1pdCwgcGFyYW1zLnJlcXVlc3QpLFxuICAgIHJlc2V0U3VibWl0OiAoKSA9PiByZXNldFN1Ym1pdCgpXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VTeXN0ZW1zO1xuIiwiaW1wb3J0IHsgYXBpQ2FsbCB9IGZyb20gJy4uLy4uL3NhZ2FzL2FjdGlvbnMnO1xuaW1wb3J0ICogYXMgQUNUSU9OUyBmcm9tICcuL2FjdGlvblR5cGVzJztcbmltcG9ydCB7IEpvYnMgfSBmcm9tICdAdGFwaXMvdGFwaXMtdHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBKb2JzTGlzdENhbGxiYWNrIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBPblJlcXVlc3RDYWxsYmFjayxcbiAgT25TdWNjZXNzQ2FsbGJhY2ssXG4gIE9uRmFpbHVyZUNhbGxiYWNrXG59IGZyb20gJ3RhcGlzLXJlZHV4L3NhZ2FzL3R5cGVzJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJ3RhcGlzLXJlZHV4L3R5cGVzJztcblxuXG4vLyBDcmVhdGUgYSAnbGlzdCcgZGlzcGF0Y2ggZ2VuZXJhdG9yXG5leHBvcnQgY29uc3QgbGlzdCA9IChjb25maWc6IENvbmZpZyA9IG51bGwsIG9uTGlzdDogSm9ic0xpc3RDYWxsYmFjayA9IG51bGwsIHBhcmFtczogSm9icy5HZXRKb2JMaXN0UmVxdWVzdCA9IHt9KSA9PiB7XG4gIGNvbnN0IG9uUmVxdWVzdDogT25SZXF1ZXN0Q2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEFDVElPTlMuVEFQSVNfSk9CU19MSVNUX1JFUVVFU1QsXG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25TdWNjZXNzOiBPblN1Y2Nlc3NDYWxsYmFjazxKb2JzLlJlc3BHZXRKb2JMaXN0PiA9IChyZXN1bHQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQUNUSU9OUy5UQVBJU19KT0JTX0xJU1RfU1VDQ0VTUyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBpbmNvbWluZzogcmVzdWx0LnJlc3VsdFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG9uRmFpbHVyZTogT25GYWlsdXJlQ2FsbGJhY2sgPSAoZXJyb3IpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQUNUSU9OUy5UQVBJU19KT0JTX0xJU1RfRkFJTFVSRSxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIHBhcmFtc1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcGlDYWxsPEpvYnMuUmVzcEdldEpvYkxpc3Q+KHtcbiAgICBjb25maWcsXG4gICAgb25BcGk6IG9uTGlzdCxcbiAgICBvblJlcXVlc3QsXG4gICAgb25TdWNjZXNzLFxuICAgIG9uRmFpbHVyZSxcbiAgICBtb2R1bGU6IEpvYnMsXG4gICAgYXBpOiBKb2JzLkpvYnNBcGksXG4gICAgZnVuYzogSm9icy5Kb2JzQXBpLnByb3RvdHlwZS5nZXRKb2JMaXN0LFxuICAgIGFyZ3M6IFtwYXJhbXNdXG4gIH0pO1xufTtcbiIsImltcG9ydCB7IGFwaUNhbGwgfSBmcm9tICcuLi8uLi9zYWdhcy9hY3Rpb25zJztcbmltcG9ydCAqIGFzIEFDVElPTlMgZnJvbSAnLi9hY3Rpb25UeXBlcyc7XG5pbXBvcnQgeyBKb2JzIH0gZnJvbSAnQHRhcGlzL3RhcGlzLXR5cGVzY3JpcHQnO1xuaW1wb3J0IHsgSm9ic1N1Ym1pdENhbGxiYWNrLCBKb2JzU3VibWl0UmVzZXQgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIE9uUmVxdWVzdENhbGxiYWNrLFxuICBPblN1Y2Nlc3NDYWxsYmFjayxcbiAgT25GYWlsdXJlQ2FsbGJhY2tcbn0gZnJvbSAndGFwaXMtcmVkdXgvc2FnYXMvdHlwZXMnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMnO1xuXG5cbmV4cG9ydCBjb25zdCByZXNldFN1Ym1pdCA9ICgpOiBKb2JzU3VibWl0UmVzZXQgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEFDVElPTlMuVEFQSVNfSk9CU19TVUJNSVRfUkVTRVQsXG4gICAgcGF5bG9hZDoge31cbiAgfVxufVxuXG4vLyBDcmVhdGUgYSAnbGlzdCcgZGlzcGF0Y2ggZ2VuZXJhdG9yXG5leHBvcnQgY29uc3Qgc3VibWl0ID0gKGNvbmZpZzogQ29uZmlnID0gbnVsbCwgb25TdWJtaXQ6IEpvYnNTdWJtaXRDYWxsYmFjayA9IG51bGwsIHBhcmFtczogSm9icy5SZXFTdWJtaXRKb2IpID0+IHtcbiAgY29uc3QgcmVxdWVzdDogSm9icy5TdWJtaXRKb2JSZXF1ZXN0ID0ge1xuICAgIHJlcVN1Ym1pdEpvYjogcGFyYW1zXG4gIH1cblxuICBjb25zdCBvblJlcXVlc3Q6IE9uUmVxdWVzdENhbGxiYWNrID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBBQ1RJT05TLlRBUElTX0pPQlNfU1VCTUlUX1JFUVVFU1QsXG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25TdWNjZXNzOiBPblN1Y2Nlc3NDYWxsYmFjazxKb2JzLlJlc3BTdWJtaXRKb2I+ID0gKHJlc3VsdCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBBQ1RJT05TLlRBUElTX0pPQlNfU1VCTUlUX1NVQ0NFU1MsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgcmVzdWx0OiByZXN1bHQucmVzdWx0XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25GYWlsdXJlOiBPbkZhaWx1cmVDYWxsYmFjayA9IChlcnJvcikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBBQ1RJT05TLlRBUElTX0pPQlNfU1VCTUlUX0ZBSUxVUkUsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIGVycm9yLFxuICAgICAgICBwYXJhbXNcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXBpQ2FsbDxKb2JzLlJlc3BTdWJtaXRKb2I+KHtcbiAgICBjb25maWcsXG4gICAgb25BcGk6IG9uU3VibWl0LFxuICAgIG9uUmVxdWVzdCxcbiAgICBvblN1Y2Nlc3MsXG4gICAgb25GYWlsdXJlLFxuICAgIG1vZHVsZTogSm9icyxcbiAgICBhcGk6IEpvYnMuSm9ic0FwaSxcbiAgICBmdW5jOiBKb2JzLkpvYnNBcGkucHJvdG90eXBlLnN1Ym1pdEpvYixcbiAgICBhcmdzOiBbcmVxdWVzdF1cbiAgfSk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgJy4vTG9hZGluZ1NwaW5uZXIuc2Nzcyc7XG5cbmNvbnN0IExvYWRpbmdTcGlubmVyID0gKHsgcGxhY2VtZW50LCBjbGFzc05hbWUgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgbG9hZGluZy1pY29uICR7Y2xhc3NOYW1lfWB9IGRhdGEtdGVzdGlkPVwibG9hZGluZy1zcGlubmVyXCI+XG4gICAgICA8U3Bpbm5lciBjbGFzc05hbWU9e3BsYWNlbWVudH0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5Mb2FkaW5nU3Bpbm5lci5wcm9wVHlwZXMgPSB7XG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbkxvYWRpbmdTcGlubmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgcGxhY2VtZW50OiAnc2VjdGlvbicsXG4gIGNsYXNzTmFtZTogJycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2FkaW5nU3Bpbm5lcjtcbiIsImltcG9ydCBMb2FkaW5nU3Bpbm5lciBmcm9tICcuL0xvYWRpbmdTcGlubmVyJztcblxuZXhwb3J0IGRlZmF1bHQgTG9hZGluZ1NwaW5uZXI7XG4iLCIvKipcbiAqIFN0YW5kYXJkIHdlbGNvbWUgbWVzc2FnZSB0ZXh0c1xuICpcbiAqIE5vdGVzOlxuICogLSBFYWNoIG9mIHRoZXNlIGlzIGV4cGVjdGVkLW5vdC1yZXF1aXJlZCB0byBtYXRjaCBhIHJvdXRlIGZyb20gYC4vcm91dGVzLmpzYC5cbiAqIC0gVG8gY3VzdG9taXplIG1lc3NhZ2UgdGV4dCAoZXhhbXBsZTogZHluYW1pYyBjb250ZW50KSB1c2UgYDxTZWN0aW9uPmAgcHJvcHMuXG4gKi9cbmV4cG9ydCBjb25zdCBEQVNIQk9BUkQgPVxuICAnVGhpcyBwYWdlIGFsbG93cyB5b3UgdG8gbW9uaXRvciB5b3VyIGpvYiBzdGF0dXMsIGdldCBoZWxwIHdpdGggdGlja2V0cywgYW5kIHZpZXcgdGhlIHN0YXR1cyBvZiB0aGUgSGlnaCBQZXJmb3JtYW5jZSBDb21wdXRpbmcgKEhQQykgc3lzdGVtcy4nO1xuZXhwb3J0IGNvbnN0IERBVEEgPSAnVGhpcyBwYWdlIGFsbG93cyB5b3UgdG8gdXBsb2FkIGFuZCBtYW5hZ2UgeW91ciBmaWxlcy4nO1xuZXhwb3J0IGNvbnN0IEFMTE9DQVRJT05TID1cbiAgJ1RoaXMgcGFnZSBhbGxvd3MgeW91IHRvIG1vbml0b3IgdGhlIHN0YXR1cyBvZiBhbGxvY2F0aW9ucyBvbiB0aGUgSFBDIHN5c3RlbXMgYW5kIHZpZXcgYSBicmVha2Rvd24gb2YgdGVhbSB1c2FnZS4nO1xuZXhwb3J0IGNvbnN0IEFQUExJQ0FUSU9OUyA9XG4gICdUaGlzIHBhZ2UgYWxsb3dzIHlvdSB0byBzdWJtaXQgam9icyB0byB0aGUgSFBDIHN5c3RlbXMgb3IgYWNjZXNzIENsb3VkIHNlcnZpY2VzIHVzaW5nIGEgdmFyaWV0eSBvZiBhcHBsaWNhdGlvbnMuJztcbmV4cG9ydCBjb25zdCBISVNUT1JZID1cbiAgJ1RoaXMgcGFnZSBhbGxvd3MgeW91IHRvIG1vbml0b3IgYSBsb2cgb2YgYWxsIHByZXZpb3VzIGpvYiBzdWJtaXNzaW9ucy4nO1xuZXhwb3J0IGNvbnN0IEFDQ09VTlQgPVxuICAnVGhpcyBwYWdlIGFsbG93cyB5b3UgdG8gbWFuYWdlIHlvdXIgYWNjb3VudCBwcm9maWxlLCBjaGFuZ2UgeW91ciBwYXNzd29yZCBhbmQgdmlldyBzb2Z0d2FyZSBsaWNlbnNlcy4nO1xuZXhwb3J0IGNvbnN0IFRJQ0tFVFMgPVxuICAnVGhpcyBwYWdlIGFsbG93cyB5b3UgdG8gc3VibWl0IGEgaGVscCByZXF1ZXN0IHZpYSBhbiBSVCBUaWNrZXQuJztcbmV4cG9ydCBjb25zdCBVSSA9XG4gICdUaGlzIGhpZGRlbiBwYWdlIGFsbG93cyBkZXZlbG9wZXJzIHRvIHJldmlldyBVSSBjb21wb25lbnRzIGluIGlzb2xhdGlvbi4nO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7XG4gIFdlbGNvbWVNZXNzYWdlLFxuICBzaG91bGRTaG93TWVzc2FnZSBhcyBzaG91bGRTaG93V2VsY29tZU1lc3NhZ2UsXG59IGZyb20gJy4uJztcbmltcG9ydCAqIGFzIE1FU1NBR0VTIGZyb20gJy4uLy4uL19jb25zdGFudHMvd2VsY29tZU1lc3NhZ2VzJztcblxuaW1wb3J0ICcuL1NlY3Rpb25NZXNzYWdlcy5tb2R1bGUuY3NzJztcbmltcG9ydCAnLi9TZWN0aW9uTWVzc2FnZXMuY3NzJztcblxuLyoqXG4gKiBBIGxpc3QgZm9yIHNlY3Rpb24gbWVzc2FnZXMgdGhhdCBzdXBwb3J0czpcbiAqXG4gKiAtIG1hbnVhbCBtZXNzYWdlc1xuICogLSBtYW51YWwgd2VsY29tZSBtZXNzYWdlXG4gKiAtIGF1dG9tYXRpYyB3ZWxjb21lIG1lc3NhZ2VcbiAqIC0gYXV0b21hdGljIHdlbGNvbWUgbWVzc2FnZSB3aXRoIGN1c3RvbSB0ZXh0XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIGFuIGF1dG9tYXRpYyB3ZWxjb21lIG1lc3NhZ2UgKGlmIGZvdW5kKSwgbm8gYWRkaXRpb25hbCBtZXNzYWdlc1xuICogPFNlY3Rpb25NZXNzYWdlcyByb3V0ZU5hbWU9XCJEQVNIQk9BUkRcIiAvPlxuICogQGV4YW1wbGVcbiAqIC8vIG92ZXJ3cml0ZSB0ZXh0IG9mIGFuIGF1dG9tYXRpYyB3ZWxjb21lIG1lc3NhZ2UsIG5vIGFkZGl0aW9uYWwgbWVzc2FnZXNcbiAqIDxTZWN0aW9uTWVzc2FnZXNcbiAqICAgcm91dGVOYW1lPVwiREFTSEJPQVJEXCJcbiAqICAgd2VsY29tZVRleHQ9e2BXZSB3ZWxjb21lIHlvdSB0byB0aGUgZGFzaGJvYXJkLCAke2dpdmVuTmFtZX1gfSAvPlxuICogQGV4YW1wbGVcbiAqIC8vIGRlZmluZSB0ZXh0IGZvciBhIG1hbnVhbCB3ZWxjb21lIG1lc3NhZ2UsIG5vIGFkZGl0aW9uYWwgbWVzc2FnZXNcbiAqIDxTZWN0aW9uTWVzc2FnZXMgd2VsY29tZVRleHQ9e2BXZSB3ZWxjb21lIHlvdSB0byB0aGlzIHBhZ2UsICR7Z2l2ZW5OYW1lfWB9IC8+XG4gKiBAZXhhbXBsZVxuICogLy8gYW4gYXV0b21hdGljIHdlbGNvbWUgbWVzc2FnZSAoaWYgZm91bmQpLCBzb21lIGFkZGl0aW9uYWwgbWVzc2FnZXNcbiAqIDxTZWN0aW9uTWVzc2FnZXMgcm91dGVOYW1lPVwiREFTSEJPQVJEXCI+XG4gKiAgIDxBbGVydCBjb2xvcj1cInN1Y2Nlc3NcIj5Zb3Ugd2luITwvQWxlcnQ+XG4gKiAgIDxBbGVydCBjb2xvcj1cInNlY29uZGFyeVwiPlxuICogICAgIDxidXR0b24+Q2xhaW0geW91ciBwcml6ZS48L2J1dHRvbj5cbiAqICAgPC9BbGVydD5cbiAqIDwvU2VjdGlvbk1lc3NhZ2VzPlxuICogQGV4YW1wbGVcbiAqIC8vIG5vIGF1dG9tYXRpYyB3ZWxjb21lIG1lc3NhZ2UsIHNvbWUgYWRkaXRpb25hbCBtZXNzYWdlc1xuICogPFNlY3Rpb25NZXNzYWdlcz5cbiAqICAgPEFsZXJ0IGNvbG9yPVwic3VjY2Vzc1wiPllvdSB3aW4hPC9BbGVydD5cbiAqICAgPEFsZXJ0IGNvbG9yPVwic2Vjb25kYXJ5XCI+XG4gKiAgICAgPGJ1dHRvbj5DbGFpbSB5b3VyIHByaXplLjwvYnV0dG9uPlxuICogICA8L0FsZXJ0PlxuICogPC9TZWN0aW9uTWVzc2FnZXM+XG4gKi9cbmZ1bmN0aW9uIFNlY3Rpb25NZXNzYWdlcyh7IGNoaWxkcmVuLCBjbGFzc05hbWUsIHJvdXRlTmFtZSwgd2VsY29tZVRleHQgfSkge1xuICBjb25zdCB3ZWxjb21lTWVzc2FnZVRleHQgPSB3ZWxjb21lVGV4dCB8fCBNRVNTQUdFU1tyb3V0ZU5hbWVdO1xuICAvKiBGQVE6IEFuIGFsdGVybmF0ZSBtZXNzYWdlIG5hbWUgYWxsb3dzIHRyYWNraW5nIGN1c3RvbSBtZXNzYWdlIGRpc21pc3NhbCAqL1xuICBjb25zdCB3ZWxjb21lTWVzc2FnZU5hbWUgPSByb3V0ZU5hbWUgfHwgd2VsY29tZU1lc3NhZ2VUZXh0O1xuICBjb25zdCB3ZWxjb21lTWVzc2FnZSA9IHdlbGNvbWVNZXNzYWdlVGV4dCAmJiAoXG4gICAgPFdlbGNvbWVNZXNzYWdlIG1lc3NhZ2VOYW1lPXt3ZWxjb21lTWVzc2FnZU5hbWV9PlxuICAgICAge3dlbGNvbWVNZXNzYWdlVGV4dH1cbiAgICA8L1dlbGNvbWVNZXNzYWdlPlxuICApO1xuICBjb25zdCBoYXNNZXNzYWdlID0gc2hvdWxkU2hvd1dlbGNvbWVNZXNzYWdlKHJvdXRlTmFtZSkgfHwgY2hpbGRyZW4ubGVuZ3RoID4gMDtcbiAgY29uc3QgaGFzTWVzc2FnZUNsYXNzID0gJ2hhcy1tZXNzYWdlJztcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChoYXNNZXNzYWdlKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoaGFzTWVzc2FnZUNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGhhc01lc3NhZ2VDbGFzcyk7XG4gICAgfVxuICB9LCBbaGFzTWVzc2FnZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPGFzaWRlIHN0eWxlTmFtZT1cInJvb3RcIiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICB7d2VsY29tZU1lc3NhZ2V9XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9hc2lkZT5cbiAgKTtcbn1cblNlY3Rpb25NZXNzYWdlcy5wcm9wVHlwZXMgPSB7XG4gIC8qKiBDb21wb25lbnQtYmFzZWQgbWVzc2FnZShzKSAoZS5nLiA8QWxlcnQ+LCA8TWVzc2FnZT4pICh3ZWxjb21lIG1lc3NhZ2UgZm91bmQgYXV0b21hdGljYWxseSwgZ2l2ZW4gYHJvdXRlTmFtZWApICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqIEFueSBhZGRpdGlvbmFsIGNsYXNzTmFtZShzKSBmb3IgdGhlIHJvb3QgZWxlbWVudCAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgcm91dGUgc2VjdGlvbiAodG8gc2VhcmNoIGZvciByZXF1aXJlZCB3ZWxjb21lIG1lc3NhZ2UpICovXG4gIHJvdXRlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIEN1c3RvbSB3ZWxjb21lIHRleHQgKGNhbiBvdmVyd3JpdGUgYHJvdXRlTmFtZWAtYmFzZWQgd2VsY29tZSBtZXNzYWdlKSAqL1xuICB3ZWxjb21lVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5TZWN0aW9uTWVzc2FnZXMuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogJycsXG4gIGNsYXNzTmFtZTogJycsXG4gIHJvdXRlTmFtZTogJycsXG4gIHdlbGNvbWVUZXh0OiAnJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlY3Rpb25NZXNzYWdlcztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1NlY3Rpb25Db250ZW50Lm1vZHVsZS5jc3MnO1xuaW1wb3J0IGxheW91dFN0eWxlcyBmcm9tICcuL1NlY3Rpb25Db250ZW50LmxheW91dHMubW9kdWxlLmNzcyc7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogTWFwIG9mIGxheW91dCBuYW1lcyB0byBDU1MgY2xhc3Nlc1xuICogQGVudW0ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IExBWU9VVF9DTEFTU19NQVAgPSB7XG4gIC8qKiBPbmUgZnVsbC1oZWlnaHQgcm93IG9mIGZsZXhpYmxlIGJsb2NrcyAqL1xuICBvbmVSb3c6ICdvbmUtcm93JyxcbiAgLyoqIE9uZSBmdWxsLXdpZHRoIGNvbHVtbiBvZiBmbGV4aWJsZSBibG9ja3MgKi9cbiAgb25lQ29sdW1uOiAnb25lLWNvbHVtbicsXG4gIC8qKlxuICAgKiBUd28gbGVmdC9yaWdodCBjb2x1bW5zICh3aWRlL25hcnJvdykgb2YgZmxleGlibGUgYmxvY2tzXG4gICAqXG4gICAqIChPbiBuYXJyb3cgc2NyZWVucywgdGhpcyBiZWhhdmVzIGxpa2UgYG9uZUNvbHVtbmApXG4gICAqL1xuICB0d29Db2x1bW46ICd0d28tY29sdW1uJyxcbn07XG5leHBvcnQgY29uc3QgREVGQVVMVF9MQVlPVVQgPSAnb25lUm93JztcbmV4cG9ydCBjb25zdCBMQVlPVVRTID0gWy4uLk9iamVjdC5rZXlzKExBWU9VVF9DTEFTU19NQVApXTtcblxuLyoqXG4gKiBBIGNvbnRlbnQgcGFuZWwgd3JhcHBlciB0aGF0IHN1cHBvcnRzOlxuICpcbiAqIC0gbGF5IG91dCBwYW5lbHMgKGJhc2VkIG9uIGxheW91dCBuYW1lIGFuZCBwYW5lbCBwb3NpdGlvbilcbiAqIC0gY2hhbmdlIGVsZW1lbnQgdGFnIChsaWtlIGBzZWN0aW9uYCBpbnN0ZWFkIG9mIGBkaXZgKVxuICogLSBzY3JvbGwgcm9vdCBlbGVtZW50IChvdmVyZmxvdyBvZiBwYW5lbCBjb250ZW50IGlzIG5vdCBtYW5hZ2VkKVxuICogLSBkZWJ1ZyBsYXlvdXQgKHZpYSBjb2xvci1jb2RlZCBwYW5lbHMpXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIGZlYXR1cmVzOiBsYXkgb3V0IHBhbmVscywgY2hhbmdlIHRhZywgYWxsb3cgY29udGVudCBzY3JvbGwsIGNvbG9yLWNvZGVkXG4gKiA8U2VjdGlvbkNvbnRlbnRcbiAqICAgbGF5b3V0TmFtZT1cIm9uZUNvbHVtblwiXG4gKiAgIHRhZ05hbWU9XCJtYWluXCIsXG4gKiAgIHNob3VsZFNjcm9sbCxcbiAqICAgc2hvdWxkRGVidWdMYXlvdXRcbiAqID5cbiAqICAgPGRpdj5UaGluZyAxPC9kaXY+XG4gKiAgIDxkaXY+VGhpbmcgMjwvZGl2PlxuICogICA8ZGl2PlRoaW5nIDM8L2Rpdj5cbiAqIDwvU2VjdGlvbkNvbnRlbnQ+XG4gKi9cbmZ1bmN0aW9uIFNlY3Rpb25Db250ZW50KHtcbiAgY2xhc3NOYW1lLFxuICBjaGlsZHJlbixcbiAgbGF5b3V0TmFtZSxcbiAgc2hvdWxkU2Nyb2xsLFxuICBzaG91bGREZWJ1Z0xheW91dCxcbiAgdGFnTmFtZSxcbn0pIHtcbiAgbGV0IHN0eWxlTmFtZSA9ICcnO1xuICBjb25zdCBzdHlsZU5hbWVMaXN0ID0gWydzdHlsZXMucm9vdCddO1xuICBjb25zdCBsYXlvdXRDbGFzcyA9IExBWU9VVF9DTEFTU19NQVBbbGF5b3V0TmFtZV07XG4gIGNvbnN0IFRhZ05hbWUgPSB0YWdOYW1lO1xuXG4gIGlmIChzaG91bGRTY3JvbGwpIHN0eWxlTmFtZUxpc3QucHVzaCgnc3R5bGVzLnNob3VsZC1zY3JvbGwnKTtcbiAgaWYgKHNob3VsZERlYnVnTGF5b3V0KSBzdHlsZU5hbWVMaXN0LnB1c2goJ3N0eWxlcy5zaG91bGQtZGVidWctbGF5b3V0Jyk7XG4gIGlmIChsYXlvdXRDbGFzcykgc3R5bGVOYW1lTGlzdC5wdXNoKGBsYXlvdXRTdHlsZXMuJHtsYXlvdXRDbGFzc31gKTtcblxuICAvLyBEbyBub3Qgam9pbiBpbnNpZGUgSlNYIChvdGhlcndpc2UgYXJjYW5lIHN0eWxlTmFtZSBlcnJvciBvY2N1cnMpXG4gIHN0eWxlTmFtZSA9IHN0eWxlTmFtZUxpc3Quam9pbignICcpO1xuXG4gIHJldHVybiAoXG4gICAgPFRhZ05hbWUgc3R5bGVOYW1lPXtzdHlsZU5hbWV9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1RhZ05hbWU+XG4gICk7XG59XG5TZWN0aW9uQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gIC8qKiBBbnkgYWRkaXRpb25hbCBjbGFzc05hbWUocykgZm9yIHRoZSByb290IGVsZW1lbnQgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogQ29udGVudCBub2RlcyB3aGVyZSBlYWNoIG5vZGUgaXMgYSBibG9jayB0byBiZSBsYWlkIG91dCAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBsYXlvdXQgYnkgd2hpY2ggdG8gYXJyYW5nZSB0aGUgbm9kZXMgKi9cbiAgbGF5b3V0TmFtZTogUHJvcFR5cGVzLm9uZU9mKExBWU9VVFMpLmlzUmVxdWlyZWQsXG4gIC8qKiBXaGV0aGVyIHRvIGFsbG93IHJvb3QgZWxlbWVudCB0byBzY3JvbGwgKi9cbiAgc2hvdWxkU2Nyb2xsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIFdoZXRoZXIgdG8gYWxsb3cgcGFuZWwgZGVidWdnaW5nIChoaWdobGlnaHQgZWFjaCBwYW5lbCB3aXRoIHVuaXF1ZSBodWUpICovXG4gIHNob3VsZERlYnVnTGF5b3V0OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIE92ZXJyaWRlIHRhZyBvZiB0aGUgcm9vdCBlbGVtZW50ICovXG4gIHRhZ05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuU2VjdGlvbkNvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBzaG91bGRTY3JvbGw6IGZhbHNlLFxuICBzaG91bGREZWJ1Z0xheW91dDogZmFsc2UsXG4gIHRhZ05hbWU6ICdkaXYnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VjdGlvbkNvbnRlbnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgU2VjdGlvbkhlYWRlciwgU2VjdGlvbkNvbnRlbnQgfSBmcm9tICcuLic7XG5pbXBvcnQgU2VjdGlvbk1lc3NhZ2VzIGZyb20gJy4vU2VjdGlvbk1lc3NhZ2VzJztcbmltcG9ydCB7IExBWU9VVFMsIERFRkFVTFRfTEFZT1VUIH0gZnJvbSAnLi4vU2VjdGlvbkNvbnRlbnQnO1xuXG5pbXBvcnQgJy4vU2VjdGlvbi5tb2R1bGUuY3NzJztcblxuLyoqXG4gKiBBIHNlY3Rpb24gbGF5b3V0IHN0cnVjdHVyZSB0aGF0IHN1cHBvcnRzOlxuICpcbiAqIC0gbWVzc2FnZXMgKGF1dG9tYXRpY2FsbHkgbG9hZHMgd2VsY29tZSBtZXNzYWdlKVxuICogLSBoZWFkZXIgKHdpdGggYWN0aW9ucywgZS5nLiBsaW5rcywgYnV0dG9ucywgZm9ybSlcbiAqIC0gY29udGVudCAodGhhdCB3aWxsIGJlIGFycmFuZ2VkIGluIHRoZSBsYXlvdXQgeW91IGNob29zZSlcbiAqIC0gbWFudWFsIG9yIGF1dG9tYXRpYyBzdWItY29tcG9uZW50cyAoaS5lLiBoZWFkZXIsIGNvbnRlbnQpXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIG1hbnVhbGx5IGJ1aWxkIG1lc3NhZ2VzLCBhdXRvbWF0aWNhbGx5IGJ1aWxkIHdlbGNvbWUgbWVzc2FnZVxuICogPFNlY3Rpb25cbiAqICAgcm91dGVOYW1lPVwiREFTSEJPQVJEXCJcbiAqICAgbWVzc2FnZXM9ezw+4oCmPC8+fVxuICogLz5cbiAqIEBleGFtcGxlXG4gKiAvLyBvdmVyd3JpdGUgdGV4dCBvZiBhbiBhdXRvbWF0aWMgd2VsY29tZSBtZXNzYWdlLCBubyBhZGRpdGlvbmFsIG1lc3NhZ2VzXG4gKiA8U2VjdGlvblxuICogICByb3V0ZU5hbWU9XCJEQVNIQk9BUkRcIlxuICogICB3ZWxjb21lTWVzc2FnZVRleHQ9e2BXZSB3ZWxjb21lIHlvdSB0byB0aGUgZGFzaGJvYXJkLCAke2dpdmVuTmFtZX1gfVxuICogLz5cbiAqIEBleGFtcGxlXG4gKiAvLyBkZWZpbmUgdGV4dCBmb3IgYSBtYW51YWwgd2VsY29tZSBtZXNzYWdlLCBubyBhZGRpdGlvbmFsIG1lc3NhZ2VzXG4gKiA8U2VjdGlvblxuICogICB3ZWxjb21lTWVzc2FnZVRleHQ9e2BXZSB3ZWxjb21lIHlvdSB0byB0aGlzIHBhZ2UsICR7Z2l2ZW5OYW1lfWB9XG4gKiAvPlxuICogQGV4YW1wbGVcbiAqIC8vIGFkZCBjbGFzcyB0byA8Ym9keT4sIGF1dG9tYXRpY2FsbHkgYnVpbGQgc3ViLWNvbXBvbmVudHNcbiAqIC8vIEZBUTogY2xhc3Mgb24gPGJvZHk+ICsgYEJvYi5nbG9iYWwuY3NzYCArIGBib2R5Lmdsb2JhbC1ib2ItY2xhc3NgXG4gKiAvLyAgICAgID0gdW5saW1pdGVkLCBleHBsaWNpdCwgaXNvbGF0ZWQgQ1NTIHNpZGUgZWZmZWN0c1xuICogPFNlY3Rpb25cbiAqICAgYm9keUNsYXNzTmFtZT1cImhhcy1sb2FkZWQtc29tZV9zZWN0aW9uXCJcbiAqICAgY29udGVudD174oCmfVxuICogLz5cbiAqIEBleGFtcGxlXG4gKiAvLyBhdXRvbWF0aWNhbGx5IGJ1aWxkIHN1Yi1jb21wb25lbnRzLCB3aXRoIHNvbWUgY3VzdG9taXphdGlvblxuICogPFNlY3Rpb25cbiAqICAgaGVhZGVyPVwiRGFzaGJvYXJkXCJcbiAqICAgaGVhZGVyU3R5bGVOYW1lPVwiaGVhZGVyXCJcbiAqICAgaGVhZGVyQWN0aW9ucz174oCmfVxuICogICBjb250ZW50PXvigKZ9XG4gKiAgIGNvbnRlbnRTdHlsZU5hbWU9XCJpdGVtc1wiXG4gKiAgIGNvbnRlbnRMYXlvdXROYW1lPVwidHdvQ29sdW1uXCJcbiAqIC8+XG4gKiBAZXhhbXBsZVxuICogLy8gYWx0ZXJuYXRlIHN5bnRheCB0byBhdXRvbWF0aWNhbGx5IGJ1aWxkIGNvbnRlbnRcbiAqIDxTZWN0aW9uXG4gKiAgIGNvbnRlbnRTdHlsZU5hbWU9XCJpdGVtc1wiXG4gKiAgIGNvbnRlbnRMYXlvdXROYW1lPVwidHdvQ29sdW1uXCJcbiAqID5cbiAqICAge+KApn0gPCEtLSBpLmUuIGNvbnRlbnQgLS0+XG4gKiA8L1NlY3Rpb24+XG4gKiBAZXhhbXBsZVxuICogLy8gbWFudWFsbHkgYnVpbGQgc3ViLWNvbXBvbmVudHNcbiAqIC8vIFdBUk5JTkc6IFRoaXMgY29tcG9uZW50J3Mgc3R5bGVzIGFyZSBOT1QgYXBwbGllZCB0byBtYW51YWwgc3ViLWNvbXBvbmVudHNcbiAqIC8vIEZBUTogVGhlIDxTZWN0aW9uSGVhZGVyPiBvZmZlcnMgYXV0by1idWlsdCBoZWFkZXIncyBsYXlvdXQgc3R5bGVzXG4gKiAvLyBGQVE6IFRoZSA8U2VjdGlvbkNvbnRlbnQ+IG9mZmVycyBhdXRvLWJ1aWx0IGNvbnRlbnQncyBsYXlvdXQgc3R5bGVzXG4gKiA8U2VjdGlvblxuICogICBtYW51YWxIZWFkZXI9e1xuICogICAgIDxTZWN0aW9uSGVhZGVyIHvigKZ9IC8+XG4gKiAgIH1cbiAqICAgbWFudWFsQ29udGVudD17XG4gKiAgICAgPFNlY3Rpb25Db250ZW50IHvigKZ9IC8+XG4gKiAgIH1cbiAqIC8+XG4gKiBAZXhhbXBsZVxuICogLy8gbWFudWFsbHkgYnVpbGQgY29udGVudCAoYWx0ZXJuYXRlIG1ldGhvZClcbiAqIC8vIFdBUk5JTkc6IFRoaXMgY29tcG9uZW50J3Mgc3R5bGVzIGFyZSBOT1QgYXBwbGllZCB0byBtYW51YWwgc3ViLWNvbXBvbmVudHNcbiAqIC8vIEZBUTogVGhlIDxTZWN0aW9uQ29udGVudD4gb2ZmZXJzIGF1dG8tYnVpbHQgY29udGVudCdzIGxheW91dCBvcHRpb25zXG4gKiA8U2VjdGlvbiBtYW51YWxDb250ZW50PlxuICogICA8U2VjdGlvbkNvbnRlbnQge+KApn0gLz5cbiAqIC8+XG4gKi9cbmZ1bmN0aW9uIFNlY3Rpb24oe1xuICBib2R5Q2xhc3NOYW1lLFxuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBjb250ZW50LFxuICBjb250ZW50Q2xhc3NOYW1lLFxuICBjb250ZW50TGF5b3V0TmFtZSxcbiAgY29udGVudFNob3VsZFNjcm9sbCxcbiAgaGVhZGVyLFxuICBoZWFkZXJBY3Rpb25zLFxuICBoZWFkZXJDbGFzc05hbWUsXG4gIG1hbnVhbENvbnRlbnQsXG4gIG1hbnVhbEhlYWRlcixcbiAgLy8gbWFudWFsU2lkZWJhcixcbiAgLy8gc2lkZWJhcixcbiAgLy8gc2lkZWJhckNsYXNzTmFtZSxcbiAgbWVzc2FnZXMsXG4gIG1lc3NhZ2VzQ2xhc3NOYW1lLFxuICByb3V0ZU5hbWUsXG4gIHdlbGNvbWVNZXNzYWdlVGV4dCxcbn0pIHtcbiAgY29uc3Qgc2hvdWxkQnVpbGRIZWFkZXIgPSBoZWFkZXIgfHwgaGVhZGVyQ2xhc3NOYW1lIHx8IGhlYWRlckFjdGlvbnM7XG5cbiAgLy8gQWxsb3dpbmcgaW5lZmZlY3R1YWwgcHJvcCBjb21iaW5hdGlvbnMgd291bGQgbGVhZCB0byBjb25mdXNpb25cbiAgaWYgKFxuICAgIG1hbnVhbENvbnRlbnQgJiZcbiAgICAoY29udGVudCB8fCBjb250ZW50Q2xhc3NOYW1lIHx8IGNvbnRlbnRMYXlvdXROYW1lIHx8IGNvbnRlbnRTaG91bGRTY3JvbGwpXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdXaGVuIHBhc3NpbmcgYG1hbnVhbENvbnRlbnRgLCB0aGUgZm9sbG93aW5nIHByb3BzIGFyZSBpbmVmZmVjdHVhbDogYGNvbnRlbnRgLCBgY29udGVudENsYXNzTmFtZWAsIGBjb250ZW50TGF5b3V0TmFtZWAsIGBjb250ZW50U2hvdWxkU2Nyb2xsYCdcbiAgICApO1xuICB9XG4gIGlmIChtYW51YWxIZWFkZXIgJiYgKGhlYWRlciB8fCBoZWFkZXJDbGFzc05hbWUgfHwgaGVhZGVyQWN0aW9ucykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnV2hlbiBwYXNzaW5nIGBtYW51YWxIZWFkZXJgLCB0aGUgZm9sbG93aW5nIHByb3BzIGFyZSBpbmVmZmVjdHVhbDogYGhlYWRlcmAsIGBoZWFkZXJDbGFzc05hbWVgLCBgaGVhZGVyQWN0aW9uc2AnXG4gICAgKTtcbiAgfVxuICAvLyBpZiAobWFudWFsU2lkZWJhciAmJiAoc2lkZWJhciB8fCBzaWRlYmFyQ2xhc3NOYW1lKSkge1xuICAvLyAgIHRocm93IG5ldyBFcnJvcihcbiAgLy8gICAgICdXaGVuIHBhc3NpbmcgYG1hbnVhbFNpZGViYXJgLCB0aGUgZm9sbG93aW5nIHByb3BzIGFyZSBpbmVmZmVjdHVhbDogYHNpZGViYXJgLCBgc2lkZWJhckNsYXNzTmFtZWAnXG4gIC8vICAgKTtcbiAgLy8gfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJvZHlDbGFzc05hbWUpIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChib2R5Q2xhc3NOYW1lKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgaWYgKGJvZHlDbGFzc05hbWUpIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShib2R5Q2xhc3NOYW1lKTtcbiAgICB9O1xuICB9LCBbYm9keUNsYXNzTmFtZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPHNlY3Rpb24gc3R5bGVOYW1lPVwicm9vdFwiIGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIDxTZWN0aW9uTWVzc2FnZXNcbiAgICAgICAgc3R5bGVOYW1lPVwibWVzc2FnZXNcIlxuICAgICAgICByb3V0ZU5hbWU9e3JvdXRlTmFtZX1cbiAgICAgICAgY2xhc3NOYW1lPXttZXNzYWdlc0NsYXNzTmFtZX1cbiAgICAgICAgd2VsY29tZVRleHQ9e3dlbGNvbWVNZXNzYWdlVGV4dH1cbiAgICAgID5cbiAgICAgICAge21lc3NhZ2VzfVxuICAgICAgPC9TZWN0aW9uTWVzc2FnZXM+XG4gICAgICB7Lyoge21hbnVhbFNpZGViYXIgPyAoXG4gICAgICAgIDw+e21hbnVhbFNpZGViYXJ9PC8+XG4gICAgICApIDogKFxuICAgICAgICA8U2lkZWJhciBzdHlsZU5hbWU9XCJzaWRlYmFyXCIgY2xhc3NOYW1lPXtzaWRlYmFyQ2xhc3NOYW1lfT5cbiAgICAgICAgICB7c2lkZWJhcn1cbiAgICAgICAgPC9TaWRlYmFyPlxuICAgICAgKX0gKi99XG4gICAgICB7bWFudWFsSGVhZGVyID8gKFxuICAgICAgICA8PnttYW51YWxIZWFkZXJ9PC8+XG4gICAgICApIDogKFxuICAgICAgICBzaG91bGRCdWlsZEhlYWRlciAmJiAoXG4gICAgICAgICAgPFNlY3Rpb25IZWFkZXJcbiAgICAgICAgICAgIHN0eWxlTmFtZT1cImhlYWRlclwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2hlYWRlckNsYXNzTmFtZX1cbiAgICAgICAgICAgIGFjdGlvbnM9e2hlYWRlckFjdGlvbnN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2hlYWRlcn1cbiAgICAgICAgICA8L1NlY3Rpb25IZWFkZXI+XG4gICAgICAgIClcbiAgICAgICl9XG4gICAgICB7bWFudWFsQ29udGVudCA/IChcbiAgICAgICAgPD5cbiAgICAgICAgICB7bWFudWFsQ29udGVudH1cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvPlxuICAgICAgKSA6IChcbiAgICAgICAgPFNlY3Rpb25Db250ZW50XG4gICAgICAgICAgdGFnTmFtZT1cIm1haW5cIlxuICAgICAgICAgIHN0eWxlTmFtZT1cImNvbnRlbnRcIlxuICAgICAgICAgIGNsYXNzTmFtZT17Y29udGVudENsYXNzTmFtZX1cbiAgICAgICAgICBsYXlvdXROYW1lPXtjb250ZW50TGF5b3V0TmFtZSB8fCBERUZBVUxUX0xBWU9VVH1cbiAgICAgICAgICBzaG91bGRTY3JvbGw9e2NvbnRlbnRTaG91bGRTY3JvbGx9XG4gICAgICAgID5cbiAgICAgICAgICB7Y29udGVudH1cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvU2VjdGlvbkNvbnRlbnQ+XG4gICAgICApfVxuICAgIDwvc2VjdGlvbj5cbiAgKTtcbn1cblNlY3Rpb24ucHJvcFR5cGVzID0ge1xuICAvKiogTmFtZSBvZiBjbGFzcyB0byBhcHBlbmQgdG8gYm9keSB3aGVuIHNlY3Rpb24gaXMgYWN0aXZlICovXG4gIGJvZHlDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBBbHRlcm5hdGUgd2F5IHRvIHBhc3MgYG1hbnVhbENvbnRlbnRgIGFuZCBgY29udGVudGAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKiogQW55IGFkZGl0aW9uYWwgY2xhc3NOYW1lKHMpIGZvciB0aGUgcm9vdCBlbGVtZW50ICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIFRoZSBzZWN0aW9uIGNvbnRlbnQgY2hpbGRyZW4gKGNvbnRlbnQgZWxlbWVudCBidWlsdCBhdXRvbWF0aWNhbGx5KSAqL1xuICBjb250ZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqIEFueSBhZGRpdGlvbmFsIGNsYXNzTmFtZShzKSBmb3IgdGhlIGNvbnRlbnQgZWxlbWVudCAqL1xuICBjb250ZW50Q2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogVGhlIG5hbWUgb2YgdGhlIGxheW91dCBieSB3aGljaCB0byBhcnJhbmdlIHRoZSBjb250ZW50IGNoaWxkcmVuICovXG4gIGNvbnRlbnRMYXlvdXROYW1lOiBQcm9wVHlwZXMub25lT2YoTEFZT1VUUy5jb25jYXQoJycpKSxcbiAgLyoqIFdoZXRoZXIgdG8gYWxsb3cgY29udGVudCB0byBzY3JvbGwgKi9cbiAgY29udGVudFNob3VsZFNjcm9sbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKiBUaGUgc2VjdGlvbiBoZWFkZXIgdGV4dCAoaGVhZGVyIGVsZW1lbnQgYnVpbHQgYXV0b21hdGljYWxseSkgKi9cbiAgaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqIEFueSBzZWN0aW9uIGFjdGlvbnMgZm9yIHRoZSBoZWFkZXIgZWxlbWVudCAqL1xuICBoZWFkZXJBY3Rpb25zOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqIEFueSBhZGRpdGlvbmFsIGNsYXNzTmFtZShzKSBmb3IgdGhlIGhlYWRlciBlbGVtZW50ICovXG4gIGhlYWRlckNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIFRoZSBzZWN0aW9uIGNvbnRlbnQgKGJ1aWx0IGJ5IHVzZXIpIGZsYWcgb3IgZWxlbWVudCAqL1xuICAvKiBSRkU6IElkZWFsbHksIGxpbWl0IHRoZXNlIHRvIG9uZSByZWxldmFudCBgU2VjdGlvblvigKZdYCBjb21wb25lbnQgKi9cbiAgLyogU0VFOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzI5NzkgKi9cbiAgbWFudWFsQ29udGVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5lbGVtZW50XSksXG4gIC8qKiBUaGUgc2VjdGlvbiBoZWFkZXIgKGJ1aWx0IGJ5IHVzZXIpIGVsZW1lbnQgKi9cbiAgbWFudWFsSGVhZGVyOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgLy8gLyoqIFRoZSBwYWdlLXNwZWNpZmljIHNpZGViYXIgKi9cbiAgLy8gc2lkZWJhcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8vIC8qKiBBZGRpdGlvbmFsIGNsYXNzTmFtZSBmb3IgdGhlIHNpZGViYXIgZWxlbWVudCAqL1xuICAvLyBzaWRlYmFyQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogQW55IGNvbXBvbmVudC1iYXNlZCBtZXNzYWdlKHMpIChlLmcuIDxBbGVydD4sIDxNZXNzYWdlPikgKHdlbGNvbWUgbWVzc2FnZSBmb3VuZCBhdXRvbWF0aWNhbGx5LCBnaXZlbiBgcm91dGVOYW1lYCkgKi9cbiAgbWVzc2FnZXM6IFByb3BUeXBlcy5ub2RlLFxuICAvKiogQW55IGFkZGl0aW9uYWwgY2xhc3NOYW1lKHMpIGZvciB0aGUgbWVzc2FnZSBsaXN0ICovXG4gIG1lc3NhZ2VzQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogVGhlIG5hbWUgb2YgdGhlIHJvdXRlIHNlY3Rpb24gKHRvIHNlYXJjaCBmb3IgYSB3ZWxjb21lIG1lc3NhZ2UpICovXG4gIHJvdXRlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIEFueSBhZGRpdGlvbmFsIGNsYXNzTmFtZShzKSBmb3IgdGhlIHNpZGViYXIgbGlzdCAqL1xuICAvLyBzaWRlYmFyQ2xhc3NOYW1lOiAnJyxcbiAgLyoqIEN1c3RvbSB3ZWxjb21lIHRleHQgKGNhbiBvdmVyd3JpdGUgYHJvdXRlTmFtZWAtYmFzZWQgd2VsY29tZSBtZXNzYWdlKSAqL1xuICB3ZWxjb21lTWVzc2FnZVRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuU2VjdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGJvZHlDbGFzc05hbWU6ICcnLFxuICBjaGlsZHJlbjogJycsXG4gIGNsYXNzTmFtZTogJycsXG4gIGNvbnRlbnQ6ICcnLFxuICBjb250ZW50Q2xhc3NOYW1lOiAnJyxcbiAgY29udGVudExheW91dE5hbWU6ICcnLFxuICBjb250ZW50U2hvdWxkU2Nyb2xsOiBmYWxzZSxcbiAgaGVhZGVyOiAnJyxcbiAgaGVhZGVyQWN0aW9uczogJycsXG4gIGhlYWRlckNsYXNzTmFtZTogJycsXG4gIG1hbnVhbENvbnRlbnQ6IHVuZGVmaW5lZCxcbiAgbWFudWFsSGVhZGVyOiB1bmRlZmluZWQsXG4gIG1lc3NhZ2VzOiAnJyxcbiAgbWVzc2FnZXNDbGFzc05hbWU6ICcnLFxuICByb3V0ZU5hbWU6ICcnLFxuICAvLyBzaWRlYmFyQ2xhc3NOYW1lOiAnJyxcbiAgd2VsY29tZU1lc3NhZ2VUZXh0OiAnJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlY3Rpb247XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0ICcuL1NlY3Rpb25IZWFkZXIubW9kdWxlLmNzcyc7XG5cbi8qKlxuICogQSBoZWFkZXIgZm9yIGEgYFNlY3Rpb25b4oCmXWAgY29tcG9uZW50XG4gKlxuICogLSBoZWFkaW5nIHRleHRcbiAqIC0gYWN0aW9ucyAoZS5nLiBsaW5rcywgYnV0dG9ucywgZm9ybSlcbiAqIC0gYXV0b21hdGljIHN0eWxlcyBvciBtYXJrdXAgZm9yIGdpdmVuIGNvbnRleHQgKGV4OiB3aXRoaW4gYSBmb3JtIG9yIGEgdGFibGUpXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIGEgc2VjdGlvbiBoZWFkZXIgd2l0aCBoZWFkaW5nIHRleHRcbiAqIDxTZWN0aW9uSGVhZGVyPlxuICogICA8YSBocmVmPVwi4oCmXCI+SHlwZXJsaW5rZWQgTmFtZSBvZiBTZWN0aW9uPC9hPlxuICogPC9TZWN0aW9uSGVhZGVyPlxuICogQGV4YW1wbGVcbiAqIC8vIGEgZm9ybSBoZWFkZXIgd2l0aCBhY3Rpb25zIGFuZCBoZWFkaW5nIHRleHRcbiAqIDxTZWN0aW9uSGVhZGVyXG4gKiAgIGFjdGlvbnM9ezxidXR0b24gdHlwZT1cInJlc2V0XCI+UmVzZXQ8L2J1dHRvbj59XG4gKiAgIGlzRm9yRm9ybVxuICogPlxuICogICBOYW1lIG9mIEZvcm1cbiAqIDwvU2VjdGlvbkhlYWRlcj5cbiAqIEBleGFtcGxlXG4gKiAvLyBhIHRhYmxlIGhlYWRlciB3aXRoIGFjdGlvbnMgYW5kIGhlYWRpbmcgdGV4dFxuICogPFNlY3Rpb25IZWFkZXJcbiAqICAgYWN0aW9ucz17PGlucHV0IHR5cGU9XCJzZWFyY2hcIiAvPn1cbiAqICAgaXNGb3JUYWJsZVxuICogPlxuICogICBOYW1lIG9mIFRhYmxlXG4gKiA8L1NlY3Rpb25IZWFkZXI+XG4gKi9cbmZ1bmN0aW9uIFNlY3Rpb25IZWFkZXIoe1xuICBhY3Rpb25zLFxuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBpc0ZvckZvcm0sXG4gIGlzRm9yVGFibGUsXG59KSB7XG4gIGxldCBzdHlsZU5hbWUgPSAnJztcbiAgY29uc3Qgc3R5bGVOYW1lTGlzdCA9IFsncm9vdCddO1xuICBjb25zdCBIZWFkaW5nVGFnTmFtZSA9IGlzRm9yRm9ybSB8fCBpc0ZvclRhYmxlID8gJ2gzJyA6ICdoMic7XG5cbiAgaWYgKGlzRm9yRm9ybSkgc3R5bGVOYW1lTGlzdC5wdXNoKCdmb3ItZm9ybScpO1xuICBpZiAoaXNGb3JUYWJsZSkgc3R5bGVOYW1lTGlzdC5wdXNoKCdmb3ItdGFibGUnKTtcblxuICAvLyBEbyBub3Qgam9pbiBpbnNpZGUgSlNYIChvdGhlcndpc2UgYXJjYW5lIHN0eWxlTmFtZSBlcnJvciBvY2N1cnMpXG4gIHN0eWxlTmFtZSA9IHN0eWxlTmFtZUxpc3Quam9pbignICcpO1xuXG4gIHJldHVybiAoXG4gICAgPGhlYWRlciBzdHlsZU5hbWU9e3N0eWxlTmFtZX0gY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAge2NoaWxkcmVuICYmIChcbiAgICAgICAgPEhlYWRpbmdUYWdOYW1lIHN0eWxlTmFtZT1cImhlYWRpbmdcIj57Y2hpbGRyZW59PC9IZWFkaW5nVGFnTmFtZT5cbiAgICAgICl9XG4gICAgICB7YWN0aW9uc31cbiAgICA8L2hlYWRlcj5cbiAgKTtcbn1cblNlY3Rpb25IZWFkZXIucHJvcFR5cGVzID0ge1xuICAvKiogQW55IGFjdGlvbnMgKGJ1dHRvbnMsIGxpbmtzLCBmb3JtcywgZXRjKSAqL1xuICBhY3Rpb25zOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqIFRoZSB0ZXh0IGEuay5hLiB0aXRsZSAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKiBBbnkgYWRkaXRpb25hbCBjbGFzc05hbWUocykgZm9yIHRoZSByb290IGVsZW1lbnQgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogV2hldGhlciB0aGlzIGhlYWRlciBpcyBmb3IgYSBmb3JtICovXG4gIGlzRm9yRm9ybTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKiBXaGV0aGVyIHRoaXMgaGVhZGVyIGlzIGZvciBhIHRhYmxlICovXG4gIGlzRm9yVGFibGU6IFByb3BUeXBlcy5ib29sLFxufTtcblNlY3Rpb25IZWFkZXIuZGVmYXVsdFByb3BzID0ge1xuICBhY3Rpb25zOiAnJyxcbiAgY2xhc3NOYW1lOiAnJyxcbiAgY2hpbGRyZW46ICcnLFxuICBpc0ZvckZvcm06IGZhbHNlLFxuICBpc0ZvclRhYmxlOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlY3Rpb25IZWFkZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEcm9wem9uZSB9IGZyb20gJ3JlYWN0LWRyb3B6b25lJztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ3JlYWN0c3RyYXAnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAnLi9GaWxlSW5wdXREcm9wWm9uZS5zY3NzJztcblxuZnVuY3Rpb24gUmVqZWN0ZWRGaWxlTWVzc2FnZSh7IG51bWJlck9mRmlsZXMgfSkge1xuICBpZiAobnVtYmVyT2ZGaWxlcyA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3BhbiBjbGFzc05hbWU9XCJyZWplY3RlZC1maWxlLW1lc3NhZ2UgdGV4dC1kYW5nZXJcIj5cbiAgICAgIE9uZSBvciBtb3JlIG9mIHlvdXIgZmlsZXMgZXhjZWVkcyB0aGUgbWF4aW11bSBzaXplIGZvciBhbiB1cGxvYWQgYW5kIHdlcmVcbiAgICAgIG5vdCBhdHRhY2hlZC5cbiAgICA8L3NwYW4+XG4gICk7XG59XG5cblJlamVjdGVkRmlsZU1lc3NhZ2UucHJvcFR5cGVzID0ge1xuICBudW1iZXJPZkZpbGVzOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG59O1xuXG4vKipcbiAqIEZpbGVJbnB1dERyb3Bab25lIGlzIGEgY29tcG9uZW50IHdoZXJlIHVzZXJzIGNhbiBzZWxlY3QgZmlsZXMgdmlhIGZpbGUgYnJvd3NlciBvciBieVxuICogZHJhZy9kcm9wLiAgYW4gYXJlYSB0byBkcm9wIGZpbGVzLiBJZiBgZmlsZWAgcHJvcGVydHkgaXMgc2V0IHRoZW4gZmlsZXMgYXJlIGxpc3RlZFxuICogYW5kIHVzZXIgY2FuIG1hbmFnZSAoZS5nLiBkZWxldGUgdGhvc2UgZmlsZXMpIGRpcmVjdGx5IGluIHRoaXMgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBGaWxlSW5wdXREcm9wWm9uZSh7XG4gIGZpbGVzLFxuICBvblNldEZpbGVzLFxuICBvblJlamVjdGVkRmlsZXMsXG4gIG1heFNpemUsXG4gIG1heFNpemVNZXNzYWdlLFxuICBvblJlbW92ZUZpbGUsXG4gIGlzU3VibWl0dGVkLFxufSkge1xuICBjb25zdCBbbnVtYmVyUmVqZWN0ZWRGaWxlcywgc2V0TnVtYmVyUmVqZWN0ZWRGaWxlc10gPSB1c2VTdGF0ZSgwKTtcblxuICBjb25zdCB7IGdldFJvb3RQcm9wcywgb3BlbiwgZ2V0SW5wdXRQcm9wcyB9ID0gdXNlRHJvcHpvbmUoe1xuICAgIG5vQ2xpY2s6IHRydWUsXG4gICAgbWF4U2l6ZSxcbiAgICBvbkRyb3A6IChhY2NlcHRlZCkgPT4ge1xuICAgICAgb25TZXRGaWxlcyhhY2NlcHRlZCk7XG4gICAgICBzZXROdW1iZXJSZWplY3RlZEZpbGVzKDApO1xuICAgIH0sXG4gICAgb25Ecm9wUmVqZWN0ZWQ6IChyZWplY3RlZCkgPT4ge1xuICAgICAgaWYgKG9uUmVqZWN0ZWRGaWxlcykge1xuICAgICAgICBvblJlamVjdGVkRmlsZXMocmVqZWN0ZWQpO1xuICAgICAgfVxuICAgICAgc2V0TnVtYmVyUmVqZWN0ZWRGaWxlcyhyZWplY3RlZC5sZW5ndGgpO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHJlbW92ZUZpbGUgPSAoZmlsZUluZGV4KSA9PiB7XG4gICAgaWYgKG9uUmVtb3ZlRmlsZSkge1xuICAgICAgb25SZW1vdmVGaWxlKGZpbGVJbmRleCk7XG4gICAgICBzZXROdW1iZXJSZWplY3RlZEZpbGVzKDApO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzaG93RmlsZUxpc3QgPSBmaWxlcyAmJiBmaWxlcy5sZW5ndGggPiAwO1xuXG4gIGlmIChpc1N1Ym1pdHRlZCAmJiBudW1iZXJSZWplY3RlZEZpbGVzID4gMCkge1xuICAgIC8vIHJlc2V0IG51bWJlciBvZiByZWplY3RlZCBmaWxlcyB3aGVuIGZpbGVzIGlzIHN1Ym1pdHRlZFxuICAgIHNldE51bWJlclJlamVjdGVkRmlsZXMoMCk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtcHJvcHMtbm8tc3ByZWFkaW5nXG4gICAgPGRpdiB7Li4uZ2V0Um9vdFByb3BzKCl9IGNsYXNzTmFtZT1cImRyb3B6b25lLWFyZWFcIj5cbiAgICAgIDxpbnB1dCB7Li4uZ2V0SW5wdXRQcm9wcygpfSAvPlxuICAgICAgeyFzaG93RmlsZUxpc3QgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5vLWF0dGFjaG1lbnQtdmlld1wiPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImljb24tdXBsb2FkXCIgLz5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICB7ZmlsZXMgJiYgPFJlamVjdGVkRmlsZU1lc3NhZ2UgbnVtYmVyT2ZGaWxlcz17bnVtYmVyUmVqZWN0ZWRGaWxlc30gLz59XG4gICAgICAgICAgPEJ1dHRvbiBvdXRsaW5lIG9uQ2xpY2s9e29wZW59IGNsYXNzTmFtZT1cInNlbGVjdC1maWxlcy1idXR0b25cIj5cbiAgICAgICAgICAgIFNlbGVjdCBGaWxlKHMpXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPHN0cm9uZz5vcjwvc3Ryb25nPlxuICAgICAgICAgIDxzdHJvbmc+RHJhZyBhbmQgRHJvcDwvc3Ryb25nPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIHttYXhTaXplTWVzc2FnZX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAge3Nob3dGaWxlTGlzdCAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXR0YWNobWVudC12aWV3XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdHRhY2htZW50LWxpc3RcIj5cbiAgICAgICAgICAgIHtmaWxlcy5tYXAoKGYsIGkpID0+IChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdHRhY2htZW50LWJsb2NrXCIga2V5PXtbZi5uYW1lLCBpXS50b1N0cmluZygpfT5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkLWlubGluZS1ibG9jayB0ZXh0LXRydW5jYXRlXCI+e2YubmFtZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgY29sb3I9XCJsaW5rXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImF0dGFjaG1lbnQtcmVtb3ZlXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TnVtYmVyUmVqZWN0ZWRGaWxlcygwKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRmlsZShpKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgUmVtb3ZlXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPFJlamVjdGVkRmlsZU1lc3NhZ2UgbnVtYmVyT2ZGaWxlcz17bnVtYmVyUmVqZWN0ZWRGaWxlc30gLz5cbiAgICAgICAgICA8QnV0dG9uIG91dGxpbmUgb25DbGljaz17b3Blbn0gY2xhc3NOYW1lPVwic2VsZWN0LWZpbGVzLWJ1dHRvblwiPlxuICAgICAgICAgICAgU2VsZWN0IEZpbGUocylcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5GaWxlSW5wdXREcm9wWm9uZS5wcm9wVHlwZXMgPSB7XG4gIGZpbGVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgb25TZXRGaWxlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25SZWplY3RlZEZpbGVzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25SZW1vdmVGaWxlOiBQcm9wVHlwZXMuZnVuYyxcbiAgaXNTdWJtaXR0ZWQ6IFByb3BUeXBlcy5ib29sLFxuICBtYXhTaXplTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBtYXhTaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG59O1xuXG5GaWxlSW5wdXREcm9wWm9uZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGZpbGVzOiBudWxsLFxuICBpc1N1Ym1pdHRlZDogZmFsc2UsXG4gIG9uUmVqZWN0ZWRGaWxlczogbnVsbCxcbiAgb25SZW1vdmVGaWxlOiBudWxsLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRmlsZUlucHV0RHJvcFpvbmU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRmllbGQgfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtVGV4dCwgTGFiZWwgfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgRmlsZUlucHV0RHJvcFpvbmUgZnJvbSAnLi9GaWxlSW5wdXREcm9wWm9uZSc7XG5pbXBvcnQgJy4vRm9ybUZpZWxkLnNjc3MnO1xuXG5mdW5jdGlvbiBGaWxlSW5wdXREcm9wWm9uZUZvcm1GaWVsZCh7XG4gIGlkLFxuICBpc1N1Ym1pdHRlZCxcbiAgZGVzY3JpcHRpb24sXG4gIG1heFNpemVNZXNzYWdlLFxuICBtYXhTaXplLFxufSkge1xuICBjb25zdCBbZmllbGQsICwgaGVscGVyc10gPSB1c2VGaWVsZChpZCk7XG5cbiAgY29uc3Qgb25TZXRGaWxlcyA9IChhY2NlcHRlZEZpbGVzKSA9PiB7XG4gICAgaGVscGVycy5zZXRWYWx1ZShbLi4uZmllbGQudmFsdWUsIC4uLmFjY2VwdGVkRmlsZXNdKTtcbiAgfTtcbiAgY29uc3Qgb25SZW1vdmVGaWxlID0gKGZpbGVJbmRleCkgPT4ge1xuICAgIGNvbnN0IGZpbGVzID0gZmllbGQudmFsdWU7XG4gICAgZmlsZXMuc3BsaWNlKGZpbGVJbmRleCwgMSk7XG4gICAgaGVscGVycy5zZXRWYWx1ZShmaWxlcyk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPEZvcm1Hcm91cD5cbiAgICAgIDxMYWJlbFxuICAgICAgICBmb3I9e2lkfVxuICAgICAgICBzaXplPVwic21cIlxuICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWZpZWxkX19sYWJlbFwiXG4gICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicgfX1cbiAgICAgID5cbiAgICAgICAgQXR0YWNoIEZpbGVzXG4gICAgICA8L0xhYmVsPlxuICAgICAgPEZpbGVJbnB1dERyb3Bab25lXG4gICAgICAgIGlkPXtpZH1cbiAgICAgICAgZmlsZXM9e2ZpZWxkLnZhbHVlfVxuICAgICAgICBvblNldEZpbGVzPXtvblNldEZpbGVzfVxuICAgICAgICBvblJlbW92ZUZpbGU9e29uUmVtb3ZlRmlsZX1cbiAgICAgICAgaXNTdWJtaXR0ZWQ9e2lzU3VibWl0dGVkfVxuICAgICAgICBtYXhTaXplTWVzc2FnZT17bWF4U2l6ZU1lc3NhZ2V9XG4gICAgICAgIG1heFNpemU9e21heFNpemV9XG4gICAgICAvPlxuICAgICAgPEZvcm1UZXh0IGNsYXNzTmFtZT1cImZvcm0tZmllbGRfX2hlbHBcIiBjb2xvcj1cIm11dGVkXCI+XG4gICAgICAgIHtkZXNjcmlwdGlvbn1cbiAgICAgIDwvRm9ybVRleHQ+XG4gICAgPC9Gb3JtR3JvdXA+XG4gICk7XG59XG5cbkZpbGVJbnB1dERyb3Bab25lRm9ybUZpZWxkLnByb3BUeXBlcyA9IHtcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgaXNTdWJtaXR0ZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtYXhTaXplTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBtYXhTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxufTtcblxuRmlsZUlucHV0RHJvcFpvbmVGb3JtRmllbGQuZGVmYXVsdFByb3BzID0ge1xuICBkZXNjcmlwdGlvbjogdW5kZWZpbmVkLFxuICBtYXhTaXplOiBJbmZpbml0eSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVJbnB1dERyb3Bab25lRm9ybUZpZWxkO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQnV0dG9uLFxuICBGb3JtR3JvdXAsXG4gIExhYmVsLFxuICBJbnB1dCxcbiAgRm9ybVRleHQsXG4gIEJhZGdlLFxuICBJbnB1dEdyb3VwLFxuICBJbnB1dEdyb3VwQWRkb24sXG59IGZyb20gJ3JlYWN0c3RyYXAnO1xuXG5pbXBvcnQgeyB1c2VGaWVsZCB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICcuL0Zvcm1GaWVsZC5zY3NzJztcblxuLyoqIEEgbGltaXRlZC1jaG9pY2Ugd3JhcHBlciBmb3IgYEZvcm1GaWVsZGAgKi9cbmNvbnN0IEZvcm1GaWVsZFdyYXBwZXIgPSAoeyBjaGlsZHJlbiwgdHlwZSB9KSA9PiB7XG4gIGxldCB3cmFwcGVyO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0lucHV0R3JvdXAnOlxuICAgICAgd3JhcHBlciA9IDxJbnB1dEdyb3VwPntjaGlsZHJlbn08L0lucHV0R3JvdXA+O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdGb3JtR3JvdXAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICB3cmFwcGVyID0gPEZvcm1Hcm91cD57Y2hpbGRyZW59PC9Gb3JtR3JvdXA+O1xuICB9XG5cbiAgcmV0dXJuIHdyYXBwZXI7XG59O1xuRm9ybUZpZWxkV3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gIC8qKiBUaGUgY29udGVudCBmb3IgdGhlIHdyYXBwZXIgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIC8qKiBXaGljaCB3cmFwcGVyIHRvIHVzZSAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydJbnB1dEdyb3VwJywgJ0Zvcm1Hcm91cCcsICcnXSksXG59O1xuRm9ybUZpZWxkV3JhcHBlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdGb3JtR3JvdXAnLFxufTtcblxuLyoqXG4gKiBBIHN0YW5kYXJkIGZvcm0gZmllbGQgdGhhdCBzdXBwb3J0cyBzb21lIGN1c3RvbWl6YXRpb24gYW5kIHByZXNldHMuXG4gKlxuICogQ3VzdG9taXphdGlvbnM6XG4gKiAtIHByb3ZpZGluZyBhbiBgPElucHV0R3JvdXBBZGRvbj5gIChjYW4gbm90IHVzZSB3aXRoIFwiQWdhdmUgRmlsZSBTZWxlY3RvclwiKVxuICpcbiAqIFByZXNldHM6XG4gKiAtIEFnYXZlIEZpbGUgU2VsZWN0b3IgKHJlcXVpcmVzIGBhZ2F2ZUZpbGVgIGFuZCBgU2VsZWN0TW9kYWxgKVxuICovXG5jb25zdCBGb3JtRmllbGQgPSAoe1xuICBhZGRvbixcbiAgYWRkb25UeXBlLFxuICBsYWJlbCxcbiAgZGVzY3JpcHRpb24sXG4gIHJlcXVpcmVkLFxuICBhZ2F2ZUZpbGUsXG4gIFNlbGVjdE1vZGFsLFxuICAuLi5wcm9wc1xufSkgPT4ge1xuICAvLyB1c2VGaWVsZCgpIHJldHVybnMgW2Zvcm1pay5nZXRGaWVsZFByb3BzKCksIGZvcm1pay5nZXRGaWVsZE1ldGEoKV1cbiAgLy8gd2hpY2ggd2UgY2FuIHNwcmVhZCBvbiA8aW5wdXQ+IGFuZCBhbHNvIHJlcGxhY2UgRXJyb3JNZXNzYWdlIGVudGlyZWx5LlxuICBjb25zdCBbZmllbGQsIG1ldGEsIGhlbHBlcnNdID0gdXNlRmllbGQocHJvcHMpO1xuICBjb25zdCBbb3BlbkFnYXZlRmlsZU1vZGFsLCBzZXRPcGVuQWdhdmVGaWxlTW9kYWxdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCB7IGlkLCBuYW1lIH0gPSBwcm9wcztcbiAgY29uc3QgaGFzQWRkb24gPSBhZGRvbiAhPT0gdW5kZWZpbmVkO1xuICBjb25zdCB3cmFwcGVyVHlwZSA9IGhhc0FkZG9uID8gJ0lucHV0R3JvdXAnIDogJyc7XG5cbiAgY29uc3QgRmllbGRMYWJlbCA9ICgpID0+IChcbiAgICAvKiAhISE6IFRlbXBvcmFyeSBleHRyYSBtYXJrdXAgdG8gbWFrZSBzaW1wbGVyIFBSIGRpZmYgKi9cbiAgICA8PlxuICAgICAgPExhYmVsXG4gICAgICAgIGNsYXNzTmFtZT1cImZvcm0tZmllbGRfX2xhYmVsXCJcbiAgICAgICAgZm9yPXtpZCB8fCBuYW1lfVxuICAgICAgICBzaXplPVwic21cIlxuICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19XG4gICAgICA+XG4gICAgICAgIHtsYWJlbH17JyAnfVxuICAgICAgICB7cmVxdWlyZWQgPyAoXG4gICAgICAgICAgPEJhZGdlIGNvbG9yPVwiZGFuZ2VyXCIgc3R5bGU9e3sgbWFyZ2luTGVmdDogJzEwcHgnIH19PlxuICAgICAgICAgICAgUmVxdWlyZWRcbiAgICAgICAgICA8L0JhZGdlPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvTGFiZWw+XG4gICAgPC8+XG4gICk7XG4gIGNvbnN0IEZpZWxkTm90ZSA9ICgpID0+IChcbiAgICA8PlxuICAgICAge21ldGEudG91Y2hlZCAmJiBtZXRhLmVycm9yID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZmllbGRfX3ZhbGlkYXRpb24tZXJyb3JcIj57bWV0YS5lcnJvcn08L2Rpdj5cbiAgICAgICkgOiAoXG4gICAgICAgIGRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICA8Rm9ybVRleHQgY2xhc3NOYW1lPVwiZm9ybS1maWVsZF9faGVscFwiIGNvbG9yPVwibXV0ZWRcIj5cbiAgICAgICAgICAgIHtkZXNjcmlwdGlvbn1cbiAgICAgICAgICA8L0Zvcm1UZXh0PlxuICAgICAgICApXG4gICAgICApfVxuICAgIDwvPlxuICApO1xuXG4gIC8vIEFsbG93aW5nIGluZWZmZWN0dWFsIHByb3AgY29tYmluYXRpb25zIHdvdWxkIGxlYWQgdG8gY29uZnVzaW9uXG4gIGlmIChhZGRvbiAmJiBhZ2F2ZUZpbGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnWW91IG11c3Qgbm90IHBhc3MgYGFkZG9uYCBhbmQgYGFnYXZlRmlsZWAsIGJlY2F1c2UgYGFnYXZlRmlsZWAgdHJpZ2dlcnMgaXRzIG93biBmaWVsZCBhZGQtb24nXG4gICAgKTtcbiAgfVxuICBpZiAoKCFhZ2F2ZUZpbGUgJiYgU2VsZWN0TW9kYWwpIHx8IChhZ2F2ZUZpbGUgJiYgIVNlbGVjdE1vZGFsKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQW4gYGFnYXZlRmlsZWAgYW5kIGEgYFNlbGVjdE1vZGFsYCBtdXN0IGJvdGggYmUgcGFzc2VkJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIC8qICEhITogVGVtcG9yYXJ5IGJhZCBpbmRlbnRhdGlvbiB0byBtYWtlIHNpbXBsZXIgUFIgZGlmZiAqL1xuICAgIC8qIGVzbGludC1kaXNhYmxlIHByZXR0aWVyL3ByZXR0aWVyICovXG4gICAgPD5cbiAgICB7bGFiZWwgJiYgaGFzQWRkb24gPyA8RmllbGRMYWJlbCAvPiA6IG51bGx9XG4gICAgPEZvcm1GaWVsZFdyYXBwZXIgdHlwZT17d3JhcHBlclR5cGV9PlxuICAgICAge2xhYmVsICYmICFoYXNBZGRvbiA/IDxGaWVsZExhYmVsIC8+IDogbnVsbH1cbiAgICAgIHthZ2F2ZUZpbGUgPyAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPFNlbGVjdE1vZGFsXG4gICAgICAgICAgICBpc09wZW49e29wZW5BZ2F2ZUZpbGVNb2RhbH1cbiAgICAgICAgICAgIHRvZ2dsZT17KCkgPT4ge1xuICAgICAgICAgICAgICBzZXRPcGVuQWdhdmVGaWxlTW9kYWwocHJldlN0YXRlID0+ICFwcmV2U3RhdGUpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uU2VsZWN0PXsoc3lzdGVtLCBwYXRoKSA9PiB7XG4gICAgICAgICAgICAgIGhlbHBlcnMuc2V0VmFsdWUoYGFnYXZlOi8vJHtzeXN0ZW19JHtwYXRofWApO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPElucHV0R3JvdXA+XG4gICAgICAgICAgICA8SW5wdXRHcm91cEFkZG9uIGFkZG9uVHlwZT1cInByZXBlbmRcIj5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE9wZW5BZ2F2ZUZpbGVNb2RhbCh0cnVlKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFNlbGVjdFxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvSW5wdXRHcm91cEFkZG9uPlxuICAgICAgICAgICAgPElucHV0IHsuLi5maWVsZH0gey4uLnByb3BzfSBic1NpemU9XCJzbVwiIC8+XG4gICAgICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiAoXG4gICAgICAgIC8qICEhITogVGVtcG9yYXJ5IGJhZCBpbmRlbnRhdGlvbiB0byBtYWtlIHNpbXBsZXIgUFIgZGlmZiAqL1xuICAgICAgICA8PlxuICAgICAgICB7aGFzQWRkb24gJiYgYWRkb25UeXBlID09PSAncHJlcGVuZCcgPyBhZGRvbiA6IG51bGx9XG4gICAgICAgIDxJbnB1dCB7Li4uZmllbGR9IHsuLi5wcm9wc30gYnNTaXplPVwic21cIiAvPlxuICAgICAgICB7aGFzQWRkb24gJiYgYWRkb25UeXBlID09PSAnYXBwZW5kJyA/IGFkZG9uIDogbnVsbH1cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAgeyFoYXNBZGRvbiA/IDxGaWVsZE5vdGUgLz4gOiBudWxsfVxuICAgIDwvRm9ybUZpZWxkV3JhcHBlcj5cbiAgICB7aGFzQWRkb24gPyA8RmllbGROb3RlIC8+IDogbnVsbH1cbiAgICA8Lz5cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHByZXR0aWVyL3ByZXR0aWVyICovXG4gICk7XG59O1xuRm9ybUZpZWxkLnByb3BUeXBlcyA9IHtcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5XSksXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWdhdmVGaWxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgU2VsZWN0TW9kYWw6IFByb3BUeXBlcy5mdW5jLFxuICAvKiogQW4gW2A8SW5wdXRHcm91cEFkZG9uPmBdKGh0dHBzOi8vcmVhY3RzdHJhcC5naXRodWIuaW8vY29tcG9uZW50cy9pbnB1dC1ncm91cC8pIHRvIGFkZCAqL1xuICBhZGRvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKiBUaGUgW2A8SW5wdXRHcm91cEFkZG9uPmAgYGFkZG9uVHlwZWBdKGh0dHBzOi8vcmVhY3RzdHJhcC5naXRodWIuaW8vY29tcG9uZW50cy9pbnB1dC1ncm91cC8pIHRvIGFkZCAqL1xuICBhZGRvblR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ3ByZXBlbmQnLCAnYXBwZW5kJ10pLFxufTtcbkZvcm1GaWVsZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGlkOiB1bmRlZmluZWQsXG4gIG5hbWU6IHVuZGVmaW5lZCxcbiAgbGFiZWw6IHVuZGVmaW5lZCxcbiAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuICBhZ2F2ZUZpbGU6IHVuZGVmaW5lZCxcbiAgU2VsZWN0TW9kYWw6IHVuZGVmaW5lZCxcbiAgYWRkb246IHVuZGVmaW5lZCxcbiAgYWRkb25UeXBlOiB1bmRlZmluZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtRmllbGQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVGFibGUgfSBmcm9tICdyZWFjdC10YWJsZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IExvYWRpbmdTcGlubmVyIGZyb20gJy4uL0xvYWRpbmdTcGlubmVyJztcbmltcG9ydCAnLi9JbmZpbml0ZVNjcm9sbFRhYmxlLnNjc3MnO1xuXG5jb25zdCByb3dDb250ZW50UHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgUHJvcFR5cGVzLnN0cmluZyxcbiAgUHJvcFR5cGVzLmVsZW1lbnQsXG4gIFByb3BUeXBlcy5vbmVPZihbUmVhY3QuRnJhZ21lbnRdKSxcbl0pO1xuXG5jb25zdCBJbmZpbml0ZVNjcm9sbExvYWRpbmdSb3cgPSAoeyBpc0xvYWRpbmcgfSkgPT4ge1xuICBpZiAoIWlzTG9hZGluZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAoXG4gICAgPHRyIGNsYXNzTmFtZT1cIi1zdGF0dXNcIj5cbiAgICAgIDx0ZD5cbiAgICAgICAgPExvYWRpbmdTcGlubmVyIHBsYWNlbWVudD1cImlubGluZVwiIC8+XG4gICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICk7XG59O1xuSW5maW5pdGVTY3JvbGxMb2FkaW5nUm93LnByb3BUeXBlcyA9IHtcbiAgaXNMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxufTtcblxuY29uc3QgSW5maW5pdGVTY3JvbGxOb0RhdGFSb3cgPSAoeyBkaXNwbGF5LCBub0RhdGFUZXh0IH0pID0+IHtcbiAgaWYgKCFkaXNwbGF5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8dHIgY2xhc3NOYW1lPVwiLXN0YXR1c1wiPlxuICAgICAgPHRkPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCItc3RhdHVzX19tZXNzYWdlXCI+e25vRGF0YVRleHR9PC9zcGFuPlxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufTtcbkluZmluaXRlU2Nyb2xsTm9EYXRhUm93LnByb3BUeXBlcyA9IHtcbiAgZGlzcGxheTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgbm9EYXRhVGV4dDogcm93Q29udGVudFByb3BUeXBlLmlzUmVxdWlyZWQsXG59O1xuXG5jb25zdCBJbmZpbml0ZVNjcm9sbFRhYmxlID0gKHtcbiAgdGFibGVDb2x1bW5zLFxuICB0YWJsZURhdGEsXG4gIG9uSW5maW5pdGVTY3JvbGwsXG4gIGlzTG9hZGluZyxcbiAgY2xhc3NOYW1lLFxuICBub0RhdGFUZXh0LFxuICBnZXRSb3dQcm9wcyxcbiAgY29sdW1uTWVtb1Byb3BzLFxufSkgPT4ge1xuICBjb25zdCBjb2x1bW5zID0gUmVhY3QudXNlTWVtbygoKSA9PiB0YWJsZUNvbHVtbnMsIGNvbHVtbk1lbW9Qcm9wcyk7XG4gIGNvbnN0IGRhdGEgPSBSZWFjdC51c2VNZW1vKCgpID0+IHRhYmxlRGF0YSwgW3RhYmxlRGF0YV0pO1xuXG4gIGNvbnN0IHsgZ2V0VGFibGVQcm9wcywgZ2V0VGFibGVCb2R5UHJvcHMsIGhlYWRlckdyb3Vwcywgcm93cywgcHJlcGFyZVJvdyB9ID1cbiAgICB1c2VUYWJsZSh7IGNvbHVtbnMsIGRhdGEgfSk7XG4gIGNvbnN0IG9uU2Nyb2xsID0gKHsgdGFyZ2V0IH0pID0+IHtcbiAgICBjb25zdCBib3R0b20gPVxuICAgICAgdGFyZ2V0LnNjcm9sbEhlaWdodCAtIHRhcmdldC5zY3JvbGxUb3AgPT09IHRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgaWYgKGJvdHRvbSAmJiB0YXJnZXQuc2Nyb2xsVG9wID4gMCkge1xuICAgICAgb25JbmZpbml0ZVNjcm9sbCh0YWJsZURhdGEubGVuZ3RoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8dGFibGUgey4uLmdldFRhYmxlUHJvcHMoKX0gY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IEluZmluaXRlU2Nyb2xsVGFibGVgfT5cbiAgICAgIDx0aGVhZD5cbiAgICAgICAge2hlYWRlckdyb3Vwcy5tYXAoKGhlYWRlckdyb3VwKSA9PiAoXG4gICAgICAgICAgPHRyIHsuLi5oZWFkZXJHcm91cC5nZXRIZWFkZXJHcm91cFByb3BzKCl9PlxuICAgICAgICAgICAge2hlYWRlckdyb3VwLmhlYWRlcnMubWFwKChjb2x1bW4pID0+IChcbiAgICAgICAgICAgICAgPHRoIHsuLi5jb2x1bW4uZ2V0SGVhZGVyUHJvcHMoKX0+e2NvbHVtbi5yZW5kZXIoJ0hlYWRlcicpfTwvdGg+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3RyPlxuICAgICAgICApKX1cbiAgICAgIDwvdGhlYWQ+XG4gICAgICA8dGJvZHkgey4uLmdldFRhYmxlQm9keVByb3BzKCl9IG9uU2Nyb2xsPXtvblNjcm9sbH0+XG4gICAgICAgIHtyb3dzLm1hcCgocm93KSA9PiB7XG4gICAgICAgICAgcHJlcGFyZVJvdyhyb3cpO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dHIgey4uLnJvdy5nZXRSb3dQcm9wcygpfSB7Li4uZ2V0Um93UHJvcHMocm93KX0+XG4gICAgICAgICAgICAgIHtyb3cuY2VsbHMubWFwKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgICAgICAgICB7Li4uY2VsbC5nZXRDZWxsUHJvcHMoeyBjbGFzc05hbWU6IGNlbGwuY29sdW1uLmNsYXNzTmFtZSB9KX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2NlbGwucmVuZGVyKCdDZWxsJyl9XG4gICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgICAgPEluZmluaXRlU2Nyb2xsTG9hZGluZ1JvdyBpc0xvYWRpbmc9e2lzTG9hZGluZ30gLz5cbiAgICAgICAgPEluZmluaXRlU2Nyb2xsTm9EYXRhUm93XG4gICAgICAgICAgZGlzcGxheT17IWlzTG9hZGluZyAmJiB0YWJsZURhdGEubGVuZ3RoID09PSAwfVxuICAgICAgICAgIG5vRGF0YVRleHQ9e25vRGF0YVRleHR9XG4gICAgICAgIC8+XG4gICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG4gICk7XG59O1xuXG5JbmZpbml0ZVNjcm9sbFRhYmxlLnByb3BUeXBlcyA9IHtcbiAgdGFibGVDb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe30pKS5pc1JlcXVpcmVkLFxuICB0YWJsZURhdGE6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7fSkpLmlzUmVxdWlyZWQsXG4gIG9uSW5maW5pdGVTY3JvbGw6IFByb3BUeXBlcy5mdW5jLFxuICBpc0xvYWRpbmc6IFByb3BUeXBlcy5ib29sLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5vRGF0YVRleHQ6IHJvd0NvbnRlbnRQcm9wVHlwZSxcbiAgZ2V0Um93UHJvcHM6IFByb3BUeXBlcy5mdW5jLFxuICBjb2x1bW5NZW1vUHJvcHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hbnkpLFxufTtcbkluZmluaXRlU2Nyb2xsVGFibGUuZGVmYXVsdFByb3BzID0ge1xuICBvbkluZmluaXRlU2Nyb2xsOiAob2Zmc2V0KSA9PiB7fSxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgY2xhc3NOYW1lOiAnJyxcbiAgbm9EYXRhVGV4dDogJycsXG4gIGdldFJvd1Byb3BzOiAocm93KSA9PiB7fSxcbiAgY29sdW1uTWVtb1Byb3BzOiBbXSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEluZmluaXRlU2Nyb2xsVGFibGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAnLi9JY29uLm1vZHVsZS5jc3MnO1xuXG5jb25zdCBJY29uID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgbmFtZSB9KSA9PiB7XG4gIGNvbnN0IGljb25DbGFzc05hbWUgPSBgaWNvbiBpY29uLSR7bmFtZX1gO1xuICAvLyBGQVE6IFRoZSBjb25kaXRpb25hbCBhdm9pZHMgYW4gZXh0cmEgc3BhY2UgaW4gY2xhc3MgYXR0cmlidXRlIHZhbHVlXG4gIGNvbnN0IGZ1bGxDbGFzc05hbWUgPSBjbGFzc05hbWVcbiAgICA/IFtjbGFzc05hbWUsIGljb25DbGFzc05hbWVdLmpvaW4oJyAnKVxuICAgIDogaWNvbkNsYXNzTmFtZTtcbiAgY29uc3QgbGFiZWwgPSBjaGlsZHJlbjtcblxuICByZXR1cm4gPGkgY2xhc3NOYW1lPXtmdWxsQ2xhc3NOYW1lfSByb2xlPVwiaW1nXCIgYXJpYS1sYWJlbD17bGFiZWx9IC8+O1xufTtcbkljb24ucHJvcFR5cGVzID0ge1xuICAvKiogQSB0ZXh0IGFsdGVybmF0aXZlIHRvIHRoZSBpY29uIChmb3IgYWNjZXNzaWJpbGl0eSkgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzTmFtZSBmb3IgdGhlIHJvb3QgZWxlbWVudCAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBOYW1lIG9mIGljb24gZnJvbSBpY29uIGZvbnQgKHdpdGhvdXQgdGhlIChgaWNvbi1gIHByZWZpeCkgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcbkljb24uZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogJycsXG4gIGNsYXNzTmFtZTogJycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uO1xuIiwiaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJztcblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCAnLi9BcHBJY29uLnNjc3MnO1xuXG5jb25zdCBBcHBJY29uID0gKHsgYXBwSWQgfSkgPT4ge1xuICBjb25zdCBhcHBJY29ucyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXBwcy5hcHBJY29ucyk7XG4gIGNvbnN0IGZpbmRBcHBJY29uID0gKGlkKSA9PiB7XG4gICAgbGV0IGFwcEljb24gPSAnYXBwbGljYXRpb25zJztcbiAgICBPYmplY3Qua2V5cyhhcHBJY29ucykuZm9yRWFjaCgoYXBwTmFtZSkgPT4ge1xuICAgICAgaWYgKGlkLmluY2x1ZGVzKGFwcE5hbWUpKSB7XG4gICAgICAgIGFwcEljb24gPSBhcHBJY29uc1thcHBOYW1lXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhcHBJY29uO1xuICB9O1xuICBjb25zdCBpY29uTmFtZSA9IGZpbmRBcHBJY29uKGFwcElkKTtcblxuICByZXR1cm4gPEljb24gbmFtZT17aWNvbk5hbWV9IC8+O1xufTtcbkFwcEljb24ucHJvcFR5cGVzID0ge1xuICBhcHBJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwSWNvbjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgQ2FyZEhlYWRlciwgQ2FyZEJvZHksIENhcmQsIENvbGxhcHNlIH0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCAnLi9FeHBhbmQuZ2xvYmFsLnNjc3MnO1xuaW1wb3J0ICcuL0V4cGFuZC5tb2R1bGUuc2Nzcyc7XG5cbmNvbnN0IEV4cGFuZCA9ICh7IGNsYXNzTmFtZSwgZGV0YWlsLCBtZXNzYWdlIH0pID0+IHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgdG9nZ2xlQ2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNPcGVuKCFpc09wZW4pO1xuICB9LCBbaXNPcGVuLCBzZXRJc09wZW5dKTtcblxuICAvLyBUT0RPOiBVc2UgYGRldGFpbHMvc3VtbWFyeWAgdGFncywgd2hlbiBgb25Ub2dnbGVgIHN1cHBvcnQgaXMgXCJsYXN0IDIgdmVyc2lvbnNcIlxuICAvLyBTRUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTU0ODYjaXNzdWVjb21tZW50LTY2OTY3NDg2OVxuICByZXR1cm4gKFxuICAgIDxDYXJkIHN0eWxlTmFtZT1cImNvbnRhaW5lclwiIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB0YWc9XCJkaXZcIj5cbiAgICAgIDxDYXJkSGVhZGVyIHN0eWxlTmFtZT1cInN1bW1hcnlcIiBvbkNsaWNrPXt0b2dnbGVDYWxsYmFja30gdGFnPVwiZGl2XCI+XG4gICAgICAgIDxzdHJvbmcgc3R5bGVOYW1lPVwiaGVhZGVyXCI+e2RldGFpbH08L3N0cm9uZz5cbiAgICAgICAgPEljb24gbmFtZT17aXNPcGVuID8gJ2NvbGxhcHNlJyA6ICdleHBhbmQnfSAvPlxuICAgICAgPC9DYXJkSGVhZGVyPlxuICAgICAgPENvbGxhcHNlIGlzT3Blbj17aXNPcGVufT5cbiAgICAgICAgPENhcmRCb2R5PnttZXNzYWdlfTwvQ2FyZEJvZHk+XG4gICAgICA8L0NvbGxhcHNlPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn07XG5cbkV4cGFuZC5wcm9wVHlwZXMgPSB7XG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzTmFtZSBmb3IgdGhlIHJvb3QgZWxlbWVudCAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgZGV0YWlsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxufTtcbkV4cGFuZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogJycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFeHBhbmQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEZhZGUgfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuXG5pbXBvcnQgJy4vTWVzc2FnZS5tb2R1bGUuc2Nzcyc7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9URVhUID0ge1xuICBtaXNtYXRjaENhbkRpc21pc3NTY29wZTpcbiAgICAnRm9yIGEgPChTZWN0aW9uKU1lc3NhZ2U+IHRvIHVzZSBgY2FuRGlzbWlzc2AsIGBzY29wZWAgbXVzdCBlcXVhbCBgc2VjdGlvbmAuJyxcbiAgZGVwcmVjYXRlZFR5cGU6XG4gICAgJ0luIGEgPChTZWN0aW9ufElubGluZSlNZXNzYWdlPiBgdHlwZT1cIndhcm5cImAgaXMgZGVwcmVjYXRlZC4gVXNlIGB0eXBlPVwid2FybmluZ1wiYCBpbnN0ZWFkLicsXG4gIG1pc3NpbmdTY29wZTpcbiAgICAnQSA8TWVzc2FnZT4gd2l0aG91dCBhIGBzY29wZWAgc2hvdWxkIGJlY29tZSBhbiA8SW5saW5lTWVzc2FnZT4uIChJZiA8TWVzc2FnZT4gbXVzdCBiZSB1c2VkLCB0aGVuIGV4cGxpY2l0ZWx5IHNldCBgc2NvcGU9XCJpbmxpbmVcImAuKScsXG59O1xuXG5leHBvcnQgY29uc3QgVFlQRV9NQVAgPSB7XG4gIGluZm86IHtcbiAgICBpY29uTmFtZTogJ2NvbnZlcnNhdGlvbicsXG4gICAgY2xhc3NOYW1lOiAnaXMtaW5mbycsXG4gICAgaWNvblRleHQ6ICdOb3RpY2UnLFxuICB9LFxuICBzdWNjZXNzOiB7XG4gICAgaWNvbk5hbWU6ICdhcHByb3ZlZC1yZXZlcnNlJyxcbiAgICBjbGFzc05hbWU6ICdpcy1zdWNjZXNzJyxcbiAgICBpY29uVGV4dDogJ05vdGljZScsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBpY29uTmFtZTogJ2FsZXJ0JyxcbiAgICBjbGFzc05hbWU6ICdpcy13YXJuJyxcbiAgICBpY29uVGV4dDogJ1dhcm5pbmcnLFxuICB9LFxuICBlcnJvcjoge1xuICAgIGljb25OYW1lOiAnYWxlcnQnLFxuICAgIGNsYXNzTmFtZTogJ2lzLWVycm9yJyxcbiAgICBpY29uVGV4dDogJ0Vycm9yJyxcbiAgfSxcbn07XG5UWVBFX01BUC53YXJuID0gVFlQRV9NQVAud2FybmluZzsgLy8gRkFROiBEZXByZWNhdGVkIHN1cHBvcnQgZm9yIGB0eXBlPVwid2FyblwiYFxuZXhwb3J0IGNvbnN0IFRZUEVTID0gT2JqZWN0LmtleXMoVFlQRV9NQVApO1xuXG5leHBvcnQgY29uc3QgU0NPUEVfTUFQID0ge1xuICBpbmxpbmU6IHtcbiAgICBjbGFzc05hbWU6ICdpcy1zY29wZS1pbmxpbmUnLFxuICAgIHJvbGU6ICdzdGF0dXMnLFxuICAgIHRhZ05hbWU6ICdzcGFuJyxcbiAgfSxcbiAgc2VjdGlvbjoge1xuICAgIGNsYXNzTmFtZTogJ2lzLXNjb3BlLXNlY3Rpb24nLFxuICAgIHJvbGU6ICdzdGF0dXMnLFxuICAgIHRhZ05hbWU6ICdwJyxcbiAgfSxcbiAgLy8gYXBwOiB7IOKApiB9IC8vIEZBUTogRG8gbm90IHVzZTsgaW5zdGVhZCwgdXNlIGEgPE5vdGlmaWNhdGlvblRvYXN0PlxufTtcbmV4cG9ydCBjb25zdCBTQ09QRVMgPSBbJycsIC4uLk9iamVjdC5rZXlzKFNDT1BFX01BUCldO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0NPUEUgPSAnaW5saW5lJzsgLy8gRkFROiBIaXN0b3JpY2FsIHN1cHBvcnQgZm9yIGRlZmF1bHRcblxuLyoqXG4gKiBTaG93IGFuIGV2ZW50LWJhc2VkIG1lc3NhZ2UgdG8gdGhlIHVzZXJcbiAqIEB0b2RvIERvY3VtZW50IGV4YW1wbGVzXG4gKiBAZXhhbXBsZVxuICogLy8gQmxhaCBibGFo4oCmXG4gKiA8U2FtcGxlIGpzeD5cbiAqL1xuY29uc3QgTWVzc2FnZSA9ICh7XG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIG9uRGlzbWlzcyxcbiAgY2FuRGlzbWlzcyxcbiAgaXNWaXNpYmxlLFxuICBzY29wZSxcbiAgdHlwZSxcbn0pID0+IHtcbiAgY29uc3QgdHlwZU1hcCA9IFRZUEVfTUFQW3R5cGVdO1xuICBjb25zdCBzY29wZU1hcCA9IFNDT1BFX01BUFtzY29wZSB8fCBERUZBVUxUX1NDT1BFXTtcbiAgY29uc3QgeyBpY29uTmFtZSwgaWNvblRleHQsIGNsYXNzTmFtZTogdHlwZUNsYXNzTmFtZSB9ID0gdHlwZU1hcDtcbiAgY29uc3QgeyByb2xlLCB0YWdOYW1lLCBjbGFzc05hbWU6IHNjb3BlQ2xhc3NOYW1lIH0gPSBzY29wZU1hcDtcblxuICBjb25zdCBoYXNEaXNtaXNzU3VwcG9ydCA9IHNjb3BlID09PSAnc2VjdGlvbic7XG5cbiAgLy8gTWFuYWdlIHByb3Agd2FybmluZ3NcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAoY2FuRGlzbWlzcyAmJiAhaGFzRGlzbWlzc1N1cHBvcnQpIHtcbiAgICAvLyBDb21wb25lbnQgd2lsbCB3b3JrLCBleGNlcHQgYGNhbkRpc21pc3NgIGlzIGluZWZmZWN0dWFsXG4gICAgY29uc29sZS5lcnJvcihFUlJPUl9URVhULm1pc21hdGNoQ2FuRGlzbWlzc1Njb3BlKTtcbiAgfVxuICBpZiAodHlwZSA9PT0gJ3dhcm4nKSB7XG4gICAgLy8gQ29tcG9uZW50IHdpbGwgd29yaywgYnV0IGB3YXJuYCBpcyBkZXByZWNhdGVkIHZhbHVlXG4gICAgY29uc29sZS5pbmZvKEVSUk9SX1RFWFQuZGVwcmVjYXRlZFR5cGUpO1xuICB9XG4gIGlmICghc2NvcGUpIHtcbiAgICAvLyBDb21wb25lbnQgd2lsbCB3b3JrLCBidXQgYHNjb3BlYCBzaG91bGQgYmUgZGVmaW5lZFxuICAgIGNvbnNvbGUuaW5mbyhFUlJPUl9URVhULm1pc3NpbmdTY29wZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cbiAgLy8gTWFuYWdlIGNsYXNzIG5hbWVzXG4gIGNvbnN0IG1vZGlmaWVyQ2xhc3NOYW1lcyA9IFtdO1xuICBtb2RpZmllckNsYXNzTmFtZXMucHVzaCh0eXBlQ2xhc3NOYW1lKTtcbiAgbW9kaWZpZXJDbGFzc05hbWVzLnB1c2goc2NvcGVDbGFzc05hbWUpO1xuICBjb25zdCBjb250YWluZXJTdHlsZU5hbWVzID0gWydjb250YWluZXInLCAuLi5tb2RpZmllckNsYXNzTmFtZXNdLmpvaW4oJyAnKTtcblxuICAvLyBNYW5hZ2UgZGlzYXBwZWFyYW5jZVxuICAvLyBGQVE6IERlc2lnbiBkb2VzIG5vdCB3YW50IGZhZGUsIGJ1dCB3ZSBzdGlsbCB1c2UgPEZhZGU+IHRvIG1hbmFnZSBkaXNtaXNzYWxcbiAgLy8gVE9ETzogQ29uc2lkZXIgcmVwbGFjaW5nIDxGYWRlPiB3aXRoIGEgcmVwbGljYXRpb24gb2YgYHVubW91bnRPbkV4aXQ6IHRydWVgXG4gIGNvbnN0IHNob3VsZEZhZGUgPSBmYWxzZTtcbiAgY29uc3QgZmFkZVByb3BzID0ge1xuICAgIC4uLkZhZGUuZGVmYXVsdFByb3BzLFxuICAgIHVubW91bnRPbkV4aXQ6IHRydWUsXG4gICAgYmFzZUNsYXNzOiBzaG91bGRGYWRlID8gRmFkZS5kZWZhdWx0UHJvcHMuYmFzZUNsYXNzIDogJycsXG4gICAgdGltZW91dDogc2hvdWxkRmFkZSA/IEZhZGUuZGVmYXVsdFByb3BzLnRpbWVvdXQgOiAwLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZhZGVcbiAgICAgIC8vIEF2b2lkIG1hbnVhbGx5IHN5bmNpbmcgUmVhY3RzdHJhcCA8RmFkZT4ncyBkZWZhdWx0IHByb3BzXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LXByb3BzLW5vLXNwcmVhZGluZ1xuICAgICAgey4uLmZhZGVQcm9wc31cbiAgICAgIHRhZz17dGFnTmFtZX1cbiAgICAgIHN0eWxlTmFtZT17Y29udGFpbmVyU3R5bGVOYW1lc31cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgcm9sZT17cm9sZX1cbiAgICAgIGluPXtpc1Zpc2libGV9XG4gICAgPlxuICAgICAgPEljb24gc3R5bGVOYW1lPVwiaWNvbiB0eXBlLWljb25cIiBuYW1lPXtpY29uTmFtZX0+XG4gICAgICAgIHtpY29uVGV4dH1cbiAgICAgIDwvSWNvbj5cbiAgICAgIDxzcGFuIHN0eWxlTmFtZT1cInRleHRcIiBkYXRhLXRlc3RpZD1cInRleHRcIj5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9zcGFuPlxuICAgICAge2NhbkRpc21pc3MgJiYgaGFzRGlzbWlzc1N1cHBvcnQgPyAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBzdHlsZU5hbWU9XCJjbG9zZS1idXR0b25cIlxuICAgICAgICAgIGFyaWEtbGFiZWw9XCJDbG9zZVwiXG4gICAgICAgICAgb25DbGljaz17b25EaXNtaXNzfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb24gc3R5bGVOYW1lPVwiaWNvbiBjbG9zZS1pY29uXCIgbmFtZT1cImNsb3NlXCIgLz5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICApIDogbnVsbH1cbiAgICA8L0ZhZGU+XG4gICk7XG59O1xuTWVzc2FnZS5wcm9wVHlwZXMgPSB7XG4gIC8qKiBXaGV0aGVyIGFuIGFjdGlvbiBjYW4gYmUgZGlzbWlzc2VkIChyZXF1aXJlcyBzY29wZSBlcXVhbHMgYHNlY3Rpb25gKSAqL1xuICBjYW5EaXNtaXNzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIE1lc3NhZ2UgdGV4dCAoYXMgY2hpbGQgbm9kZSkgKi9cbiAgLyogRkFROiBXZSBjYW4gc3VwcG9ydCBhbnkgdmFsdWVzLCBldmVuIGEgY29tcG9uZW50ICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLCAvLyBUaGlzIGNoZWNrcyBmb3IgYW55IHJlbmRlci1hYmxlIHZhbHVlXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzTmFtZSBmb3IgdGhlIHJvb3QgZWxlbWVudCAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBXaGV0aGVyIG1lc3NhZ2UgaXMgdmlzaWJsZSAocGFpciB3aXRoIGBvbkRpc21pc3NgKSAqL1xuICBpc1Zpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICAvKiogQWN0aW9uIG9uIG1lc3NhZ2UgZGlzbWlzc2FsIChwYWlyIHdpdGggYGlzVmlzaWJsZWApICovXG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKiBIb3cgdG8gcGxhY2UgdGhlIG1lc3NhZ2Ugd2l0aGluIHRoZSBsYXlvdXQgKi9cbiAgc2NvcGU6IFByb3BUeXBlcy5vbmVPZihTQ09QRVMpLCAvLyBSRkU6IFJlcXVpcmUgc2NvcGU7IGNoYW5nZSBhbGwgaW5zdGFuY2VzXG4gIC8qKiBNZXNzYWdlIHR5cGUgb3Igc2V2ZXJpdHkgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFRZUEVTKS5pc1JlcXVpcmVkLFxufTtcbk1lc3NhZ2UuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBjYW5EaXNtaXNzOiBmYWxzZSxcbiAgaXNWaXNpYmxlOiB0cnVlLFxuICBvbkRpc21pc3M6ICgpID0+IHt9LFxuICBzY29wZTogJycsIC8vIFJGRTogUmVxdWlyZSBzY29wZTsgcmVtb3ZlIHRoaXMgbGluZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZTtcbiIsImltcG9ydCBNZXNzYWdlIGZyb20gJy4vTWVzc2FnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi4vTWVzc2FnZSc7XG5cbi8qKlxuICogU2hvdyBhbiBldmVudC1iYXNlZCBtZXNzYWdlIHRvIHRoZSB1c2VyXG4gKiBAdG9kbyBEb2N1bWVudCBleGFtcGxlc1xuICogQGV4YW1wbGVcbiAqIC8vIEJsYWggYmxhaOKAplxuICogPFNhbXBsZSBqc3g+XG4gKi9cbmNvbnN0IElubGluZU1lc3NhZ2UgPSAocHJvcHMpID0+IHtcbiAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBwcm9wc1xuICBjb25zdCBtZXNzYWdlUHJvcHMgPSB7XG4gICAgLi4uTWVzc2FnZS5kZWZhdWx0UHJvcHMsXG4gICAgLi4ucHJvcHMsXG4gICAgY2FuRGlzbWlzczogZmFsc2UsXG4gICAgc2NvcGU6ICdpbmxpbmUnLFxuICB9O1xuXG4gIC8vIEF2b2lkIG1hbnVhbGx5IHN5bmNpbmcgPE1lc3NhZ2U+J3MgcHJvcHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1wcm9wcy1uby1zcHJlYWRpbmdcbiAgcmV0dXJuIDxNZXNzYWdlIHsuLi5tZXNzYWdlUHJvcHN9IC8+O1xufTtcbklubGluZU1lc3NhZ2UucHJvcFR5cGVzID0gTWVzc2FnZS5wcm9wVHlwZXM7XG5JbmxpbmVNZXNzYWdlLmRlZmF1bHRQcm9wcyA9IE1lc3NhZ2UuZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBJbmxpbmVNZXNzYWdlO1xuIiwiaW1wb3J0IElubGluZU1lc3NhZ2UgZnJvbSAnLi9JbmxpbmVNZXNzYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgSW5saW5lTWVzc2FnZTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi4vTWVzc2FnZSc7XG5cbi8qKlxuICogU2hvdyBhbiBldmVudC1iYXNlZCBtZXNzYWdlIHRvIHRoZSB1c2VyXG4gKiBAdG9kbyBEb2N1bWVudCBleGFtcGxlc1xuICogQGV4YW1wbGVcbiAqIC8vIEJsYWggYmxhaOKAplxuICogPFNhbXBsZSBqc3g+XG4gKi9cbmNvbnN0IFNlY3Rpb25NZXNzYWdlID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IFtpc1Zpc2libGUsIHNldElzVmlzaWJsZV0gPSB1c2VTdGF0ZSh0cnVlKTtcblxuICAvLyBNYW5hZ2UgdmlzaWJpbGl0eVxuICBjb25zdCBvbkRpc21pc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNWaXNpYmxlKCFpc1Zpc2libGUpO1xuICB9LCBbaXNWaXNpYmxlXSk7XG5cbiAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBwcm9wc1xuICBjb25zdCBtZXNzYWdlUHJvcHMgPSB7XG4gICAgLi4uTWVzc2FnZS5kZWZhdWx0UHJvcHMsXG4gICAgLi4ucHJvcHMsXG4gICAgaXNWaXNpYmxlLFxuICAgIG9uRGlzbWlzcyxcbiAgICBzY29wZTogJ3NlY3Rpb24nLFxuICB9O1xuXG4gIC8vIEF2b2lkIG1hbnVhbGx5IHN5bmNpbmcgPE1lc3NhZ2U+J3MgcHJvcHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1wcm9wcy1uby1zcHJlYWRpbmdcbiAgcmV0dXJuIDxNZXNzYWdlIHsuLi5tZXNzYWdlUHJvcHN9IC8+O1xufTtcblNlY3Rpb25NZXNzYWdlLnByb3BUeXBlcyA9IHtcbiAgLi4uTWVzc2FnZS5wcm9wVHlwZXMsXG4gIGlzVmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIG9uRGlzbWlzczogUHJvcFR5cGVzLmZ1bmMsXG59O1xuU2VjdGlvbk1lc3NhZ2UuZGVmYXVsdFByb3BzID0gTWVzc2FnZS5kZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IFNlY3Rpb25NZXNzYWdlO1xuIiwiaW1wb3J0IFNlY3Rpb25NZXNzYWdlIGZyb20gJy4vU2VjdGlvbk1lc3NhZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBTZWN0aW9uTWVzc2FnZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5cbmltcG9ydCAnLi9EZXNjcmlwdGlvbkxpc3QubW9kdWxlLnNjc3MnO1xuXG5leHBvcnQgY29uc3QgRElSRUNUSU9OX0NMQVNTX01BUCA9IHtcbiAgdmVydGljYWw6ICdpcy12ZXJ0JyxcbiAgaG9yaXpvbnRhbDogJ2lzLWhvcnonLFxufTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0RJUkVDVElPTiA9ICd2ZXJ0aWNhbCc7XG5leHBvcnQgY29uc3QgRElSRUNUSU9OUyA9IFsnJywgLi4uT2JqZWN0LmtleXMoRElSRUNUSU9OX0NMQVNTX01BUCldO1xuXG5leHBvcnQgY29uc3QgREVOU0lUWV9DTEFTU19NQVAgPSB7XG4gIGNvbXBhY3Q6ICdpcy1uYXJyb3cnLFxuICBkZWZhdWx0OiAnaXMtd2lkZScsXG59O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfREVOU0lUWSA9ICdkZWZhdWx0JztcbmV4cG9ydCBjb25zdCBERU5TSVRJRVMgPSBbJycsIC4uLk9iamVjdC5rZXlzKERFTlNJVFlfQ0xBU1NfTUFQKV07XG5cbmNvbnN0IERlc2NyaXB0aW9uTGlzdCA9ICh7IGNsYXNzTmFtZSwgZGF0YSwgZGVuc2l0eSwgZGlyZWN0aW9uIH0pID0+IHtcbiAgY29uc3QgbW9kaWZpZXJDbGFzc2VzID0gW107XG4gIG1vZGlmaWVyQ2xhc3Nlcy5wdXNoKERFTlNJVFlfQ0xBU1NfTUFQW2RlbnNpdHkgfHwgREVGQVVMVF9ERU5TSVRZXSk7XG4gIG1vZGlmaWVyQ2xhc3Nlcy5wdXNoKERJUkVDVElPTl9DTEFTU19NQVBbZGlyZWN0aW9uIHx8IERFRkFVTFRfRElSRUNUSU9OXSk7XG4gIGNvbnN0IGNvbnRhaW5lclN0eWxlTmFtZXMgPSBbJ2NvbnRhaW5lcicsIC4uLm1vZGlmaWVyQ2xhc3Nlc10uam9pbignICcpO1xuXG4gIHJldHVybiAoXG4gICAgPGRsXG4gICAgICBzdHlsZU5hbWU9e2NvbnRhaW5lclN0eWxlTmFtZXN9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgIGRhdGEtdGVzdGlkPVwibGlzdFwiXG4gICAgPlxuICAgICAge09iamVjdC5lbnRyaWVzKGRhdGEpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2tleX0+XG4gICAgICAgICAgPGR0IHN0eWxlTmFtZT1cImtleVwiIGRhdGEtdGVzdGlkPVwia2V5XCI+XG4gICAgICAgICAgICB7a2V5fVxuICAgICAgICAgIDwvZHQ+XG4gICAgICAgICAge0FycmF5LmlzQXJyYXkodmFsdWUpID8gKFxuICAgICAgICAgICAgdmFsdWUubWFwKCh2YWwpID0+IChcbiAgICAgICAgICAgICAgPGRkIHN0eWxlTmFtZT1cInZhbHVlXCIgZGF0YS10ZXN0aWQ9XCJ2YWx1ZVwiIGtleT17dXVpZHY0KCl9PlxuICAgICAgICAgICAgICAgIHt2YWx9XG4gICAgICAgICAgICAgIDwvZGQ+XG4gICAgICAgICAgICApKVxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8ZGQgc3R5bGVOYW1lPVwidmFsdWVcIiBkYXRhLXRlc3RpZD1cInZhbHVlXCI+XG4gICAgICAgICAgICAgIHt2YWx1ZX1cbiAgICAgICAgICAgIDwvZGQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICkpfVxuICAgIDwvZGw+XG4gICk7XG59O1xuRGVzY3JpcHRpb25MaXN0LnByb3BUeXBlcyA9IHtcbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3NOYW1lIGZvciB0aGUgcm9vdCBlbGVtZW50ICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIFNlbGVjdG9yIHR5cGUgKi9cbiAgLyogRkFROiBXZSBjYW4gc3VwcG9ydCBhbnkgdmFsdWVzLCBldmVuIGEgY29tcG9uZW50ICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mb3JiaWQtcHJvcC10eXBlc1xuICBkYXRhOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIC8qKiBMYXlvdXQgZGVuc2l0eSAqL1xuICBkZW5zaXR5OiBQcm9wVHlwZXMub25lT2YoREVOU0lUSUVTKSxcbiAgLyoqIExheW91dCBkaXJlY3Rpb24gKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoRElSRUNUSU9OUyksXG59O1xuRGVzY3JpcHRpb25MaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiAnJyxcbiAgZGVuc2l0eTogREVGQVVMVF9ERU5TSVRZLFxuICBkaXJlY3Rpb246IERFRkFVTFRfRElSRUNUSU9OLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVzY3JpcHRpb25MaXN0O1xuIiwiaW1wb3J0IERlc2NyaXB0aW9uTGlzdCBmcm9tICcuL0Rlc2NyaXB0aW9uTGlzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IERlc2NyaXB0aW9uTGlzdDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgSW5wdXQgYXMgQm9vdHN0cmFwSW5wdXQgfSBmcm9tICdyZWFjdHN0cmFwJztcblxuaW1wb3J0ICcuL0Ryb3Bkb3duU2VsZWN0b3IubW9kdWxlLmNzcyc7XG5cbmV4cG9ydCBjb25zdCBUWVBFUyA9IFsnJywgJ3NpbmdsZScsICdtdWx0aXBsZSddO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVFlQRSA9ICdzaW5nbGUnO1xuXG4vLyBSRkU6IFN1cHBvcnQgYG9wdGlvbnNgIG9iamVjdCBwcm9wIGFuZCByZXF1aXJlIGVpdGhlciBgb3B0aW9uc2Agb3IgYGNoaWxkcmVuYCBwcm9wOlxuLy8gICAgICAtIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80OTY4MjUxMC8xMTgxNzA3N1xuLy8gICAgICAtIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MjY2MTM0NC8xMTgxNzA3N1xuLy8gICAgICAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3JlYWN0LWVpdGhlci1wcm9wZXJ0eVxuLy8gICAgICAtIFwiY3VzdG9tUHJvcFwiIGF0IGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy90eXBlY2hlY2tpbmctd2l0aC1wcm9wdHlwZXMuaHRtbCNwcm9wdHlwZXNcblxuY29uc3QgRHJvcGRvd25TZWxlY3RvciA9ICh7IHR5cGUsIG9uQ2hhbmdlLCAuLi5wcm9wcyB9KSA9PiB7XG4gIGNvbnN0IGNhblNlbGVjdE1hbnkgPSB0eXBlID09PSAnbXVsdGlwbGUnO1xuXG4gIHJldHVybiAoXG4gICAgPEJvb3RzdHJhcElucHV0XG4gICAgICAvLyBGQVE6IFRoaXMgaXMgYSBvbmUtb2ZmLCBzbyBpdCBkb2VzIG5vdCBiZWxvbmcgaW4gYC5lc2xpbnRyY2BcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtcHJvcHMtbm8tc3ByZWFkaW5nXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICB0eXBlPVwic2VsZWN0XCJcbiAgICAgIHN0eWxlTmFtZT1cImNvbnRhaW5lclwiXG4gICAgICBtdWx0aXBsZT17Y2FuU2VsZWN0TWFueX1cbiAgICAgIGRhdGEtdGVzdGlkPVwic2VsZWN0b3JcIlxuICAgICAgLy8gVGhlIEFSSUEgcm9sZSBmb3IgYSBgPHNlbGVjdD5gIGlzIGltcGxpY2l0IChhbmQgZGVwZW5kcyBvbiBgPHNlbGVjdD5gIGF0dHJpYnV0ZXMpXG4gICAgICAvLyBTRUU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zZWxlY3QjVGVjaG5pY2FsX3N1bW1hcnlcbiAgICAvPlxuICApO1xufTtcbkRyb3Bkb3duU2VsZWN0b3IucHJvcFR5cGVzID0ge1xuICAvKiogU2VsZWN0b3IgdHlwZSAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2YoVFlQRVMpLFxuICAvKiogU2VsZWN0b3IgdHlwZSAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKiBPcHRpb25zIChhcyBjaGlsZHJlbiwgbGlrZSBSZWFjdHN0cmFwKSAqL1xuICAvLyBGQVE6IExpbWl0aW5nIGFuZCBkb2N1bWVudGluZyB0aGlzIGhhcyBiZWNvbWUgYSByYWJiaXQgaG9sZTsgaGVscCB3ZWxjb21lIOKAlCBXZXMgQlxuICAvLyBjaGlsZHJlbjogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG59O1xuRHJvcGRvd25TZWxlY3Rvci5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6IERFRkFVTFRfVFlQRSxcbiAgb25DaGFuZ2U6ICgpID0+IHt9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25TZWxlY3RvcjtcbiIsImltcG9ydCBEcm9wZG93blNlbGVjdG9yIGZyb20gJy4vRHJvcGRvd25TZWxlY3Rvcic7XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duU2VsZWN0b3I7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbi8qKlxuICogV2hldGhlciB0byBzaG93IGEgd2VsY29tZSBtZXNzYWdlXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgbWVzc2FnZSB0byBjaGVja1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkU2hvd01lc3NhZ2UobWVzc2FnZU5hbWUpIHtcbiAgY29uc3Qgd2VsY29tZU1lc3NhZ2VzID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS53ZWxjb21lTWVzc2FnZXMpO1xuXG4gIHJldHVybiB3ZWxjb21lTWVzc2FnZXMgJiYgd2VsY29tZU1lc3NhZ2VzW21lc3NhZ2VOYW1lXTtcbn1cblxuLyoqXG4gKiBBIG1lc3NhZ2Ugd2hpY2gsIHdoZW4gZGlzbWlzc2VkLCB3aWxsIG5vdCBhcHBlYXIgYWdhaW4gdW5sZXNzIGJyb3dzZXIgc3RvcmFnZSBpcyBjbGVhcmVkXG4gKlxuICogX1RoaXMgbWVzc2FnZSBpcyBkZXNpZ25lZCBmb3IgdXNlciBpbnRyb2R1Y3Rpb24gdG8gc2VjdGlvbnMsIGJ1dCBjYW4gYmUgYWJzdHJhY3RlZCBmdXJ0aGVyIGludG8gYSBgPERpc21pc3NhYmxlTWVzc2FnZT5gIG9yIGFic3RyYWN0ZWQgbGVzcyBzdWNoIHRoYXQgYSBtZXNzYWdlIG5lZWQgbm90IGJlIHBhc3NlZCBpbi5fXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIG1lc3NhZ2Ugd2l0aCBjdXN0b20gdGV4dCwgY2xhc3MsIGFuZCBpZGVudGlmaWVyXG4gKiA8V2VsY29tZU1lc3NhZ2VcbiAqICAgY2xhc3NOYW1lPVwiZXh0ZXJuYWwtbWVzc2FnZS1jbGFzc1wiXG4gKiAgIG1lc3NhZ2VOYW1lPXtpZGVudGlmaWVyRm9yTWVzc2FnZUxpa2VSb3V0ZU5hbWV9XG4gKiA+XG4gKiAgIEludHJvZHVjdG9yeSB0ZXh0IChkZWZpbmVkIGV4dGVybmFsbHkpLlxuICogPC9XZWxjb21lTWVzc2FnZT5cbiAqL1xuZnVuY3Rpb24gV2VsY29tZU1lc3NhZ2UoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBtZXNzYWdlTmFtZSB9KSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgd2VsY29tZU1lc3NhZ2VzID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS53ZWxjb21lTWVzc2FnZXMpO1xuICBjb25zdCBzaG91bGRTaG93ID0gc2hvdWxkU2hvd01lc3NhZ2UobWVzc2FnZU5hbWUpO1xuXG4gIGZ1bmN0aW9uIG9uRGlzbWlzcyhuYW1lKSB7XG4gICAgY29uc3QgbmV3TWVzc2FnZXNTdGF0ZSA9IHtcbiAgICAgIC4uLndlbGNvbWVNZXNzYWdlcyxcbiAgICAgIFtuYW1lXTogZmFsc2UsXG4gICAgfTtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTQVZFX1dFTENPTUUnLCBwYXlsb2FkOiBuZXdNZXNzYWdlc1N0YXRlIH0pO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8QWxlcnRcbiAgICAgIGlzT3Blbj17c2hvdWxkU2hvd31cbiAgICAgIHRvZ2dsZT17KCkgPT4gb25EaXNtaXNzKG1lc3NhZ2VOYW1lKX1cbiAgICAgIGNvbG9yPVwic2Vjb25kYXJ5XCJcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0FsZXJ0PlxuICApO1xufVxuV2VsY29tZU1lc3NhZ2UucHJvcFR5cGVzID0ge1xuICAvKiogTWVzc2FnZSBhcyB0ZXh0IG9yIGVsZW1lbnQocykgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzTmFtZSBmb3IgdGhlIHJvb3QgZWxlbWVudCAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzc2FnZSAqL1xuICBtZXNzYWdlTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcbldlbGNvbWVNZXNzYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiAnJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdlbGNvbWVNZXNzYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgJy4vUGlsbC5tb2R1bGUuc2Nzcyc7XG5cbmZ1bmN0aW9uIFBpbGwoeyBjaGlsZHJlbiwgdHlwZSwgY2xhc3NOYW1lLCBzaG91bGRUcnVuY2F0ZSB9KSB7XG4gIGxldCBwaWxsU3R5bGVOYW1lID0gYHJvb3QgaXMtJHt0eXBlfWA7XG5cbiAgaWYgKHNob3VsZFRydW5jYXRlKSBwaWxsU3R5bGVOYW1lICs9ICcgc2hvdWxkLXRydW5jYXRlJztcblxuICByZXR1cm4gKFxuICAgIDxzcGFuIHN0eWxlTmFtZT17cGlsbFN0eWxlTmFtZX0gY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvc3Bhbj5cbiAgKTtcbn1cblxuUGlsbC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc2hvdWxkVHJ1bmNhdGU6IFByb3BUeXBlcy5ib29sLFxufTtcblxuUGlsbC5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdub3JtYWwnLFxuICBjbGFzc05hbWU6ICcnLFxuICBzaG91bGRUcnVuY2F0ZTogdHJ1ZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBpbGw7XG4iLCJpbXBvcnQgUGlsbCBmcm9tICcuL1BpbGwnO1xuXG5leHBvcnQgZGVmYXVsdCBQaWxsO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvcHlUb0NsaXBib2FyZCB9IGZyb20gJ3JlYWN0LWNvcHktdG8tY2xpcGJvYXJkJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuaW1wb3J0ICcuL1RleHRDb3B5RmllbGQubW9kdWxlLnNjc3MnO1xuXG5jb25zdCBUZXh0Q29weUZpZWxkID0gKHsgdmFsdWUsIHBsYWNlaG9sZGVyIH0pID0+IHtcbiAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gMC4xNTsgLy8gc2Vjb25kKHMpXG4gIGNvbnN0IHN0YXRlRHVyYXRpb24gPSAxOyAvLyBzZWNvbmQocylcbiAgY29uc3Qgc3RhdGVUaW1lb3V0ID0gdHJhbnNpdGlvbkR1cmF0aW9uICsgc3RhdGVEdXJhdGlvbjsgLy8gc2Vjb25kKHMpXG5cbiAgY29uc3QgW2lzQ29waWVkLCBzZXRJc0NvcGllZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qgb25Db3B5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzQ29waWVkKHRydWUpO1xuXG4gICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0SXNDb3BpZWQoZmFsc2UpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIH0sIHN0YXRlVGltZW91dCAqIDEwMDApO1xuICB9LCBbaXNDb3BpZWQsIHNldElzQ29waWVkXSk7XG4gIGNvbnN0IGlzRW1wdHkgPSAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwO1xuICBjb25zdCBvbkNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIC8vIFN3YWxsb3cga2V5Ym9hcmQgZXZlbnRzIG9uIHRoZSBJbnB1dCBjb250cm9sLCBidXRcbiAgICAvLyBzdGlsbCBhbGxvdyBzZWxlY3RpbmcgdGhlIHRleHQuIHJlYWRPbmx5IHByb3BlcnR5IG9mXG4gICAgLy8gSW5wdXQgaXMgbm90IGFkZXF1YXRlIGZvciB0aGlzIHB1cnBvc2UgYmVjYXVzZSBpdFxuICAgIC8vIHByZXZlbnRzIHRleHQgc2VsZWN0aW9uXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxuICAgICAgICA8Q29weVRvQ2xpcGJvYXJkIHRleHQ9e3ZhbHVlfT5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBzdHlsZU5hbWU9e2Bjb3B5LWJ1dHRvbiAke2lzQ29waWVkID8gJ2lzLWNvcGllZCcgOiAnJ31gfVxuICAgICAgICAgICAgLy8gUkZFOiBBdm9pZCBtYW51YWwgSlMg4oaUIENTUyBzeW5jIG9mIHRyYW5zaXRpb24gZHVyYXRpb24gYnkgdXNpbmc6XG4gICAgICAgICAgICAvLyAgICAgIC0gYGRhdGEtYXR0cmlidXRlYCBhbmQgYGF0dHIoKWAgKHBlbmRpbmcgYnJvd3NlciBzdXBwb3J0KVxuICAgICAgICAgICAgLy8gICAgICAtIFBvc3RDU1MgYW5kIEpTT04gdmFyaWFibGVzIChwZW5kaW5nIGdyZWF0ZXIgbmVlZCBmb3IgdGhpcylcbiAgICAgICAgICAgIHN0eWxlPXt7ICctLXRyYW5zaXRpb24tZHVyYXRpb24nOiBgJHt0cmFuc2l0aW9uRHVyYXRpb259c2AgfX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uQ29weX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtpc0VtcHR5fVxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgbmFtZT17aXNDb3BpZWQgPyAnYXBwcm92ZWQtcmV2ZXJzZScgOiAnbGluayd9XG4gICAgICAgICAgICAgIHN0eWxlTmFtZT1cImJ1dHRvbl9faWNvblwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW4gc3R5bGVOYW1lPVwiYnV0dG9uX190ZXh0XCI+Q29weTwvc3Bhbj5cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Db3B5VG9DbGlwYm9hcmQ+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxpbnB1dFxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBzdHlsZU5hbWU9XCJpbnB1dFwiXG4gICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJpbnB1dFwiXG4gICAgICAgIHJlYWRPbmx5XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuVGV4dENvcHlGaWVsZC5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cblRleHRDb3B5RmllbGQuZGVmYXVsdFByb3BzID0ge1xuICB2YWx1ZTogJycsXG4gIHBsYWNlaG9sZGVyOiAnJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRDb3B5RmllbGQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVzaXplRGV0ZWN0b3IgfSBmcm9tICdyZWFjdC1yZXNpemUtZGV0ZWN0b3InO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ3JlYWN0c3RyYXAnO1xuaW1wb3J0ICcuL1JlYWRNb3JlLm1vZHVsZS5zY3NzJztcblxuY29uc3QgUmVhZE1vcmUgPSAoeyBjbGFzc05hbWUsIGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgW2V4cGFuZGVkLCBzZXRFeHBhbmRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgdG9nZ2xlQ2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0RXhwYW5kZWQoIWV4cGFuZGVkKTtcbiAgfSwgW2V4cGFuZGVkLCBzZXRFeHBhbmRlZF0pO1xuXG4gIGNvbnN0IHsgaGVpZ2h0LCByZWYgfSA9IHVzZVJlc2l6ZURldGVjdG9yKCk7XG5cbiAgY29uc3QgaGFzT3ZlcmZsb3cgPVxuICAgIHJlZiAmJiByZWYuY3VycmVudCA/IHJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCA+IGhlaWdodCA6IGZhbHNlO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtcbiAgICAgICAgPGRpdlxuICAgICAgICAgIHN0eWxlTmFtZT17ZXhwYW5kZWQgPyAnZXhwYW5kZWQnIDogJ2NsYW1wZWQnfVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgIHJlZj17cmVmfVxuICAgICAgICA+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIH1cbiAgICAgIHsoaGFzT3ZlcmZsb3cgfHwgZXhwYW5kZWQpICYmIChcbiAgICAgICAgPEJ1dHRvbiBjb2xvcj1cImxpbmtcIiBvbkNsaWNrPXt0b2dnbGVDYWxsYmFja30+XG4gICAgICAgICAge2V4cGFuZGVkID8gJ1JlYWQgTGVzcycgOiAnUmVhZCBNb3JlJ31cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufTtcblxuUmVhZE1vcmUucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxufTtcblxuUmVhZE1vcmUuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhZE1vcmU7XG4iLCJpbXBvcnQgUmVhZE1vcmUgZnJvbSAnLi9SZWFkTW9yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWRNb3JlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ3JlYWN0c3RyYXAnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAnLi9QYWdpbmF0b3IubW9kdWxlLnNjc3MnO1xuXG5jb25zdCBQYWdpbmF0b3JQYWdlID0gKHsgbnVtYmVyLCBjYWxsYmFjaywgY3VycmVudCB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZU5hbWU9XCJwYWdlLXJvb3RcIj5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgc3R5bGVOYW1lPXtgcGFnZSAke251bWJlciA9PT0gY3VycmVudCA/ICdjdXJyZW50JyA6ICcnfWB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGNhbGxiYWNrKG51bWJlcil9XG4gICAgICA+XG4gICAgICAgIHtudW1iZXJ9XG4gICAgICA8L0J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblBhZ2luYXRvclBhZ2UucHJvcFR5cGVzID0ge1xuICBudW1iZXI6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgY2FsbGJhY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGN1cnJlbnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IFBhZ2luYXRvciA9ICh7IHBhZ2VzLCBjdXJyZW50LCBjYWxsYmFjaywgc3ByZWFkIH0pID0+IHtcbiAgbGV0IHN0YXJ0LCBlbmQ7XG4gIGlmIChwYWdlcyA9PT0gMSkge1xuICAgIGVuZCA9IDA7XG4gICAgc3RhcnQgPSAxO1xuICB9IGVsc2UgaWYgKHBhZ2VzID4gMiAmJiBwYWdlcyA8PSBzcHJlYWQpIHtcbiAgICBzdGFydCA9IDI7XG4gICAgZW5kID0gcGFnZXMgLSAxO1xuICB9IGVsc2UgaWYgKHBhZ2VzID4gc3ByZWFkICYmIGN1cnJlbnQgPD0gNCkge1xuICAgIHN0YXJ0ID0gMjtcbiAgICBlbmQgPSBzcHJlYWQgLSAxO1xuICB9IGVsc2UgaWYgKHBhZ2VzID4gc3ByZWFkICYmIGN1cnJlbnQgPiBwYWdlcyAtIChzcHJlYWQgLSAyKSkge1xuICAgIHN0YXJ0ID0gcGFnZXMgLSAoc3ByZWFkIC0gMik7XG4gICAgZW5kID0gcGFnZXMgLSAxO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGRlbHRhID0gTWF0aC5mbG9vcigoc3ByZWFkIC0gMikgLyAyKTtcbiAgICBzdGFydCA9IGN1cnJlbnQgLSBkZWx0YTtcbiAgICBlbmQgPSBjdXJyZW50ICsgZGVsdGE7XG4gIH1cbiAgY29uc3QgbWlkZGxlID0gZW5kIC0gc3RhcnQgKyAxO1xuICBjb25zdCBtaWRkbGVQYWdlcyA9XG4gICAgbWlkZGxlID4gMFxuICAgICAgPyBBcnJheShtaWRkbGUpXG4gICAgICAgICAgLmZpbGwoKVxuICAgICAgICAgIC5tYXAoKF8sIGluZGV4KSA9PiBzdGFydCArIGluZGV4KVxuICAgICAgOiBbXTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlTmFtZT1cInJvb3RcIj5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgY29sb3I9XCJsaW5rXCJcbiAgICAgICAgc3R5bGVOYW1lPVwiZW5kY2FwXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gY2FsbGJhY2soY3VycmVudCAtIDEpfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGRpc2FibGVkPXtjdXJyZW50ID09PSAxfVxuICAgICAgPlxuICAgICAgICA8c3Bhbj4mbHQ7IFByZXZpb3VzPC9zcGFuPlxuICAgICAgPC9CdXR0b24+XG4gICAgICA8UGFnaW5hdG9yUGFnZSBudW1iZXI9ezF9IGNhbGxiYWNrPXtjYWxsYmFja30gY3VycmVudD17Y3VycmVudH0gLz5cbiAgICAgIHttaWRkbGVQYWdlc1swXSA+IDIgJiYgPHNwYW4+Li4uPC9zcGFuPn1cbiAgICAgIHttaWRkbGVQYWdlcy5tYXAoKG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxQYWdpbmF0b3JQYWdlXG4gICAgICAgICAgICBudW1iZXI9e251bWJlcn1cbiAgICAgICAgICAgIGtleT17bnVtYmVyfVxuICAgICAgICAgICAgY3VycmVudD17Y3VycmVudH1cbiAgICAgICAgICAgIGNhbGxiYWNrPXtjYWxsYmFja31cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgICB7bWlkZGxlUGFnZXNbbWlkZGxlUGFnZXMubGVuZ3RoIC0gMV0gPCBwYWdlcyAtIDEgJiYgPHNwYW4+Li4uPC9zcGFuPn1cbiAgICAgIHtwYWdlcyA+IDEgJiYgKFxuICAgICAgICA8UGFnaW5hdG9yUGFnZSBudW1iZXI9e3BhZ2VzfSBjYWxsYmFjaz17Y2FsbGJhY2t9IGN1cnJlbnQ9e2N1cnJlbnR9IC8+XG4gICAgICApfVxuICAgICAgPEJ1dHRvblxuICAgICAgICBjb2xvcj1cImxpbmtcIlxuICAgICAgICBzdHlsZU5hbWU9XCJlbmRjYXBcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBjYWxsYmFjayhjdXJyZW50ICsgMSl9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgZGlzYWJsZWQ9e2N1cnJlbnQgPT09IHBhZ2VzfVxuICAgICAgPlxuICAgICAgICA8c3Bhbj5OZXh0ICZndDs8L3NwYW4+XG4gICAgICA8L0J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblBhZ2luYXRvci5wcm9wVHlwZXMgPSB7XG4gIHBhZ2VzOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGN1cnJlbnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgY2FsbGJhY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNwcmVhZDogUHJvcFR5cGVzLm51bWJlciwgLy8gTnVtYmVyIG9mIHBhZ2UgYnV0dG9ucyB0byBzaG93XG59O1xuXG5QYWdpbmF0b3IuZGVmYXVsdFByb3BzID0ge1xuICBzcHJlYWQ6IDExLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFnaW5hdG9yO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm0sIExhYmVsLCBJbnB1dCwgQnV0dG9uIH0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVzZUF1dGhlbnRpY2F0b3IgfSBmcm9tICd0YXBpcy1yZWR1eCc7XG5pbXBvcnQgeyBMb2FkaW5nU3Bpbm5lciB9IGZyb20gJy4uLy4uL19jb21tb24nO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMnO1xuaW1wb3J0IHsgTG9naW5DYWxsYmFjayB9IGZyb20gJ3RhcGlzLXJlZHV4L2F1dGhlbnRpY2F0b3IvdHlwZXMnO1xuXG5pbnRlcmZhY2UgTG9naW5Qcm9wcyAge1xuICBjb25maWc/OiBDb25maWcsXG4gIG9uQXV0aD86IExvZ2luQ2FsbGJhY2tcbn1cblxuY29uc3QgTG9naW46IFJlYWN0LkZDPExvZ2luUHJvcHM+ID0gKHsgY29uZmlnLCBvbkF1dGggfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgbG9naW4sIGxvYWRpbmcsIGVycm9yLCB0b2tlbiB9ID0gdXNlQXV0aGVudGljYXRvcihjb25maWcpO1xuICAvKiBSZXBsYWNlIHdpdGggQ0VQIF9jb21tb24gRm9ybUZpZWxkIG9iamVjdHMsIGZvcm1payBhbmQgeXVwICovXG4gIGNvbnN0IFt1c2VybmFtZSwgc2V0VXNlcm5hbWVdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3Qgb25Mb2dpbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBkaXNwYXRjaChsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQsIG9uQXV0aCkpO1xuICB9LCBbZGlzcGF0Y2gsIGxvZ2luLCB1c2VybmFtZSwgcGFzc3dvcmRdKTtcbiAgcmV0dXJuIChcbiAgICA8Rm9ybT5cbiAgICAgIDxoNT5Mb2dpbjwvaDU+XG4gICAgICA8TGFiZWwgZm9yPVwidXNlcm5hbWVcIj5Vc2VybmFtZTwvTGFiZWw+XG4gICAgICA8SW5wdXRcbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBpZD1cInVzZXJuYW1lXCJcbiAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRVc2VybmFtZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAvPlxuICAgICAgPExhYmVsIGZvcj1cInBhc3N3b3JkXCI+UGFzc3dvcmQ8L0xhYmVsPlxuICAgICAgPElucHV0XG4gICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgIGlkPVwicGFzc3dvcmRcIlxuICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFBhc3N3b3JkKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgIC8+XG4gICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uTG9naW59IGRpc2FibGVkPXtsb2FkaW5nfT5cbiAgICAgICAgTG9naW5cbiAgICAgICAge2xvYWRpbmcgJiYgPD5cbiAgICAgICAgICAmbmJzcDtcbiAgICAgICAgICA8TG9hZGluZ1NwaW5uZXIgcGxhY2VtZW50PVwiaW5saW5lXCIgLz5cbiAgICAgICAgPC8+fVxuICAgICAgPC9CdXR0b24+XG4gICAgICB7dG9rZW4gJiYgPGRpdj5Mb2dnZWQgaW48L2Rpdj59XG4gICAgICB7ZXJyb3IgJiYgPD5Mb2dpbiBlcnJvcjwvPn1cbiAgICA8L0Zvcm0+XG4gICk7XG59O1xuXG5Mb2dpbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbmZpZzogbnVsbCxcbiAgb25BdXRoOiBudWxsXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgTG9naW47XG4iLCJpbXBvcnQgTG9naW4gZnJvbSAnLi9Mb2dpbic7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgdXNlU3lzdGVtcyB9IGZyb20gJ3RhcGlzLXJlZHV4JztcbmltcG9ydCB7IFRhcGlzU3lzdGVtIH0gZnJvbSAnQHRhcGlzL3RhcGlzLXR5cGVzY3JpcHQtc3lzdGVtcyc7XG5pbXBvcnQgeyBTeXN0ZW1zTGlzdENhbGxiYWNrIH0gZnJvbSAndGFwaXMtcmVkdXgvc3lzdGVtcy90eXBlcyc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICd0YXBpcy1yZWR1eC90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIE9uU2VsZWN0Q2FsbGJhY2sgPSAoc3lzdGVtOiBUYXBpc1N5c3RlbSkgPT4gYW55O1xuXG5pbnRlcmZhY2UgU3lzdGVtSXRlbVByb3BzIHtcbiAgc3lzdGVtOiBUYXBpc1N5c3RlbSxcbiAgb25TZWxlY3Q/OiBPblNlbGVjdENhbGxiYWNrXG59XG5cbmNvbnN0IFN5c3RlbUl0ZW06IFJlYWN0LkZDPFN5c3RlbUl0ZW1Qcm9wcz4gPSAoeyBzeXN0ZW0sIG9uU2VsZWN0IH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IG9uU2VsZWN0KHN5c3RlbSl9PlxuICAgICAge2Ake3N5c3RlbS5pZH0gKCR7c3lzdGVtLmhvc3R9KWB9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5TeXN0ZW1JdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25TZWxlY3Q6IG51bGxcbn1cblxuaW50ZXJmYWNlIFN5c3RlbXNQcm9wcyB7XG4gIGNvbmZpZz86IENvbmZpZyxcbiAgb25MaXN0PzogU3lzdGVtc0xpc3RDYWxsYmFjayxcbiAgb25TZWxlY3Q/OiBPblNlbGVjdENhbGxiYWNrXG59XG5cbmNvbnN0IFN5c3RlbXM6IFJlYWN0LkZDPFN5c3RlbXNQcm9wcz4gPSAoeyBjb25maWcsIG9uTGlzdCwgb25TZWxlY3QgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgc3lzdGVtcywgbGlzdCB9ID0gdXNlU3lzdGVtcyhjb25maWcpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKGxpc3QoeyBvbkxpc3QgfSkpO1xuICB9LCBbZGlzcGF0Y2hdKTtcblxuICBjb25zdCBkZWZpbml0aW9uczogQXJyYXk8VGFwaXNTeXN0ZW0+ID0gc3lzdGVtcy5yZXN1bHRzO1xuXG4gIGlmIChzeXN0ZW1zLmxvYWRpbmcpIHtcbiAgICByZXR1cm4gPGRpdj5Mb2FkaW5nPC9kaXY+XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDU+U3lzdGVtczwvaDU+XG4gICAgICB7XG4gICAgICAgIGRlZmluaXRpb25zLmxlbmd0aFxuICAgICAgICAgID8gZGVmaW5pdGlvbnMubWFwKFxuICAgICAgICAgICAgICAoc3lzdGVtKSA9PiA8U3lzdGVtSXRlbSBzeXN0ZW09e3N5c3RlbX0ga2V5PXtzeXN0ZW0uaWR9IG9uU2VsZWN0PXtvblNlbGVjdH0gLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IDxpPk5vIHN5c3RlbXMgZm91bmQ8L2k+XG4gIFxuICAgICAgfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuU3lzdGVtcy5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbmZpZzogbnVsbCxcbiAgb25MaXN0OiBudWxsLFxuICBvblNlbGVjdDogbnVsbFxufVxuXG5leHBvcnQgZGVmYXVsdCBTeXN0ZW1zO1xuIiwiaW1wb3J0IFN5c3RlbXMgZnJvbSAnLi9TeXN0ZW1zJztcblxuZXhwb3J0IGRlZmF1bHQgU3lzdGVtcztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB1c2VBcHBzIH0gZnJvbSAndGFwaXMtcmVkdXgnO1xuaW1wb3J0IHsgQXBwc0xpc3RDYWxsYmFjayB9IGZyb20gJ3RhcGlzLXJlZHV4L2FwcHMvbGlzdC90eXBlcyc7XG5pbXBvcnQgeyBDb25maWcsIFRhcGlzU3RhdGUgfSBmcm9tICd0YXBpcy1yZWR1eC90eXBlcyc7XG5pbXBvcnQgeyBBcHBzIH0gZnJvbSAnQHRhcGlzL3RhcGlzLXR5cGVzY3JpcHQnO1xuXG5leHBvcnQgdHlwZSBPblNlbGVjdENhbGxiYWNrID0gKGFwcDogQXBwcy5UYXBpc0FwcCkgPT4gYW55O1xuXG5pbnRlcmZhY2UgQXBwc0xpc3RpbmdJdGVtUHJvcHMge1xuICBhcHA6IEFwcHMuVGFwaXNBcHAsXG4gIG9uU2VsZWN0PzogT25TZWxlY3RDYWxsYmFja1xufVxuXG5jb25zdCBBcHBzTGlzdGluZ0l0ZW06IFJlYWN0LkZDPEFwcHNMaXN0aW5nSXRlbVByb3BzPiA9ICh7IGFwcCwgb25TZWxlY3QgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgb25DbGljaz17KCkgPT4gb25TZWxlY3QoYXBwKX0+XG4gICAgICB7YCR7YXBwLmlkfSB2JHthcHAudmVyc2lvbn1gfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuQXBwc0xpc3RpbmdJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25TZWxlY3Q6IG51bGxcbn1cblxuaW50ZXJmYWNlIEFwcHNMaXN0aW5nUHJvcHMge1xuICBjb25maWc/OiBDb25maWcsXG4gIG9uTGlzdD86IEFwcHNMaXN0Q2FsbGJhY2ssXG4gIG9uU2VsZWN0PzogT25TZWxlY3RDYWxsYmFja1xufVxuXG5jb25zdCBBcHBzTGlzdGluZzogUmVhY3QuRkM8QXBwc0xpc3RpbmdQcm9wcz4gPSAoeyBjb25maWcsIG9uTGlzdCwgb25TZWxlY3QgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgLy8gR2V0IGEgZmlsZSBsaXN0aW5nIGdpdmVuIHRoZSBzeXN0ZW1JZCBhbmQgcGF0aFxuICBjb25zdCB7IGxpc3QsIGFwcHMgfSA9IHVzZUFwcHMoY29uZmlnKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBkaXNwYXRjaChsaXN0KHsgb25MaXN0IH0pKTtcbiAgfSwgW2Rpc3BhdGNoLCBvbkxpc3RdKTtcblxuICBjb25zdCBhcHBTZWxlY3RDYWxsYmFjayA9IHVzZUNhbGxiYWNrPE9uU2VsZWN0Q2FsbGJhY2s+KFxuICAgIChhcHA6IEFwcHMuVGFwaXNBcHApID0+IHtcbiAgICAgIGlmIChvblNlbGVjdCkge1xuICAgICAgICBvblNlbGVjdChhcHApO1xuICAgICAgfVxuICAgIH0sXG4gICAgW29uU2VsZWN0XVxuICApXG5cbiAgaWYgKCFhcHBzIHx8IGFwcHMubG9hZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICBMb2FkaW5nLi4uXG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICBjb25zdCBhcHBMaXN0OiBBcnJheTxBcHBzLlRhcGlzQXBwPiA9IGFwcHMucmVzdWx0cztcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDU+QXBwczwvaDU+XG4gICAgICB7XG4gICAgICAgIGFwcExpc3QubWFwKChhcHA6IEFwcHMuVGFwaXNBcHApID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFwcHNMaXN0aW5nSXRlbSBhcHA9e2FwcH0gb25TZWxlY3Q9e2FwcFNlbGVjdENhbGxiYWNrfS8+XG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuQXBwc0xpc3RpbmcuZGVmYXVsdFByb3BzID0ge1xuICBjb25maWc6IG51bGwsXG4gIG9uTGlzdDogbnVsbCxcbiAgb25TZWxlY3Q6IG51bGxcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwc0xpc3Rpbmc7XG4iLCJpbXBvcnQgQXBwc0xpc3RpbmcgZnJvbSAnLi9BcHBzTGlzdGluZyc7XG5leHBvcnQgeyBPblNlbGVjdENhbGxiYWNrIH0gZnJvbSAnLi9BcHBzTGlzdGluZyc7XG5leHBvcnQgZGVmYXVsdCBBcHBzTGlzdGluZztcbiIsImltcG9ydCB7IFRhcGlzU3RhdGUgfSBmcm9tICcuLi9zdG9yZS9yb290UmVkdWNlcic7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IEZpbGVMaXN0aW5nRGlyZWN0b3J5IH0gZnJvbSAnLi90eXBlcyc7XG5cbi8vIEEgc2VsZWN0b3IgZ2VuZXJhdG9yIHRoYXQgcmV0dXJucyBhIHNlbGVjdG9yIGZvciBhIGdpdmVuIHBhdGggbGlzdGluZ1xuLy8gZXg6XG4vLyBjb25zdCBsaXN0aW5nOiBGaWxlTGlzdGluZ0RpcmVjdG9yeSA9IHVzZVNlbGVjdG9yKGdldExpc3RpbmcoJ015U3lzdGVtSWQnLCAnL3BhdGgnKSk7XG50eXBlIGdldExpc3RpbmdTZWxlY3RvclR5cGUgPSAoc3RhdGU6IFRhcGlzU3RhdGUpID0+IEZpbGVMaXN0aW5nRGlyZWN0b3J5O1xuXG5jb25zdCBnZXRMaXN0aW5nID0gKHN5c3RlbUlkOiBzdHJpbmcsIHBhdGg6IHN0cmluZyk6IGdldExpc3RpbmdTZWxlY3RvclR5cGUgPT4ge1xuICByZXR1cm4gKHN0YXRlOiBUYXBpc1N0YXRlKTogRmlsZUxpc3RpbmdEaXJlY3RvcnkgPT4ge1xuICAgIGlmIChzeXN0ZW1JZCBpbiBzdGF0ZS5maWxlcy5saXN0aW5ncyAmJiBwYXRoIGluIHN0YXRlLmZpbGVzLmxpc3RpbmdzW3N5c3RlbUlkXSkge1xuICAgICAgcmV0dXJuIHN0YXRlLmZpbGVzLmxpc3RpbmdzW3N5c3RlbUlkXVtwYXRoXTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRMaXN0aW5nO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVzZUZpbGVzIH0gZnJvbSAndGFwaXMtcmVkdXgnO1xuaW1wb3J0IGdldExpc3RpbmcgZnJvbSAndGFwaXMtcmVkdXgvZmlsZXMvc2VsZWN0b3JzJztcbmltcG9ydCB7IEZpbGVMaXN0aW5nQ2FsbGJhY2ssIEZpbGVMaXN0aW5nRGlyZWN0b3J5IH0gZnJvbSAndGFwaXMtcmVkdXgvZmlsZXMvdHlwZXMnO1xuaW1wb3J0IHsgQ29uZmlnLCBUYXBpc1N0YXRlIH0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMnO1xuaW1wb3J0IHsgRmlsZXMgfSBmcm9tICdAdGFwaXMvdGFwaXMtdHlwZXNjcmlwdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuZXhwb3J0IHR5cGUgT25TZWxlY3RDYWxsYmFjayA9IChmaWxlOiBGaWxlcy5GaWxlSW5mbykgPT4gYW55O1xuXG5pbnRlcmZhY2UgRmlsZUxpc3RpbmdJdGVtUHJvcHMge1xuICBmaWxlOiBGaWxlcy5GaWxlSW5mbyxcbiAgb25TZWxlY3Q/OiBPblNlbGVjdENhbGxiYWNrXG59XG5cbmNvbnN0IEZpbGVMaXN0aW5nSXRlbTogUmVhY3QuRkM8RmlsZUxpc3RpbmdJdGVtUHJvcHM+ID0gKHsgZmlsZSwgb25TZWxlY3QgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgb25DbGljaz17KCkgPT4gb25TZWxlY3QgPyBvblNlbGVjdChmaWxlKSA6IG51bGx9PlxuICAgICAge2Ake2ZpbGUubmFtZX1gfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuRmlsZUxpc3RpbmdJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25TZWxlY3Q6IG51bGxcbn1cblxuaW50ZXJmYWNlIEZpbGVMaXN0aW5nUHJvcHMge1xuICBzeXN0ZW1JZDogc3RyaW5nLFxuICBwYXRoOiBzdHJpbmcsXG4gIGNvbmZpZz86IENvbmZpZyxcbiAgb25MaXN0PzogRmlsZUxpc3RpbmdDYWxsYmFjayxcbiAgb25TZWxlY3Q/OiBPblNlbGVjdENhbGxiYWNrXG59XG5cbmNvbnN0IEZpbGVMaXN0aW5nOiBSZWFjdC5GQzxGaWxlTGlzdGluZ1Byb3BzPiA9ICh7IHN5c3RlbUlkLCBwYXRoLCBjb25maWcsIG9uTGlzdCwgb25TZWxlY3QgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgLy8gR2V0IGEgZmlsZSBsaXN0aW5nIGdpdmVuIHRoZSBzeXN0ZW1JZCBhbmQgcGF0aFxuICBjb25zdCB7IGxpc3QgfSA9IHVzZUZpbGVzKGNvbmZpZyk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2gobGlzdCh7IG9uTGlzdCwgcmVxdWVzdDogeyBzeXN0ZW1JZCwgcGF0aCB9IH0pKTtcbiAgfSwgW2Rpc3BhdGNoLCBzeXN0ZW1JZCwgcGF0aCwgb25MaXN0XSk7XG5cbiAgLy8gR2V0IHRoZSBmaWxlIGxpc3RpbmcgZm9yIHRoaXMgc3lzdGVtSWQgYW5kIHBhdGhcbiAgY29uc3QgcmVzdWx0OiBGaWxlTGlzdGluZ0RpcmVjdG9yeSA9IHVzZVNlbGVjdG9yPFRhcGlzU3RhdGUsIEZpbGVMaXN0aW5nRGlyZWN0b3J5PihcbiAgICBnZXRMaXN0aW5nKHN5c3RlbUlkLCBwYXRoKVxuICApO1xuXG4gIGNvbnN0IGZpbGVTZWxlY3RDYWxsYmFjayA9IHVzZUNhbGxiYWNrPE9uU2VsZWN0Q2FsbGJhY2s+KFxuICAgIChmaWxlOiBGaWxlcy5GaWxlSW5mbykgPT4ge1xuICAgICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICAgIG9uU2VsZWN0KGZpbGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW29uU2VsZWN0XVxuICApXG5cbiAgaWYgKCFyZXN1bHQgfHwgcmVzdWx0LmxvYWRpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgTG9hZGluZy4uLlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgY29uc3QgZmlsZXM6IEFycmF5PEZpbGVzLkZpbGVJbmZvPiA9IHJlc3VsdC5yZXN1bHRzO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoNT5GaWxlczwvaDU+XG4gICAgICB7XG4gICAgICAgIGZpbGVzLm1hcCgoZmlsZTogRmlsZXMuRmlsZUluZm8pID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEZpbGVMaXN0aW5nSXRlbSBmaWxlPXtmaWxlfSAgLz5cbiAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5GaWxlTGlzdGluZy5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbmZpZzogbnVsbCxcbiAgb25MaXN0OiBudWxsLFxuICBvblNlbGVjdDogbnVsbFxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWxlTGlzdGluZztcbiIsImltcG9ydCBGaWxlTGlzdGluZyBmcm9tICcuL0ZpbGVMaXN0aW5nJztcblxuZXhwb3J0IGRlZmF1bHQgRmlsZUxpc3Rpbmc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgdXNlSm9icyB9IGZyb20gJ3RhcGlzLXJlZHV4JztcbmltcG9ydCB7IEpvYnNMaXN0Q2FsbGJhY2sgfSBmcm9tICd0YXBpcy1yZWR1eC9qb2JzL2xpc3QvdHlwZXMnO1xuaW1wb3J0IHsgQ29uZmlnLCBUYXBpc1N0YXRlIH0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMnO1xuaW1wb3J0IHsgSm9icyB9IGZyb20gJ0B0YXBpcy90YXBpcy10eXBlc2NyaXB0JztcblxuZXhwb3J0IHR5cGUgT25TZWxlY3RDYWxsYmFjayA9IChhcHA6IEpvYnMuSm9iTGlzdERUTykgPT4gYW55O1xuXG5pbnRlcmZhY2UgSm9ic0xpc3RpbmdJdGVtUHJvcHMge1xuICBqb2I6IEpvYnMuSm9iTGlzdERUTyxcbiAgb25TZWxlY3Q/OiBPblNlbGVjdENhbGxiYWNrXG59XG5cbmNvbnN0IEpvYnNMaXN0aW5nSXRlbTogUmVhY3QuRkM8Sm9ic0xpc3RpbmdJdGVtUHJvcHM+ID0gKHsgam9iLCBvblNlbGVjdCB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBvblNlbGVjdCA/IG9uU2VsZWN0KGpvYikgOiBudWxsfT5cbiAgICAgIHtgJHtqb2IubmFtZX0gJHtqb2IudXVpZH0gKCR7am9iLnN0YXR1c30pYH1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkpvYnNMaXN0aW5nSXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uU2VsZWN0OiBudWxsXG59XG5cbmludGVyZmFjZSBKb2JzTGlzdGluZ1Byb3BzIHtcbiAgY29uZmlnPzogQ29uZmlnLFxuICBvbkxpc3Q/OiBKb2JzTGlzdENhbGxiYWNrLFxuICBvblNlbGVjdD86IE9uU2VsZWN0Q2FsbGJhY2tcbn1cblxuY29uc3QgSm9ic0xpc3Rpbmc6IFJlYWN0LkZDPEpvYnNMaXN0aW5nUHJvcHM+ID0gKHsgY29uZmlnLCBvbkxpc3QsIG9uU2VsZWN0IH0pID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gIC8vIEdldCBhIGZpbGUgbGlzdGluZyBnaXZlbiB0aGUgc3lzdGVtSWQgYW5kIHBhdGhcbiAgY29uc3QgeyBsaXN0LCBqb2JzIH0gPSB1c2VKb2JzKGNvbmZpZyk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2gobGlzdCh7IG9uTGlzdCwgcmVxdWVzdDogeyBvcmRlckJ5OiBcImNyZWF0ZWQoZGVzYylcIn0gfSkpO1xuICB9LCBbZGlzcGF0Y2gsIG9uTGlzdF0pO1xuXG4gIGNvbnN0IGpvYlNlbGVjdENhbGxiYWNrID0gdXNlQ2FsbGJhY2s8T25TZWxlY3RDYWxsYmFjaz4oXG4gICAgKGFwcDogSm9icy5Kb2JMaXN0RFRPKSA9PiB7XG4gICAgICBpZiAob25TZWxlY3QpIHtcbiAgICAgICAgb25TZWxlY3QoYXBwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtvblNlbGVjdF1cbiAgKVxuXG4gIGlmICgham9icyB8fCBqb2JzLmxvYWRpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgTG9hZGluZy4uLlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgY29uc3Qgam9ic0xpc3Q6IEFycmF5PEpvYnMuSm9iTGlzdERUTz4gPSBqb2JzLnJlc3VsdHM7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGg1PkpvYnM8L2g1PlxuICAgICAge1xuICAgICAgICBqb2JzTGlzdC5tYXAoKGpvYjogSm9icy5Kb2JMaXN0RFRPKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxKb2JzTGlzdGluZ0l0ZW0gam9iPXtqb2J9IC8+XG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuSm9ic0xpc3RpbmcuZGVmYXVsdFByb3BzID0ge1xuICBjb25maWc6IG51bGwsXG4gIG9uTGlzdDogbnVsbCxcbiAgb25TZWxlY3Q6IG51bGxcbn1cblxuZXhwb3J0IGRlZmF1bHQgSm9ic0xpc3Rpbmc7XG4iLCJpbXBvcnQgSm9ic0xpc3RpbmcgZnJvbSAnLi9Kb2JzTGlzdGluZyc7XG5cbmV4cG9ydCBkZWZhdWx0IEpvYnNMaXN0aW5nO1xuIiwiaW1wb3J0IHsgVG9rZW4gfSBmcm9tICcuLi9hdXRoZW50aWNhdG9yL3R5cGVzJztcblxuLy8gRGVmYXVsdCBjb25maWd1cmF0aW9uIHVzZXMgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIGNvbmZpZ3VyZSBVUkxzXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbmZpZzogQ29uZmlnID0ge1xuICBqd3Q6IG51bGwsXG4gIHRlbmFudDogcHJvY2Vzcy5lbnYuVEFQSVNfVEVOQU5UX1VSTFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xuICBqd3Q6IHN0cmluZyxcbiAgdGVuYW50OiBzdHJpbmcsXG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQnV0dG9uLFxuICBGb3JtR3JvdXAsXG4gIExhYmVsLFxuICBJbnB1dCxcbiAgRm9ybVRleHQsXG4gIEJhZGdlLFxuICBJbnB1dEdyb3VwLFxuICBJbnB1dEdyb3VwQWRkb24sXG59IGZyb20gJ3JlYWN0c3RyYXAnO1xuXG5pbXBvcnQgeyB1c2VGaWVsZCwgRmllbGRIb29rQ29uZmlnIH0gZnJvbSAnZm9ybWlrJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgJy4vSm9iRmllbGRXcmFwcGVyLnNjc3MnO1xuXG50eXBlIEpvYkZpZWxkV3JhcHBlckN1c3RvbVByb3BzID0ge1xuICBsYWJlbDogc3RyaW5nO1xuICByZXF1aXJlZD86IGJvb2xlYW47XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGNoaWxkcmVuPzpcbiAgICB8IFJlYWN0LlJlYWN0Q2hpbGRcbiAgICB8IFJlYWN0LlJlYWN0Q2hpbGRbXTtcbn1cblxuZXhwb3J0IHR5cGUgSm9iRmllbGRXcmFwcGVyUHJvcHMgPSB7XG4gIHByb3BzOiBGaWVsZEhvb2tDb25maWc8c3RyaW5nPlxufSAmIEpvYkZpZWxkV3JhcHBlckN1c3RvbVByb3BzO1xuXG5jb25zdCBKb2JGaWVsZFdyYXBwZXI6IFJlYWN0LkZDPEpvYkZpZWxkV3JhcHBlclByb3BzPiA9ICh7IHByb3BzLCBsYWJlbCwgcmVxdWlyZWQsIGRlc2NyaXB0aW9uLCBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IFsgZmllbGQsIG1ldGEsIGhlbHBlcnMgXSA9IHVzZUZpZWxkKHByb3BzKTtcbiAgcmV0dXJuIChcbiAgICA8Rm9ybUdyb3VwPlxuICAgICAgPExhYmVsXG4gICAgICAgIGNsYXNzTmFtZT1cImZvcm0tZmllbGRfX2xhYmVsXCJcbiAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fVxuICAgICAgPlxuICAgICAgICB7bGFiZWx9eycgJ31cbiAgICAgICAge3JlcXVpcmVkID8gKFxuICAgICAgICAgIDxCYWRnZSBjb2xvcj1cImRhbmdlclwiIHN0eWxlPXt7IG1hcmdpbkxlZnQ6ICcxMHB4JyB9fT5cbiAgICAgICAgICAgIFJlcXVpcmVkXG4gICAgICAgICAgPC9CYWRnZT5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L0xhYmVsPlxuICAgICAge1xuICAgICAgICBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7Li4uZmllbGQsIC4uLnByb3BzfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHttZXRhLnRvdWNoZWQgJiYgbWV0YS5lcnJvciA/IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWZpZWxkX192YWxpZGF0aW9uLWVycm9yXCI+e21ldGEuZXJyb3J9PC9kaXY+XG4gICAgICApIDogKFxuICAgICAgICBkZXNjcmlwdGlvbiAmJiAoXG4gICAgICAgICAgPEZvcm1UZXh0IGNsYXNzTmFtZT1cImZvcm0tZmllbGRfX2hlbHBcIiBjb2xvcj1cIm11dGVkXCI+XG4gICAgICAgICAgICB7ZGVzY3JpcHRpb259XG4gICAgICAgICAgPC9Gb3JtVGV4dD5cbiAgICAgICAgKVxuICAgICAgKX1cbiAgICA8L0Zvcm1Hcm91cD5cbiAgKVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEpvYkZpZWxkV3JhcHBlcjsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTeXN0ZW1zIH0gZnJvbSAndGFwaXMtcmVkdXgnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMnO1xuaW1wb3J0IHsgSm9icyB9IGZyb20gJ0B0YXBpcy90YXBpcy10eXBlc2NyaXB0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgSm9ic1N1Ym1pdENhbGxiYWNrIH0gZnJvbSAndGFwaXMtcmVkdXgvam9icy9zdWJtaXQvdHlwZXMnXG5pbXBvcnQgeyBGb3JtaWssIEZvcm0sfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IHsgaXNUYXBpc1Jlc3BvbnNlIH0gZnJvbSAndGFwaXMtcmVkdXgvdHlwZXMnO1xuaW1wb3J0IHsgdXNlSm9icyB9IGZyb20gJ3RhcGlzLXJlZHV4JztcbmltcG9ydCB7XG4gIEljb24sXG4gIExvYWRpbmdTcGlubmVyLFxufSBmcm9tICd0YXBpcy11aS9fY29tbW9uJztcbmltcG9ydCBKb2JGaWVsZFdyYXBwZXIsIHsgSm9iRmllbGRXcmFwcGVyUHJvcHMgfSBmcm9tICcuL0pvYkZpZWxkV3JhcHBlcic7XG5pbXBvcnQgKiBhcyBZdXAgZnJvbSAneXVwJztcbmltcG9ydCB7XG4gIEJ1dHRvbixcbiAgSW5wdXQsXG59IGZyb20gJ3JlYWN0c3RyYXAnO1xuXG5jb25zdCBKb2JTdWJtaXRTdGF0dXM6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHN1Ym1pc3Npb24gfSA9IHVzZUpvYnMoKTtcbiAgaWYgKHN1Ym1pc3Npb24ucmVzdWx0KSB7XG4gICAgcmV0dXJuIDxJY29uIG5hbWU9XCJhcHByb3ZlZC1yZXZlcnNlXCIgLz5cbiAgfSBlbHNlIGlmIChzdWJtaXNzaW9uLmxvYWRpbmcpIHtcbiAgICByZXR1cm4gPExvYWRpbmdTcGlubmVyIHBsYWNlbWVudD1cImlubGluZVwiIC8+XG4gIH0gZWxzZSBpZiAoc3VibWlzc2lvbi5lcnJvcikge1xuICAgIHJldHVybiA8SWNvbiBuYW1lPVwiZGVuaWVkLXJldmVyc2VcIiAvPlxuICB9XG4gIHJldHVybiA8PjwvPjtcbn1cblxuZXhwb3J0IHR5cGUgT25TdWJtaXRDYWxsYmFjayA9IChqb2I6IEpvYnMuSm9iKSA9PiBhbnk7XG5cbmludGVyZmFjZSBKb2JMYXVuY2hlclByb3BzIHtcbiAgY29uZmlnPzogQ29uZmlnLFxuICBpbml0aWFsVmFsdWVzPzogSm9icy5SZXFTdWJtaXRKb2IsXG4gIG9uU3VibWl0PzogT25TdWJtaXRDYWxsYmFja1xufVxuXG5jb25zdCBKb2JMYXVuY2hlclByb3BzOiBSZWFjdC5GQzxKb2JMYXVuY2hlclByb3BzPiA9ICh7IGNvbmZpZywgaW5pdGlhbFZhbHVlcywgb25TdWJtaXQgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgc3VibWl0LCBzdWJtaXNzaW9uIH0gPSB1c2VKb2JzKCk7XG4gIGNvbnN0IHN5c3RlbXNIb29rID0gdXNlU3lzdGVtcyhjb25maWcpO1xuICBjb25zdCBsaXN0U3lzdGVtcyA9IHN5c3RlbXNIb29rLmxpc3Q7XG4gIGNvbnN0IHN5c3RlbXMgPSBzeXN0ZW1zSG9vay5zeXN0ZW1zO1xuICAvKlxuICBjb25zdCBzeXN0ZW1zID0ge1xuICAgIHJlc3VsdHM6IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICd0YXBpc3YzLXN0b3JhZ2UnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogJ3RhcGlzdjMtZXhlYydcbiAgICAgIH1cbiAgICBdXG4gIH1cbiAgKi9cblxuICAvLyB0YXBpcy1yZWR1eCB3aWxsIG1ha2UgdGhlIGNhbGxiYWNrIHdpdGggYW4gYWdhdmUgcmVzcG9uc2VcbiAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIGV4dHJhY3QgdGhlIEpvYiByZXR1cm5lZCBpbiB0aGUgcmVzdWx0IGZpZWxkXG4gIC8vIG9mIHRoZSByZXNwb25zZVxuICBjb25zdCBzdWJtaXREZWNvZGVyQ2FsbGJhY2sgPSB1c2VDYWxsYmFjazxKb2JzU3VibWl0Q2FsbGJhY2s+KFxuICAgIChyZXN1bHQ6IEpvYnMuUmVzcFN1Ym1pdEpvYiB8IEVycm9yKSA9PiB7XG4gICAgICBpZiAob25TdWJtaXQgJiYgaXNUYXBpc1Jlc3BvbnNlPEpvYnMuUmVzcFN1Ym1pdEpvYj4ocmVzdWx0KSkge1xuICAgICAgICBjb25zdCBqb2JSZXNwb25zZTogSm9icy5SZXNwU3VibWl0Sm9iID0gcmVzdWx0IGFzIEpvYnMuUmVzcFN1Ym1pdEpvYjtcbiAgICAgICAgb25TdWJtaXQoam9iUmVzcG9uc2UucmVzdWx0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtvblN1Ym1pdF1cbiAgKVxuXG4gIGNvbnN0IHZhbGlkYXRpb25TY2hlbWEgPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gWXVwLmxhenkodmFsdWVzID0+IHtcbiAgICAgIGNvbnN0IHNjaGVtYSA9IFl1cC5vYmplY3Qoe30pO1xuICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9KVxuICB9XG4gIGNvbnN0IGZvcm1TdWJtaXQgPSAodmFsdWVzLCB7IHNldFN1Ym1pdHRpbmcgfSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKHZhbHVlcyk7XG4gICAgZGlzcGF0Y2goc3VibWl0KHsgb25TdWJtaXQ6IHN1Ym1pdERlY29kZXJDYWxsYmFjaywgcmVxdWVzdDogdmFsdWVzIH0pKTtcbiAgICBzZXRTdWJtaXR0aW5nKGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGpvYkZpZWxkczogQXJyYXk8Sm9iRmllbGRXcmFwcGVyUHJvcHM+ID0gW1xuICAgIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICBkZXNjcmlwdGlvbjogJ0EgbmFtZSBmb3IgdGhpcyBqb2InLFxuICAgICAgbGFiZWw6ICdOYW1lJyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgY2hpbGRyZW46IDxJbnB1dCBic1NpemU9XCJzbVwiIC8+XG4gICAgfSxcbiAgICB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBuYW1lOiAnYXBwSWQnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJywgIFxuICAgICAgfSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIElEIG9mIHRoZSBUQVBJUyBhcHBsaWNhdGlvbiB0byBydW4nLFxuICAgICAgbGFiZWw6J0FwcCBJRCcsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIGNoaWxkcmVuOiA8SW5wdXQgYnNTaXplPVwic21cIiBkYXRhLXRlc3RpZD1cImFwcElkXCIgLz5cbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG5hbWU6ICdhcHBWZXJzaW9uJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb246ICdUaGUgdmVyc2lvbiBvZiB0aGUgYXBwbGljYXRpb24gdG8gcnVuJyxcbiAgICAgIGxhYmVsOiAnQXBwIFZlcnNpb24nLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBjaGlsZHJlbjogPElucHV0IGJzU2l6ZT1cInNtXCIgLz5cbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG5hbWU6ICdleGVjU3lzdGVtSWQnLFxuICAgICAgICB0eXBlOiBcInNlbGVjdFwiXG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb246ICdBIFRBUElTIHN5c3RlbSB0aGF0IGNhbiBydW4gdGhpcyBhcHBsaWNhdGlvbicsXG4gICAgICBsYWJlbDogJ0V4ZWN1dGlvbiBTeXN0ZW0nLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBjaGlsZHJlbjogPElucHV0PlxuICAgICAgICB7XG4gICAgICAgICAgc3lzdGVtcy5yZXN1bHRzLm1hcChcbiAgICAgICAgICAgIHN5c3RlbSA9PiAoXG4gICAgICAgICAgICAgIDxvcHRpb24+e3N5c3RlbS5pZH08L29wdGlvbj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIDwvSW5wdXQ+IFxuICAgIH1cbiAgXVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoNT5Kb2IgU3VibWl0PC9oNT5cbiAgICAgIDxGb3JtaWtcbiAgICAgICAgaW5pdGlhbFZhbHVlcz17aW5pdGlhbFZhbHVlc31cbiAgICAgICAgdmFsaWRhdGlvblNjaGVtYT17dmFsaWRhdGlvblNjaGVtYX1cbiAgICAgICAgb25TdWJtaXQ9e2Zvcm1TdWJtaXR9XG4gICAgICA+XG4gICAgICAgeyh7IGlzU3VibWl0dGluZyB9KSA9PiAoXG4gICAgICAgICA8Rm9ybT5cbiAgICAgICAgICAge1xuICAgICAgICAgICAgIGpvYkZpZWxkcy5tYXAoZmllbGQgPT4ge1xuICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgPEpvYkZpZWxkV3JhcHBlciBcbiAgICAgICAgICAgICAgICAgICBwcm9wcz17ZmllbGQucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgbGFiZWw9e2ZpZWxkLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkPXtmaWVsZC5yZXF1aXJlZH1cbiAgICAgICAgICAgICAgICAgICBjaGlsZHJlbj17ZmllbGQuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb249e2ZpZWxkLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgIH0pXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzU3VibWl0dGluZyB8fCBzdWJtaXNzaW9uLmxvYWRpbmcgfHwgc3VibWlzc2lvbi5yZXN1bHQgIT0gbnVsbH0+XG4gICAgICAgICAgICAgIFN1Ym1pdCBKb2JcbiAgICAgICAgICAgICAgPEpvYlN1Ym1pdFN0YXR1cyAvPlxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICA8L0Zvcm0+XG4gICAgICAgKX1cbiAgICAgIDwvRm9ybWlrPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuSm9iTGF1bmNoZXJQcm9wcy5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbmZpZzogbnVsbCxcbiAgaW5pdGlhbFZhbHVlczoge30sXG4gIG9uU3VibWl0OiBudWxsXG59XG5cbmV4cG9ydCBkZWZhdWx0IEpvYkxhdW5jaGVyUHJvcHM7XG4iLCJleHBvcnQgaW50ZXJmYWNlIFRhcGlzUmVzcG9uc2Uge1xuICByZXN1bHQ6IGFueSxcbiAgc3RhdHVzOiBzdHJpbmcsXG4gIG1lc3NhZ2U6IHN0cmluZyxcbiAgdmVyc2lvbjogc3RyaW5nXG59XG5cbi8vIFR5cGUgY2hlY2tlciB0byBzZWUgaWYgYW4gb2JqZWN0IGlzIGEgdGFwaXMgcmVzcG9uc2Ugb3IgYW5vdGhlciB0eXBlIG9mIGphdmFzY3JpcHQgZXhjZXB0aW9uXG5leHBvcnQgY29uc3QgaXNUYXBpc1Jlc3BvbnNlID0gPFQ+KG9iajogVGFwaXNSZXNwb25zZSB8IEVycm9yIHwgVCk6IG9iaiBpcyBUYXBpc1Jlc3BvbnNlID0+IHtcbiAgcmV0dXJuICgncmVzdWx0JyBpbiAob2JqIGFzIFRhcGlzUmVzcG9uc2UpKTtcbn0iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIEpvYkxhdW5jaGVyIH0gZnJvbSAnLi9Kb2JMYXVuY2hlcic7XG5cbmV4cG9ydCBkZWZhdWx0IEpvYkxhdW5jaGVyOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOYXYsIE5hdkl0ZW0sIE5hdkxpbmsgfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCB7IE5hdkxpbmsgYXMgUlJOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAndGFwaXMtdWkvX2NvbW1vbic7XG5pbXBvcnQgJy4vU2lkZWJhci5nbG9iYWwuc2Nzcyc7XG5pbXBvcnQgJy4vU2lkZWJhci5tb2R1bGUuc2Nzcyc7XG5cblxudHlwZSBTaWRlYmFySXRlbVByb3BzID0ge1xuICB0bzogc3RyaW5nLFxuICBsYWJlbDogc3RyaW5nLFxuICBpY29uTmFtZTogc3RyaW5nXG59XG5cbmNvbnN0IFNpZGViYXJJdGVtOiBSZWFjdC5GQzxTaWRlYmFySXRlbVByb3BzPiA9ICh7IHRvLCBsYWJlbCwgaWNvbk5hbWUgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxOYXZJdGVtPlxuICAgICAgPE5hdkxpbmtcbiAgICAgICAgdGFnPXtSUk5hdkxpbmt9XG4gICAgICAgIHRvPXt0b31cbiAgICAgICAgZXhhY3RcbiAgICAgICAgc3R5bGVOYW1lPVwibGlua1wiXG4gICAgICAgIGFjdGl2ZVN0eWxlTmFtZT1cImxpbmstLWFjdGl2ZVwiXG4gICAgICAgIGRpc2FibGVkPXtmYWxzZX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBzdHlsZU5hbWU9XCJjb250ZW50XCIgY2xhc3NOYW1lPVwibmF2LWNvbnRlbnRcIj5cbiAgICAgICAgICA8SWNvbiBuYW1lPXtpY29uTmFtZX0gLz5cbiAgICAgICAgICA8c3BhbiBzdHlsZU5hbWU9XCJ0ZXh0XCI+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L05hdkxpbms+XG4gICAgPC9OYXZJdGVtPlxuICApO1xufTtcblxuXG5pbnRlcmZhY2UgU2lkZWJhclByb3BzIHtcbiAgand0Pzogc3RyaW5nXG59XG5cbmNvbnN0IFNpZGViYXI6IFJlYWN0LkZDPFNpZGViYXJQcm9wcz4gPSAoeyBqd3QgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxOYXYgc3R5bGVOYW1lPVwicm9vdFwiIHZlcnRpY2FsPlxuICAgICAgPFNpZGViYXJJdGVtIHRvPVwiL1wiIGxhYmVsPVwiRGFzaGJvYXJkXCIgaWNvbk5hbWU9XCJkYXNoYm9hcmRcIiAvPlxuICAgICAgPFNpZGViYXJJdGVtIHRvPVwiL2xvZ2luXCIgbGFiZWw9XCJMb2dpblwiIGljb25OYW1lPVwibGlua1wiIC8+XG4gICAgICA8U2lkZWJhckl0ZW0gdG89XCIvc3lzdGVtc1wiIGxhYmVsPVwiU3lzdGVtc1wiIGljb25OYW1lPVwiYWxsb2NhdGlvbnNcIiAvPlxuICAgICAgPFNpZGViYXJJdGVtIHRvPVwiL2ZpbGVzXCIgbGFiZWw9XCJGaWxlc1wiIGljb25OYW1lPVwiYWxsb2NhdGlvbnNcIiAvPlxuICAgICAgPFNpZGViYXJJdGVtIHRvPVwiL2FwcHNcIiBsYWJlbD1cIkFwcHNcIiBpY29uTmFtZT1cImFsbG9jYXRpb25zXCIgLz5cbiAgICAgIDxTaWRlYmFySXRlbSB0bz1cIi9qb2JzXCIgbGFiZWw9XCJKb2JzXCIgaWNvbk5hbWU9XCJhbGxvY2F0aW9uc1wiIC8+XG4gICAgICA8U2lkZWJhckl0ZW0gdG89XCIvbGF1bmNoZXJcIiBsYWJlbD1cIkxhdW5jaGVyXCIgaWNvbk5hbWU9XCJhbGxvY2F0aW9uc1wiIC8+XG4gICAgICA8U2lkZWJhckl0ZW0gdG89XCIvdWlwYXR0ZXJuc1wiIGxhYmVsPVwiVUkgUGF0dGVybnNcIiBpY29uTmFtZT1cImNvcHlcIiAvPlxuICAgIDwvTmF2PlxuICApO1xufTtcblxuU2lkZWJhci5kZWZhdWx0UHJvcHMgPSB7XG4gIGp3dDogbnVsbFxufVxuXG5leHBvcnQgZGVmYXVsdCBTaWRlYmFyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IElubGluZU1lc3NhZ2UsIFNlY3Rpb25NZXNzYWdlIH0gZnJvbSAnX2NvbW1vbic7XG5pbXBvcnQgJy4vVUlQYXR0ZXJuc01lc3NhZ2UubW9kdWxlLnNjc3MnO1xuXG5jb25zdCBFWEFNUExFX0xJTksgPSB7XG4gIHNob3J0OiAoXG4gICAgPGFcbiAgICAgIGhyZWY9e3dpbmRvdy5sb2NhdGlvbi5ocmVmfVxuICAgICAgb25DbGljaz17KGUpID0+IGUucHJldmVudERlZmF1bHQoKX1cbiAgICAgIGNsYXNzTmFtZT1cIndiLWxpbmtcIlxuICAgID5cbiAgICAgIEV4YW1wbGUgbGlua1xuICAgIDwvYT5cbiAgKSxcbiAgbG9uZzogKFxuICAgIDxhXG4gICAgICBocmVmPXt3aW5kb3cubG9jYXRpb24uaHJlZn1cbiAgICAgIG9uQ2xpY2s9eyhlKSA9PiBlLnByZXZlbnREZWZhdWx0KCl9XG4gICAgICBjbGFzc05hbWU9XCJ3Yi1saW5rXCJcbiAgICA+XG4gICAgICBFeGFtcGxlIGxpbmsgY2FuIGJlIGEgY29tcGxldGUgc2VudGVuY2UuXG4gICAgPC9hPlxuICApLFxufTtcbmNvbnN0IEVYQU1QTEVfVEVYVCA9IHtcbiAgaW5mbzoge1xuICAgIHNob3J0OiAnWW91IGV4aXN0LicsXG4gICAgbG9uZzogJ0FsbCB5b3VyIGluZm9ybWF0aW9uLCBhcmUgYmVsb25nIHRvIHVzLicsXG4gIH0sXG4gIHN1Y2Nlc3M6IHtcbiAgICBzaG9ydDogJ1dlIGRpZCB3ZWxsLicsXG4gICAgbG9uZzogJ0FsbCB5b3VyIHN1Y2Nlc3MsIGFyZSBiZWxvbmcgdG8gdXMuJyxcbiAgfSxcbiAgd2Fybjoge1xuICAgIHNob3J0OiAnWW91IGRpZCBwb29ybHkuJyxcbiAgICBsb25nOiAnQWxsIHlvdXIgd2FybmluZywgYXJlIGNvbWUgZnJvbSB1cy4nLFxuICB9LFxuICBlcnJvcjoge1xuICAgIHNob3J0OiAnWW91IGZhaWxlZC4nLFxuICAgIGxvbmc6ICdBbGwgeW91ciBlcnJvciwgYXJlIGJlbG9uZyB0byB5b3UuJyxcbiAgfSxcbn07XG5cbmNvbnN0IE5PVElGSUNBVElPTl9URVhUID0gKFxuICA8ZW0+XG4gICAgQ2FuIG5vdCByZW5kZXIgaW4gaXNvbGF0aW9uLiBTZWV7JyAnfVxuICAgIDxhXG4gICAgICBocmVmPVwiaHR0cHM6Ly94ZC5hZG9iZS5jb20vdmlldy9kYjI2NjBjYy0xMDExLTRmMjYtNWQzMS0wMTljZTg3YzFmZTgtYWQxNy9zY3JlZW4vMzgyMWZjM2UtYmRhMS00MGQ0LTllNTAtYTUxNGU5MGFhMDg4L1wiXG4gICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgcmVsPVwibm9yZWZlcnJlclwiXG4gICAgPlxuICAgICAgQWRvYmUgRGVzaWduLlxuICAgIDwvYT5cbiAgPC9lbT5cbik7XG5cbmZ1bmN0aW9uIFVJUGF0dGVybnNNZXNzYWdlcygpIHtcbiAgcmV0dXJuIChcbiAgICA8dGFibGUgc3R5bGVOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICA8dGhlYWQ+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGggc2NvcGU9XCJyb3dcIiBzdHlsZU5hbWU9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICAgIGNvbXBvbmVudFxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+XG4gICAgICAgICAgICA8Y29kZT4mbHQ7SW5saW5lTWVzc2FnZSZndDs8L2NvZGU+XG4gICAgICAgICAgICA8Y29kZT4mbHQ7TWVzc2FnZSBzY29wZT0mcXVvdDtpbmxpbmUmcXVvdDsmZ3Q7PC9jb2RlPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+XG4gICAgICAgICAgICA8Y29kZT4mbHQ7U2VjdGlvbk1lc3NhZ2UgKGNhbkRpc21pc3MpJmd0OzwvY29kZT5cbiAgICAgICAgICAgIDxjb2RlPiZsdDtNZXNzYWdlIHNjb3BlPSZxdW90O3NlY3Rpb24mcXVvdDsgKGNhbkRpc21pc3MpJmd0OzwvY29kZT5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiPlxuICAgICAgICAgICAgPGNvZGU+XG4gICAgICAgICAgICAgIDxzPiZsdDtBcHBNZXNzYWdlJmd0Ozwvcz5cbiAgICAgICAgICAgIDwvY29kZT5cbiAgICAgICAgICAgIDxjb2RlPiZsdDtOb3RpZmNhdGlvblRvYXN0Jmd0OzwvY29kZT5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoIHNjb3BlPVwicm93XCIgc3R5bGVOYW1lPVwic2Vjb25kYXJ5XCI+XG4gICAgICAgICAgICA8Y29kZT5zY29wZTwvY29kZT5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiPlxuICAgICAgICAgICAgPGNvZGU+aW5saW5lPC9jb2RlPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+XG4gICAgICAgICAgICA8Y29kZT5zZWN0aW9uPC9jb2RlPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+XG4gICAgICAgICAgICA8Y29kZT5hcHA8L2NvZGU+XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiIHN0eWxlTmFtZT1cInNlY29uZGFyeVwiPlxuICAgICAgICAgICAgPGNvZGU+dHlwZTwvY29kZT5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIFdoZW4gdG8gVXNlXG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgIDxsaT5hY3Rpb24gcmVzdWx0IHN0YXRlbWVudCBpbiB0YWJsZSByb3c8L2xpPlxuICAgICAgICAgICAgICA8bGk+bWVzc2FnZSB3aGVuIHRhYmxlIGNhbiBub3QgbG9hZCBkYXRhPC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICBXaGVuIHRvIFVzZVxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICA8bGk+d2FybmluZyBhdCB0aGUgdG9wIG9mIGEgZm9ybTwvbGk+XG4gICAgICAgICAgICAgIDxsaT5tZXNzYWdlIGFmdGVyIHN1Y2Nlc3NmdWwgc3VibWlzc2lvbiBvZiBmb3JtPC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICBXaGVuIHRvIFVzZVxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICA8bGk+dXNlciBhY3Rpb24gaXMgcmVxdWlyZWQ8L2xpPlxuICAgICAgICAgICAgICA8bGk+aW1wb3J0YW50IHVzZXItaW5pdGlhdGVkIGFjdGlvbiBpcyBjb21wbGV0ZWQ8L2xpPlxuICAgICAgICAgICAgICA8bGk+c2VjdXJpdHkgY29uY2VybjwvbGk+XG4gICAgICAgICAgICAgIDxsaT5taWxlc3RvbmUgZm9yIHRpbWUtc2Vuc2l0aXZlIGFjdGl2aXR5PC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGhlYWQ+XG4gICAgICA8dGJvZHk+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGggc2NvcGU9XCJyb3dcIj5cbiAgICAgICAgICAgIDxjb2RlPmluZm88L2NvZGU+XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8SW5saW5lTWVzc2FnZSB0eXBlPVwiaW5mb1wiPlxuICAgICAgICAgICAgICB7RVhBTVBMRV9URVhULmluZm8ubG9uZ30ge0VYQU1QTEVfTElOSy5zaG9ydH1cbiAgICAgICAgICAgIDwvSW5saW5lTWVzc2FnZT5cbiAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgPElubGluZU1lc3NhZ2UgdHlwZT1cImluZm9cIj5cbiAgICAgICAgICAgICAge0VYQU1QTEVfVEVYVC5pbmZvLnNob3J0fSB7RVhBTVBMRV9MSU5LLmxvbmd9XG4gICAgICAgICAgICA8L0lubGluZU1lc3NhZ2U+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8U2VjdGlvbk1lc3NhZ2UgdHlwZT1cImluZm9cIj5cbiAgICAgICAgICAgICAge0VYQU1QTEVfVEVYVC5pbmZvLmxvbmd9IHtFWEFNUExFX0xJTksuc2hvcnR9XG4gICAgICAgICAgICA8L1NlY3Rpb25NZXNzYWdlPlxuICAgICAgICAgICAgPFNlY3Rpb25NZXNzYWdlIHR5cGU9XCJpbmZvXCIgY2FuRGlzbWlzcz5cbiAgICAgICAgICAgICAge0VYQU1QTEVfVEVYVC5pbmZvLnNob3J0fSB7RVhBTVBMRV9MSU5LLmxvbmd9XG4gICAgICAgICAgICA8L1NlY3Rpb25NZXNzYWdlPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkIHJvd1NwYW49XCIyXCI+e05PVElGSUNBVElPTl9URVhUfTwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGggc2NvcGU9XCJyb3dcIj5cbiAgICAgICAgICAgIDxjb2RlPnN1Y2Nlc3M8L2NvZGU+XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8SW5saW5lTWVzc2FnZSB0eXBlPVwic3VjY2Vzc1wiPlxuICAgICAgICAgICAgICB7RVhBTVBMRV9URVhULnN1Y2Nlc3MubG9uZ30ge0VYQU1QTEVfTElOSy5zaG9ydH1cbiAgICAgICAgICAgIDwvSW5saW5lTWVzc2FnZT5cbiAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgPElubGluZU1lc3NhZ2UgdHlwZT1cInN1Y2Nlc3NcIj5cbiAgICAgICAgICAgICAge0VYQU1QTEVfVEVYVC5zdWNjZXNzLnNob3J0fSB7RVhBTVBMRV9MSU5LLmxvbmd9XG4gICAgICAgICAgICA8L0lubGluZU1lc3NhZ2U+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8U2VjdGlvbk1lc3NhZ2UgdHlwZT1cInN1Y2Nlc3NcIj5cbiAgICAgICAgICAgICAge0VYQU1QTEVfVEVYVC5zdWNjZXNzLmxvbmd9IHtFWEFNUExFX0xJTksuc2hvcnR9XG4gICAgICAgICAgICA8L1NlY3Rpb25NZXNzYWdlPlxuICAgICAgICAgICAgPFNlY3Rpb25NZXNzYWdlIHR5cGU9XCJzdWNjZXNzXCIgY2FuRGlzbWlzcz5cbiAgICAgICAgICAgICAge0VYQU1QTEVfVEVYVC5zdWNjZXNzLnNob3J0fSB7RVhBTVBMRV9MSU5LLmxvbmd9XG4gICAgICAgICAgICA8L1NlY3Rpb25NZXNzYWdlPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgey8qIDx0ZCAvPiAqL31cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aCBzY29wZT1cInJvd1wiPlxuICAgICAgICAgICAgPGNvZGU+d2FybjwvY29kZT5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxJbmxpbmVNZXNzYWdlIHR5cGU9XCJ3YXJuXCI+XG4gICAgICAgICAgICAgIHtFWEFNUExFX1RFWFQud2Fybi5sb25nfSB7RVhBTVBMRV9MSU5LLnNob3J0fVxuICAgICAgICAgICAgPC9JbmxpbmVNZXNzYWdlPlxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgICA8SW5saW5lTWVzc2FnZSB0eXBlPVwid2FyblwiPlxuICAgICAgICAgICAgICB7RVhBTVBMRV9URVhULndhcm4uc2hvcnR9IHtFWEFNUExFX0xJTksubG9uZ31cbiAgICAgICAgICAgIDwvSW5saW5lTWVzc2FnZT5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxTZWN0aW9uTWVzc2FnZSB0eXBlPVwid2FyblwiPlxuICAgICAgICAgICAgICB7RVhBTVBMRV9URVhULndhcm4ubG9uZ30ge0VYQU1QTEVfTElOSy5zaG9ydH1cbiAgICAgICAgICAgIDwvU2VjdGlvbk1lc3NhZ2U+XG4gICAgICAgICAgICA8U2VjdGlvbk1lc3NhZ2UgdHlwZT1cIndhcm5cIiBjYW5EaXNtaXNzPlxuICAgICAgICAgICAgICB7RVhBTVBMRV9URVhULndhcm4uc2hvcnR9IHtFWEFNUExFX0xJTksubG9uZ31cbiAgICAgICAgICAgIDwvU2VjdGlvbk1lc3NhZ2U+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgcm93U3Bhbj1cIjJcIiBzdHlsZU5hbWU9XCJpcy1yb3ctZW5kXCI+XG4gICAgICAgICAgICB7Tk9USUZJQ0FUSU9OX1RFWFR9XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aCBzY29wZT1cInJvd1wiPlxuICAgICAgICAgICAgPGNvZGU+ZXJyb3I8L2NvZGU+XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8SW5saW5lTWVzc2FnZSB0eXBlPVwiZXJyb3JcIj5cbiAgICAgICAgICAgICAge0VYQU1QTEVfVEVYVC5lcnJvci5sb25nfSB7RVhBTVBMRV9MSU5LLnNob3J0fVxuICAgICAgICAgICAgPC9JbmxpbmVNZXNzYWdlPlxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgICA8SW5saW5lTWVzc2FnZSB0eXBlPVwiZXJyb3JcIj5cbiAgICAgICAgICAgICAge0VYQU1QTEVfVEVYVC5lcnJvci5zaG9ydH0ge0VYQU1QTEVfTElOSy5sb25nfVxuICAgICAgICAgICAgPC9JbmxpbmVNZXNzYWdlPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPFNlY3Rpb25NZXNzYWdlIHR5cGU9XCJlcnJvclwiPlxuICAgICAgICAgICAgICB7RVhBTVBMRV9URVhULmVycm9yLmxvbmd9IHtFWEFNUExFX0xJTksuc2hvcnR9XG4gICAgICAgICAgICA8L1NlY3Rpb25NZXNzYWdlPlxuICAgICAgICAgICAgPFNlY3Rpb25NZXNzYWdlIHR5cGU9XCJlcnJvclwiIGNhbkRpc21pc3M+XG4gICAgICAgICAgICAgIHtFWEFNUExFX1RFWFQuZXJyb3Iuc2hvcnR9IHtFWEFNUExFX0xJTksubG9uZ31cbiAgICAgICAgICAgIDwvU2VjdGlvbk1lc3NhZ2U+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICB7LyogPHRkIC8+ICovfVxuICAgICAgICA8L3RyPlxuICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVSVBhdHRlcm5zTWVzc2FnZXM7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRGVzY3JpcHRpb25MaXN0LCBJY29uIH0gZnJvbSAnX2NvbW1vbic7XG5cbmltcG9ydCAnLi9VSVBhdHRlcm5zRGVzY3JpcHRpb25MaXN0Lm1vZHVsZS5jc3MnO1xuXG5jb25zdCBEQVRBID0ge1xuICBVc2VybmFtZTogJ2JvYndhcmQ1MDAnLFxuICBQcmVmaXg6ICdNci4nLFxuICBOYW1lOiAnQm9iIFdhcmQnLFxuICBTdWZmaXg6ICdUaGUgNXRoJyxcbiAgJ0Zhdm9yaXRlIE51bWVyaWMgVmFsdWUnOiA1LFxuICBJY29uOiA8SWNvbiBuYW1lPVwiZGFzaGJvYXJkXCIgLz4sXG59O1xuXG5mdW5jdGlvbiBVSVBhdHRlcm5zRHJvcGRvd25TZWxlY3RvcigpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBzdHlsZU5hbWU9XCJsaXN0LWNvbHNcIj5cbiAgICAgICAgPGRsPlxuICAgICAgICAgIDxkdD5WZXJ0aWNhbCBMYXlvdXQgJiBEZWZhdWx0IERlbnNpdHk8L2R0PlxuICAgICAgICAgIDxkZD5cbiAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxpc3QgZGF0YT17REFUQX0gLz5cbiAgICAgICAgICA8L2RkPlxuICAgICAgICA8L2RsPlxuICAgICAgICA8ZGw+XG4gICAgICAgICAgPGR0PlZlcnRpY2FsIExheW91dCAmIENvbXBhY3QgRGVuc2l0eTwvZHQ+XG4gICAgICAgICAgPGRkPlxuICAgICAgICAgICAgPERlc2NyaXB0aW9uTGlzdCBkYXRhPXtEQVRBfSBkZW5zaXR5PVwiY29tcGFjdFwiIC8+XG4gICAgICAgICAgPC9kZD5cbiAgICAgICAgPC9kbD5cbiAgICAgICAgPGRsPlxuICAgICAgICAgIDxkdD5WZXJ0aWNhbCBMYXlvdXQgJiBDb21wYWN0IERlbnNpdHkgLSBOYXJyb3cgQ29udGFpbmVyPC9kdD5cbiAgICAgICAgICA8ZGQ+XG4gICAgICAgICAgICA8RGVzY3JpcHRpb25MaXN0XG4gICAgICAgICAgICAgIGRhdGE9e0RBVEF9XG4gICAgICAgICAgICAgIGRlbnNpdHk9XCJjb21wYWN0XCJcbiAgICAgICAgICAgICAgc3R5bGVOYW1lPVwiaXRlbS14LW5hcnJvd1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGQ+XG4gICAgICAgIDwvZGw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGVOYW1lPVwibGlzdC1yb3dzXCI+XG4gICAgICAgIDxkbD5cbiAgICAgICAgICA8ZHQ+SG9yaXpvbnRhbCBMYXlvdXQgJiBEZWZhdWx0IERlbnNpdHk8L2R0PlxuICAgICAgICAgIDxkZD5cbiAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxpc3QgZGF0YT17REFUQX0gZGlyZWN0aW9uPVwiaG9yaXpvbnRhbFwiIC8+XG4gICAgICAgICAgPC9kZD5cbiAgICAgICAgICA8ZHQ+SG9yaXpvbnRhbCBMYXlvdXQgJiBDb21wYWN0IERlbnNpdHk8L2R0PlxuICAgICAgICAgIDxkZD5cbiAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxpc3RcbiAgICAgICAgICAgICAgZGF0YT17REFUQX1cbiAgICAgICAgICAgICAgZGVuc2l0eT1cImNvbXBhY3RcIlxuICAgICAgICAgICAgICBkaXJlY3Rpb249XCJob3Jpem9udGFsXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kZD5cbiAgICAgICAgICA8ZHQ+SG9yaXpvbnRhbCBMYXlvdXQgJiBDb21wYWN0IERlbnNpdHkgLSBOYXJyb3cgQ29udGFpbmVyPC9kdD5cbiAgICAgICAgICA8ZGQ+XG4gICAgICAgICAgICA8RGVzY3JpcHRpb25MaXN0XG4gICAgICAgICAgICAgIGRhdGE9e0RBVEF9XG4gICAgICAgICAgICAgIGRlbnNpdHk9XCJjb21wYWN0XCJcbiAgICAgICAgICAgICAgZGlyZWN0aW9uPVwiaG9yaXpvbnRhbFwiXG4gICAgICAgICAgICAgIHN0eWxlTmFtZT1cIml0ZW0tbmFycm93XCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kZD5cbiAgICAgICAgPC9kbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBzdHlsZU5hbWU9XCJsaXN0LXJvd3NcIj5cbiAgICAgICAgPGRsPlxuICAgICAgICAgIDxkdD5WZXJ0aWNhbCBMYXlvdXQgJiBOZXN0ZWQgRGF0YTwvZHQ+XG4gICAgICAgICAgPGRkPlxuICAgICAgICAgICAgPERlc2NyaXB0aW9uTGlzdFxuICAgICAgICAgICAgICBkYXRhPXt7XG4gICAgICAgICAgICAgICAgJ05lc3RlZCBMaXN0IE9uZSc6IChcbiAgICAgICAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxpc3QgZGF0YT17REFUQX0gZGlyZWN0aW9uPVwidmVydGljYWxcIiAvPlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgJ05lc3RlZCBMaXN0IFR3byc6IChcbiAgICAgICAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxpc3QgZGF0YT17REFUQX0gZGlyZWN0aW9uPVwidmVydGljYWxcIiAvPlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGQ+XG4gICAgICAgICAgPGR0Pkhvcml6b250YWwgTGF5b3V0ICYgTmVzdGVkIERhdGE8L2R0PlxuICAgICAgICAgIDxkZD5cbiAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxpc3RcbiAgICAgICAgICAgICAgZGF0YT17e1xuICAgICAgICAgICAgICAgICdOZXN0ZWQgTGlzdCBPbmUnOiAoXG4gICAgICAgICAgICAgICAgICA8RGVzY3JpcHRpb25MaXN0IGRhdGE9e0RBVEF9IGRpcmVjdGlvbj1cImhvcml6b250YWxcIiAvPlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgJ05lc3RlZCBMaXN0IFR3byc6IChcbiAgICAgICAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxpc3QgZGF0YT17REFUQX0gZGlyZWN0aW9uPVwiaG9yaXpvbnRhbFwiIC8+XG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgZGlyZWN0aW9uPVwidmVydGljYWxcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2RkPlxuICAgICAgICA8L2RsPlxuICAgICAgPC9kaXY+XG4gICAgPC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVJUGF0dGVybnNEcm9wZG93blNlbGVjdG9yO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERyb3Bkb3duU2VsZWN0b3IgfSBmcm9tICdfY29tbW9uJztcblxuZnVuY3Rpb24gVUlQYXR0ZXJuc0Ryb3Bkb3duU2VsZWN0b3IoKSB7XG4gIHJldHVybiAoXG4gICAgPGRsPlxuICAgICAgPGR0PlxuICAgICAgICBEZWZhdWx0ICg8Y29kZT5zaW5nbGU8L2NvZGU+KVxuICAgICAgPC9kdD5cbiAgICAgIDxkZD5cbiAgICAgICAgPHNtYWxsPk9ubHkgZmllbGQgKG5vdCBkcm9wZG93bikgY2FuIGJlIHN0eWxlZCBjcm9zcy1icm93c2VyLjwvc21hbGw+XG4gICAgICAgIDxEcm9wZG93blNlbGVjdG9yPlxuICAgICAgICAgIDxvcHRncm91cCBsYWJlbD1cIkNyeXB0b2dyYXBoaWMgUGVvcGxlXCI+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYWxpY2VcIj5BbGljZTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImJvYlwiPkJvYjwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImNoYXJsaWVcIj5DaGFybGllPC9vcHRpb24+XG4gICAgICAgICAgPC9vcHRncm91cD5cbiAgICAgICAgICA8b3B0Z3JvdXAgbGFiZWw9XCJDb21tb24gQW1lcmljYW4gRnJ1aXRcIj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhcHBsZVwiPkFwcGxlPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYmFuYW5hXCI+QmFuYW5hPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZ3JhcGVzXCI+R3JhcGVzPC9vcHRpb24+XG4gICAgICAgICAgPC9vcHRncm91cD5cbiAgICAgICAgPC9Ecm9wZG93blNlbGVjdG9yPlxuICAgICAgPC9kZD5cbiAgICAgIDxkdD5cbiAgICAgICAgTXVsdGlwbGUgKDxjb2RlPm11bHRpcGxlPC9jb2RlPilcbiAgICAgIDwvZHQ+XG4gICAgICA8ZGQ+XG4gICAgICAgIDxzbWFsbD5TdHlsaW5nIG9wdGlvbnMgYXJlIGxpbWl0ZWQgYW5kIGJyb3dzZXItZGVwZW5kZW50Ljwvc21hbGw+XG4gICAgICAgIDxEcm9wZG93blNlbGVjdG9yIHR5cGU9XCJtdWx0aXBsZVwiPlxuICAgICAgICAgIDxvcHRncm91cCBsYWJlbD1cIkNyeXB0b2dyYXBoaWMgUGVvcGxlXCI+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYWxpY2VcIj5BbGljZTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImJvYlwiPkJvYjwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImNoYXJsaWVcIj5DaGFybGllPC9vcHRpb24+XG4gICAgICAgICAgPC9vcHRncm91cD5cbiAgICAgICAgICA8b3B0Z3JvdXAgbGFiZWw9XCJDb21tb24gQW1lcmljYW4gRnJ1aXRcIj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhcHBsZVwiPkFwcGxlPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYmFuYW5hXCI+QmFuYW5hPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZ3JhcGVzXCI+R3JhcGVzPC9vcHRpb24+XG4gICAgICAgICAgPC9vcHRncm91cD5cbiAgICAgICAgPC9Ecm9wZG93blNlbGVjdG9yPlxuICAgICAgPC9kZD5cbiAgICA8L2RsPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVSVBhdHRlcm5zRHJvcGRvd25TZWxlY3RvcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQaWxsIH0gZnJvbSAnX2NvbW1vbic7XG5cbmZ1bmN0aW9uIFVJUGF0dGVybnNQaWxsKCkge1xuICByZXR1cm4gKFxuICAgIDxkbD5cbiAgICAgIDxkdD5EZWZhdWx0IFBpbGwgKG5vcm1hbCk8L2R0PlxuICAgICAgPGRkPlxuICAgICAgICA8UGlsbD5FeGFtcGxlIFBpbGw8L1BpbGw+XG4gICAgICA8L2RkPlxuICAgICAgPGR0Pk5vcm1hbCBQaWxsPC9kdD5cbiAgICAgIDxkZD5cbiAgICAgICAgPFBpbGwgdHlwZT1cIm5vcm1hbFwiPk5vcm1hbCBQaWxsPC9QaWxsPlxuICAgICAgPC9kZD5cbiAgICAgIDxkdD5TdWNjZXNzIFBpbGw8L2R0PlxuICAgICAgPGRkPlxuICAgICAgICA8UGlsbCB0eXBlPVwic3VjY2Vzc1wiPlN1Y2Nlc3MgUGlsbDwvUGlsbD5cbiAgICAgIDwvZGQ+XG4gICAgICA8ZHQ+V2FybmluZyBQaWxsPC9kdD5cbiAgICAgIDxkZD5cbiAgICAgICAgPFBpbGwgdHlwZT1cIndhcm5pbmdcIj5XYXJuaW5nIFBpbGw8L1BpbGw+XG4gICAgICA8L2RkPlxuICAgICAgPGR0PkRhbmdlciBQaWxsPC9kdD5cbiAgICAgIDxkZD5cbiAgICAgICAgPFBpbGwgdHlwZT1cImRhbmdlclwiPkRhbmdlciBQaWxsPC9QaWxsPlxuICAgICAgPC9kZD5cbiAgICA8L2RsPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVSVBhdHRlcm5zUGlsbDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFkTW9yZSB9IGZyb20gJ19jb21tb24nO1xuaW1wb3J0ICcuL1VJUGF0dGVybnNSZWFkTW9yZS5tb2R1bGUuc2Nzcyc7XG5cbmZ1bmN0aW9uIFVJUGF0dGVybnNSZWFkTW9yZSgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlTmFtZT1cInJvb3RcIj5cbiAgICAgIDxSZWFkTW9yZT5cbiAgICAgICAgTG9uZyB0ZXh0IGJleW9uZCA0IGxpbmVzIHNob3VsZCBiZSBjbGFtcGVkLiBTaG9ydCB0ZXh0IHNob3VsZCBub3QgYmVcbiAgICAgICAgY2xhbXBlZC4gVGhpcyBlbGVtZW50IGlzIHJlc3BvbnNpdmUgdG8gbGluZSBudW1iZXIgY2hhbmdlcyBkdWUgdG8gd2luZG93XG4gICAgICAgIHJlc2l6aW5nLiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEdWlzXG4gICAgICAgIGRhcGlidXMgbGVvIG9ybmFyZSBzZW0gbW9sbGlzIHZpdmVycmEuIFNlZCBtZXR1cyB0b3J0b3IsIGx1Y3R1cyB2aXRhZVxuICAgICAgICB0ZW1wdXMgYSwgY29uc2VjdGV0dXIgZXUgZW5pbS4gVml2YW11cyBldWlzbW9kIGFudGUgc2VkIGF1Z3VlIGFsaXF1YW0sXG4gICAgICAgIGF0IHZlbmVuYXRpcyByaXN1cyB2YXJpdXMuIER1aXMgbGFvcmVldCwgdGVsbHVzIGF0IGV1aXNtb2QgY29uc2VxdWF0LFxuICAgICAgICBudWxsYSBuZXF1ZSB2ZXN0aWJ1bHVtIHNhcGllbiwgYXQgcGxhY2VyYXQgZXJhdCBuaWJoIGF0IGxpZ3VsYS4gSW50ZXJkdW1cbiAgICAgICAgZXQgbWFsZXN1YWRhIGZhbWVzIGFjIGFudGUgaXBzdW0gcHJpbWlzIGluIGZhdWNpYnVzLiBWZXN0aWJ1bHVtIG1hdHRpc1xuICAgICAgICBlbGl0IG5vbiBlbmltIGdyYXZpZGEgdGVtcHVzLiBRdWlzcXVlIGV0IG5pc2kgbGlndWxhLiBRdWlzcXVlIHNhZ2l0dGlzXG4gICAgICAgIHZlbCBleCBzZWQgcmhvbmN1cy4gSW4gbGFjdXMgcHVydXMsIGVsZW1lbnR1bSB2ZWwgdWxsYW1jb3JwZXIgYXQsXG4gICAgICAgIGFjY3Vtc2FuIGNvbmd1ZSBzZW0uIE1vcmJpIGV1IG1hdHRpcyBtYWduYS4gRG9uZWMgYXJjdSBsaWd1bGEsIG1vbGxpcyBhY1xuICAgICAgICBsZW8gdXQsIHByZXRpdW0gZXVpc21vZCB0dXJwaXMuIE1hZWNlbmFzIHF1aXMgZWxpdCBpZCBkdWkgdmVoaWN1bGFcbiAgICAgICAgc2FnaXR0aXMgc2VtcGVyIGFsaXF1ZXQgZW5pbS5cbiAgICAgIDwvUmVhZE1vcmU+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVJUGF0dGVybnNSZWFkTW9yZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVUlQYXR0ZXJuc01lc3NhZ2UgZnJvbSAnLi9VSVBhdHRlcm5zTWVzc2FnZSc7XG5pbXBvcnQgVUlQYXR0ZXJuc0Rlc2NyaXB0aW9uTGlzdCBmcm9tICcuL1VJUGF0dGVybnNEZXNjcmlwdGlvbkxpc3QnO1xuaW1wb3J0IFVJUGF0dGVybnNEcm9wZG93blNlbGVjdG9yIGZyb20gJy4vVUlQYXR0ZXJuc0Ryb3Bkb3duU2VsZWN0b3InO1xuaW1wb3J0IFVJUGF0dGVybnNQaWxsIGZyb20gJy4vVUlQYXR0ZXJuc1BpbGwnO1xuaW1wb3J0IFVJUGF0dGVybnNSZWFkTW9yZSBmcm9tICcuL1VJUGF0dGVybnNSZWFkTW9yZSc7XG5pbXBvcnQgJy4vVUlQYXR0ZXJucy5tb2R1bGUuc2Nzcyc7XG5cbmZ1bmN0aW9uIFVJUGF0dGVybnMoKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZU5hbWU9XCJjb250YWluZXJcIj5cbiAgICAgIDxkaXYgc3R5bGVOYW1lPVwiaGVhZGVyXCI+XG4gICAgICAgIDxoNT5VSSBQYXR0ZXJuczwvaDU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGVOYW1lPVwiaXRlbXNcIj5cbiAgICAgICAgPGRpdiBzdHlsZU5hbWU9XCJncmlkLWl0ZW1cIj5cbiAgICAgICAgICA8aDY+TWVzc2FnZSAmYW1wOyBOb3RpZmljYXRpb248L2g2PlxuICAgICAgICAgIDxVSVBhdHRlcm5zTWVzc2FnZSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZU5hbWU9XCJncmlkLWl0ZW1cIj5cbiAgICAgICAgICA8aDY+RHJvcGRvd25TZWxlY3RvcjwvaDY+XG4gICAgICAgICAgPFVJUGF0dGVybnNEcm9wZG93blNlbGVjdG9yIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHN0eWxlTmFtZT1cIml0ZW1zXCI+XG4gICAgICAgIDxkaXYgc3R5bGVOYW1lPVwiZ3JpZC1pdGVtXCI+XG4gICAgICAgICAgPGg2PkRlc2NyaXB0aW9uTGlzdDwvaDY+XG4gICAgICAgICAgPFVJUGF0dGVybnNEZXNjcmlwdGlvbkxpc3QgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGVOYW1lPVwiaXRlbXNcIj5cbiAgICAgICAgPGRpdiBzdHlsZU5hbWU9XCJncmlkLWl0ZW1cIj5cbiAgICAgICAgICA8aDY+UGlsbHM8L2g2PlxuICAgICAgICAgIDxVSVBhdHRlcm5zUGlsbCAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBzdHlsZU5hbWU9XCJpdGVtc1wiPlxuICAgICAgICA8ZGl2IHN0eWxlTmFtZT1cImdyaWQtaXRlbVwiPlxuICAgICAgICAgIDxoNj5SZWFkIE1vcmU8L2g2PlxuICAgICAgICAgIDxVSVBhdHRlcm5zUmVhZE1vcmUgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVUlQYXR0ZXJucztcbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgTGF1bmNoZXIgfSBmcm9tICcuL0xhdW5jaGVyJztcblxuZXhwb3J0IGRlZmF1bHQgTGF1bmNoZXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgeyBKb2JMYXVuY2hlciB9IGZyb20gJ3RhcGlzLXVpL2NvbXBvbmVudHMvam9icyc7XG5pbXBvcnQgeyBKb2JzIH0gZnJvbSAnQHRhcGlzL3RhcGlzLXR5cGVzY3JpcHQnO1xuXG5jb25zdCBMYXVuY2hlcjogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIC8vY29uc3QgeyBhcHBJZCwgYXBwVmVyc2lvbiB9ID0gdXNlUGFyYW1zKCk7XG4gIGNvbnN0IGFwcElkID0gXCJTbGVlcFNlY29uZHNcIjtcbiAgY29uc3QgYXBwVmVyc2lvbiA9IFwiMC4wLjFcIjtcbiAgY29uc3QgaW5pdGlhbFZhbHVlczogSm9icy5SZXFTdWJtaXRKb2IgPSB7XG4gICAgYXBwSWQsXG4gICAgYXBwVmVyc2lvbixcbiAgICBuYW1lOiBgJHthcHBJZH0tJHthcHBWZXJzaW9ufS0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAtNSl9YCxcbiAgICBleGVjU3lzdGVtSWQ6ICd0YXBpc3YzLWV4ZWMnXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEpvYkxhdW5jaGVyIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXN9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF1bmNoZXI7IiwiaW1wb3J0IHsgaG90IH0gZnJvbSAncmVhY3QtaG90LWxvYWRlci9yb290JztcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IExvZ2luLCBTeXN0ZW1zIH0gZnJvbSAndGFwaXMtdWkvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBcHBzTGlzdGluZyB9IGZyb20gJ3RhcGlzLXVpL2NvbXBvbmVudHMvYXBwcyc7XG5pbXBvcnQgeyBGaWxlTGlzdGluZyB9IGZyb20gJ3RhcGlzLXVpL2NvbXBvbmVudHMvZmlsZXMnO1xuaW1wb3J0IHsgSm9ic0xpc3RpbmcgfSBmcm9tICd0YXBpcy11aS9jb21wb25lbnRzL2pvYnMnO1xuaW1wb3J0IHsgTG9naW5DYWxsYmFjayB9IGZyb20gJ3RhcGlzLXJlZHV4L2F1dGhlbnRpY2F0b3IvdHlwZXMnO1xuaW1wb3J0IHsgU3lzdGVtc0xpc3RDYWxsYmFjayB9IGZyb20gJ3RhcGlzLXJlZHV4L3N5c3RlbXMvdHlwZXMnO1xuaW1wb3J0IHsgT25TZWxlY3RDYWxsYmFjayBhcyBBcHBTZWxlY3RDYWxsYmFjayB9IGZyb20gJ3RhcGlzLXVpL2NvbXBvbmVudHMvYXBwcy9BcHBzTGlzdGluZyc7XG5pbXBvcnQgeyBUYXBpc1N5c3RlbSB9IGZyb20gJ0B0YXBpcy90YXBpcy10eXBlc2NyaXB0LXN5c3RlbXMnO1xuaW1wb3J0IHsgVGFwaXNBcHAgfSBmcm9tICdAdGFwaXMvdGFwaXMtdHlwZXNjcmlwdC1hcHBzJztcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgdXNlQXBwcywgdXNlU3lzdGVtcyB9IGZyb20gJ3RhcGlzLXJlZHV4JztcbmltcG9ydCBTaWRlYmFyIGZyb20gJy4uL1NpZGViYXIvU2lkZWJhcic7XG5pbXBvcnQgVUlQYXR0ZXJucyBmcm9tICcuLi9VSVBhdHRlcm5zJztcbmltcG9ydCBMYXVuY2hlciBmcm9tICcuLi9MYXVuY2hlcic7XG5pbXBvcnQgJy4vQXBwLnNjc3MnO1xuXG5jb25zdCBBcHA6IFJlYWN0LkZDID0gKCkgPT4ge1xuICAvLyBEZW1vbnN0cmF0aW9uIG9mIHVzaW5nIHNvbWUgdHlwZSBvZiBleHRlcm5hbCBzdGF0ZVxuICAvLyBtYW5hZ2VtZW50IHRoYXQgaXNuJ3QgdGFwaXMtcmVkdXhcbiAgY29uc3QgW2p3dCwgc2V0Snd0XSA9IHVzZVN0YXRlPHN0cmluZz4obnVsbCk7XG4gIGNvbnN0IFtzZWxlY3RlZFN5c3RlbSwgc2V0U2VsZWN0ZWRTeXN0ZW1dID0gdXNlU3RhdGU8VGFwaXNTeXN0ZW0+KG51bGwpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGxpc3RBcHBzID0gdXNlQXBwcygpLmxpc3Q7XG4gIGNvbnN0IGxpc3RTeXN0ZW1zID0gdXNlU3lzdGVtcygpLmxpc3Q7XG5cbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcbiAgXG4gIGNvbnN0IGF1dGhDYWxsYmFjayA9IHVzZUNhbGxiYWNrPExvZ2luQ2FsbGJhY2s+KFxuICAgIChyZXN1bHQpID0+IHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICBjb25zb2xlLmxvZyhcIkF1dGhlbnRpY2F0aW9uIGFwaSByZXN1bHRcIiwgcmVzdWx0KTtcbiAgICAgIC8vIEhhbmRsZSBlcnJvcnMgZHVyaW5nIGxvZ2luXG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gU2V0IGxvY2FsIHZpZXcgc3RhdGVcbiAgICAgIHNldEp3dChyZXN1bHQuYWNjZXNzX3Rva2VuKTtcbiAgICAgIC8vIENhbiBtYWtlIGFsc28gbWFrZSBhbiBleHRlcm5hbCBjYWxsIHRvIHByb3BhZ2F0ZSB0aGUgbG9naW4gcmVzdWx0XG4gICAgICBkaXNwYXRjaChsaXN0QXBwcyh7fSkpO1xuICAgICAgZGlzcGF0Y2gobGlzdFN5c3RlbXMoe30pKTtcbiAgICB9LFxuICAgIFtzZXRKd3RdXG4gICk7XG5cbiAgY29uc3Qgc3lzdGVtc0xpc3RDYWxsYmFjayA9IHVzZUNhbGxiYWNrPFN5c3RlbXNMaXN0Q2FsbGJhY2s+KFxuICAgIChyZXN1bHQpID0+IHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICBjb25zb2xlLmxvZyhcIlN5c3RlbXMgbGlzdGluZyBhcGkgcmVzdWx0XCIsIHJlc3VsdCk7XG4gICAgfSxcbiAgICBbXVxuICApXG5cbiAgY29uc3Qgc3lzdGVtU2VsZWN0Q2FsbGJhY2sgPSB1c2VDYWxsYmFjayhcbiAgICAoc3lzdGVtOiBUYXBpc1N5c3RlbSkgPT4ge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIGNvbnNvbGUubG9nKFwiU3lzdGVtIHNlbGVjdGVkXCIsIHN5c3RlbSk7XG4gICAgICBzZXRTZWxlY3RlZFN5c3RlbShzeXN0ZW0pO1xuICAgIH0sXG4gICAgW3NldFNlbGVjdGVkU3lzdGVtXVxuICApXG5cbiAgY29uc3QgYXBwU2VsZWN0Q2FsbGJhY2sgPSB1c2VDYWxsYmFjazxBcHBTZWxlY3RDYWxsYmFjaz4oXG4gICAgKGFwcDogVGFwaXNBcHApID0+IHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICBjb25zb2xlLmxvZyhcIkFwcCBzZWxlY3RlZFwiLCBhcHApO1xuICAgICAgaGlzdG9yeS5wdXNoKGAvbGF1bmNoLyR7YXBwLmlkfS8ke2FwcC52ZXJzaW9ufWApXG4gICAgfSxcbiAgICBbIGhpc3RvcnkgXVxuICApXG5cbiAgLy8gRGVtb25zdHJhdGlvbiBvZiBjb25maWcgdG8gdXNlIGFsdGVybmF0ZSBVUkxzIG9yIHByb3ZpZGVkIHRva2Vuc1xuICBjb25zdCBjb25maWcgPSB7XG4gICAgand0LFxuICAgIHRlbmFudDogJ2h0dHBzOi8vZGV2LmRldmVsb3AudGFwaXMuaW8nLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3b3JrYmVuY2gtd3JhcHBlclwiPlxuICAgICAgPFNpZGViYXIgand0PXtqd3R9Lz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwid29ya2JlbmNoLWNvbnRlbnRcIj5cbiAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy8nPlxuICAgICAgICAgIDxkaXY+SGVsbG8gV29ybGQhPC9kaXY+XG4gICAgICAgIDwvUm91dGU+XG4gICAgICAgIDxSb3V0ZSBwYXRoPScvbG9naW4nPlxuICAgICAgICAgIDxMb2dpbiBjb25maWc9e2NvbmZpZ30gb25BdXRoPXthdXRoQ2FsbGJhY2t9IC8+XG4gICAgICAgIDwvUm91dGU+XG4gICAgICAgIDxSb3V0ZSBwYXRoPScvc3lzdGVtcyc+XG4gICAgICAgICAgPFN5c3RlbXMgY29uZmlnPXtjb25maWd9IG9uTGlzdD17c3lzdGVtc0xpc3RDYWxsYmFja30gb25TZWxlY3Q9e3N5c3RlbVNlbGVjdENhbGxiYWNrfSAvPlxuICAgICAgICA8L1JvdXRlPlxuICAgICAgICA8Um91dGUgcGF0aD0nL2ZpbGVzJz5cbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCBiZSBhIHRhcGlzLWFwcCBmaWxlIGJyb3dzZXIgY29tcG9uZW50IHRoYXQgdXNlcyBGaWxlTGlzdGluZ1xuICAgICAgICAgICAgc2VsZWN0ZWRTeXN0ZW1cbiAgICAgICAgICAgICAgPyA8RmlsZUxpc3Rpbmcgc3lzdGVtSWQ9e3NlbGVjdGVkU3lzdGVtLmlkfSBwYXRoPXsnLyd9IC8+XG4gICAgICAgICAgICAgIDogPGRpdj5ObyBzZWxlY3RlZCBzeXN0ZW08L2Rpdj5cbiAgICAgICAgICB9XG4gICAgICAgIDwvUm91dGU+XG4gICAgICAgIDxSb3V0ZSBwYXRoPScvYXBwcyc+XG4gICAgICAgICAgPEFwcHNMaXN0aW5nIG9uU2VsZWN0PXthcHBTZWxlY3RDYWxsYmFja30vPlxuICAgICAgICA8L1JvdXRlPlxuICAgICAgICA8Um91dGUgcGF0aD0nL2pvYnMnPlxuICAgICAgICAgIDxKb2JzTGlzdGluZyAvPlxuICAgICAgICA8L1JvdXRlPlxuICAgICAgICA8Um91dGUgcGF0aD0nL2xhdW5jaGVyJz5cbiAgICAgICAgICA8TGF1bmNoZXIgLz5cbiAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgPFJvdXRlIHBhdGg9Jy91aXBhdHRlcm5zJyBjb21wb25lbnQ9e1VJUGF0dGVybnN9IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaG90KEFwcCk7XG4iLCJpbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuLy8gVGhpcyBvcHRpb25hbCBjb2RlIGlzIHVzZWQgdG8gcmVnaXN0ZXIgYSBzZXJ2aWNlIHdvcmtlci5cbi8vIHJlZ2lzdGVyKCkgaXMgbm90IGNhbGxlZCBieSBkZWZhdWx0LlxuXG4vLyBUaGlzIGxldHMgdGhlIGFwcCBsb2FkIGZhc3RlciBvbiBzdWJzZXF1ZW50IHZpc2l0cyBpbiBwcm9kdWN0aW9uLCBhbmQgZ2l2ZXNcbi8vIGl0IG9mZmxpbmUgY2FwYWJpbGl0aWVzLiBIb3dldmVyLCBpdCBhbHNvIG1lYW5zIHRoYXQgZGV2ZWxvcGVycyAoYW5kIHVzZXJzKVxuLy8gd2lsbCBvbmx5IHNlZSBkZXBsb3llZCB1cGRhdGVzIG9uIHN1YnNlcXVlbnQgdmlzaXRzIHRvIGEgcGFnZSwgYWZ0ZXIgYWxsIHRoZVxuLy8gZXhpc3RpbmcgdGFicyBvcGVuIG9uIHRoZSBwYWdlIGhhdmUgYmVlbiBjbG9zZWQsIHNpbmNlIHByZXZpb3VzbHkgY2FjaGVkXG4vLyByZXNvdXJjZXMgYXJlIHVwZGF0ZWQgaW4gdGhlIGJhY2tncm91bmQuXG5cbi8vIFRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIGJlbmVmaXRzIG9mIHRoaXMgbW9kZWwgYW5kIGluc3RydWN0aW9ucyBvbiBob3cgdG9cbi8vIG9wdC1pbiwgcmVhZCBodHRwczovL2JpdC5seS9DUkEtUFdBXG5cbmNvbnN0IGlzTG9jYWxob3N0ID0gQm9vbGVhbihcbiAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fFxuICAgIC8vIFs6OjFdIGlzIHRoZSBJUHY2IGxvY2FsaG9zdCBhZGRyZXNzLlxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ1s6OjFdJyB8fFxuICAgIC8vIDEyNy4wLjAuMS84IGlzIGNvbnNpZGVyZWQgbG9jYWxob3N0IGZvciBJUHY0LlxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5tYXRjaChcbiAgICAgIC9eMTI3KD86XFwuKD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSl7M30kL1xuICAgIClcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlcihjb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgJiYgJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgIC8vIFRoZSBVUkwgY29uc3RydWN0b3IgaXMgYXZhaWxhYmxlIGluIGFsbCBicm93c2VycyB0aGF0IHN1cHBvcnQgU1cuXG4gICAgY29uc3QgcHVibGljVXJsID0gbmV3IFVSTChwcm9jZXNzLmVudi5QVUJMSUNfVVJMLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgaWYgKHB1YmxpY1VybC5vcmlnaW4gIT09IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pIHtcbiAgICAgIC8vIE91ciBzZXJ2aWNlIHdvcmtlciB3b24ndCB3b3JrIGlmIFBVQkxJQ19VUkwgaXMgb24gYSBkaWZmZXJlbnQgb3JpZ2luXG4gICAgICAvLyBmcm9tIHdoYXQgb3VyIHBhZ2UgaXMgc2VydmVkIG9uLiBUaGlzIG1pZ2h0IGhhcHBlbiBpZiBhIENETiBpcyB1c2VkIHRvXG4gICAgICAvLyBzZXJ2ZSBhc3NldHM7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvMjM3NFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3dVcmwgPSBgJHtwcm9jZXNzLmVudi5QVUJMSUNfVVJMfS9zZXJ2aWNlLXdvcmtlci5qc2A7XG5cbiAgICAgIGlmIChpc0xvY2FsaG9zdCkge1xuICAgICAgICAvLyBUaGlzIGlzIHJ1bm5pbmcgb24gbG9jYWxob3N0LiBMZXQncyBjaGVjayBpZiBhIHNlcnZpY2Ugd29ya2VyIHN0aWxsIGV4aXN0cyBvciBub3QuXG4gICAgICAgIGNoZWNrVmFsaWRTZXJ2aWNlV29ya2VyKHN3VXJsLCBjb25maWcpO1xuXG4gICAgICAgIC8vIEFkZCBzb21lIGFkZGl0aW9uYWwgbG9nZ2luZyB0byBsb2NhbGhvc3QsIHBvaW50aW5nIGRldmVsb3BlcnMgdG8gdGhlXG4gICAgICAgIC8vIHNlcnZpY2Ugd29ya2VyL1BXQSBkb2N1bWVudGF0aW9uLlxuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKCgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICdUaGlzIHdlYiBhcHAgaXMgYmVpbmcgc2VydmVkIGNhY2hlLWZpcnN0IGJ5IGEgc2VydmljZSAnICtcbiAgICAgICAgICAgICAgJ3dvcmtlci4gVG8gbGVhcm4gbW9yZSwgdmlzaXQgaHR0cHM6Ly9iaXQubHkvQ1JBLVBXQSdcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElzIG5vdCBsb2NhbGhvc3QuIEp1c3QgcmVnaXN0ZXIgc2VydmljZSB3b3JrZXJcbiAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsLCBjb25maWcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCwgY29uZmlnKSB7XG4gIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyXG4gICAgLnJlZ2lzdGVyKHN3VXJsKVxuICAgIC50aGVuKChyZWdpc3RyYXRpb24pID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgcmVnaXN0cmF0aW9uLm9udXBkYXRlZm91bmQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGluc3RhbGxpbmdXb3JrZXIgPSByZWdpc3RyYXRpb24uaW5zdGFsbGluZztcbiAgICAgICAgaWYgKGluc3RhbGxpbmdXb3JrZXIgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YWxsaW5nV29ya2VyLm9uc3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKGluc3RhbGxpbmdXb3JrZXIuc3RhdGUgPT09ICdpbnN0YWxsZWQnKSB7XG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgdXBkYXRlZCBwcmVjYWNoZWQgY29udGVudCBoYXMgYmVlbiBmZXRjaGVkLFxuICAgICAgICAgICAgICAvLyBidXQgdGhlIHByZXZpb3VzIHNlcnZpY2Ugd29ya2VyIHdpbGwgc3RpbGwgc2VydmUgdGhlIG9sZGVyXG4gICAgICAgICAgICAgIC8vIGNvbnRlbnQgdW50aWwgYWxsIGNsaWVudCB0YWJzIGFyZSBjbG9zZWQuXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICdOZXcgY29udGVudCBpcyBhdmFpbGFibGUgYW5kIHdpbGwgYmUgdXNlZCB3aGVuIGFsbCAnICtcbiAgICAgICAgICAgICAgICAgICd0YWJzIGZvciB0aGlzIHBhZ2UgYXJlIGNsb3NlZC4gU2VlIGh0dHBzOi8vYml0Lmx5L0NSQS1QV0EuJ1xuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIC8vIEV4ZWN1dGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcub25VcGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25maWcub25VcGRhdGUocmVnaXN0cmF0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgZXZlcnl0aGluZyBoYXMgYmVlbiBwcmVjYWNoZWQuXG4gICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHBlcmZlY3QgdGltZSB0byBkaXNwbGF5IGFcbiAgICAgICAgICAgICAgLy8gXCJDb250ZW50IGlzIGNhY2hlZCBmb3Igb2ZmbGluZSB1c2UuXCIgbWVzc2FnZS5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvbnRlbnQgaXMgY2FjaGVkIGZvciBvZmZsaW5lIHVzZS4nKTtcblxuICAgICAgICAgICAgICAvLyBFeGVjdXRlIGNhbGxiYWNrXG4gICAgICAgICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLm9uU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5vblN1Y2Nlc3MocmVnaXN0cmF0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uOicsIGVycm9yKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tWYWxpZFNlcnZpY2VXb3JrZXIoc3dVcmwsIGNvbmZpZykge1xuICAvLyBDaGVjayBpZiB0aGUgc2VydmljZSB3b3JrZXIgY2FuIGJlIGZvdW5kLiBJZiBpdCBjYW4ndCByZWxvYWQgdGhlIHBhZ2UuXG4gIGZldGNoKHN3VXJsKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgLy8gRW5zdXJlIHNlcnZpY2Ugd29ya2VyIGV4aXN0cywgYW5kIHRoYXQgd2UgcmVhbGx5IGFyZSBnZXR0aW5nIGEgSlMgZmlsZS5cbiAgICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuICAgICAgaWYgKFxuICAgICAgICByZXNwb25zZS5zdGF0dXMgPT09IDQwNCB8fFxuICAgICAgICAoY29udGVudFR5cGUgIT0gbnVsbCAmJiBjb250ZW50VHlwZS5pbmRleE9mKCdqYXZhc2NyaXB0JykgPT09IC0xKVxuICAgICAgKSB7XG4gICAgICAgIC8vIE5vIHNlcnZpY2Ugd29ya2VyIGZvdW5kLiBQcm9iYWJseSBhIGRpZmZlcmVudCBhcHAuIFJlbG9hZCB0aGUgcGFnZS5cbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbigocmVnaXN0cmF0aW9uKSA9PiB7XG4gICAgICAgICAgcmVnaXN0cmF0aW9uLnVucmVnaXN0ZXIoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXJ2aWNlIHdvcmtlciBmb3VuZC4gUHJvY2VlZCBhcyBub3JtYWwuXG4gICAgICAgIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCwgY29uZmlnKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgJ05vIGludGVybmV0IGNvbm5lY3Rpb24gZm91bmQuIEFwcCBpcyBydW5uaW5nIGluIG9mZmxpbmUgbW9kZS4nXG4gICAgICApO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5yZWdpc3RlcigpIHtcbiAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKChyZWdpc3RyYXRpb24pID0+IHtcbiAgICAgIHJlZ2lzdHJhdGlvbi51bnJlZ2lzdGVyKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAncmVhY3QtaG90LWxvYWRlcic7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJy4uLy4uL3RhcGlzLXJlZHV4L3NyYy9zdG9yZSc7XG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xuaW1wb3J0ICogYXMgc2VydmljZVdvcmtlciBmcm9tICcuL3NlcnZpY2VXb3JrZXInO1xuaW1wb3J0ICdib290c3RyYXAvZGlzdC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MnO1xuXG5jb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKCk7XG5cblJlYWN0RE9NLnJlbmRlcihcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPFJvdXRlcj5cbiAgICAgIDxBcHAgLz5cbiAgICA8L1JvdXRlcj5cbiAgPC9Qcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdC1yb290Jylcbik7XG5cbi8vIElmIHlvdSB3YW50IHlvdXIgYXBwIHRvIHdvcmsgb2ZmbGluZSBhbmQgbG9hZCBmYXN0ZXIsIHlvdSBjYW4gY2hhbmdlXG4vLyB1bnJlZ2lzdGVyKCkgdG8gcmVnaXN0ZXIoKSBiZWxvdy4gTm90ZSB0aGlzIGNvbWVzIHdpdGggc29tZSBwaXRmYWxscy5cbi8vIExlYXJuIG1vcmUgYWJvdXQgc2VydmljZSB3b3JrZXJzOiBodHRwczovL2JpdC5seS9DUkEtUFdBXG5zZXJ2aWNlV29ya2VyLnVucmVnaXN0ZXIoKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbl9fd2VicGFja19yZXF1aXJlX18uTy5qID0gZnVuY3Rpb24oY2h1bmtJZCkgeyByZXR1cm4gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwOyB9O1xuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IGZ1bmN0aW9uKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSB7XG5cdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG5cdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cdHZhciBydW50aW1lID0gZGF0YVsyXTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzW2ldXSA9IDA7XG5cdH1cblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uTyhyZXN1bHQpO1xufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua3RhcGlzX3VpXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3RhcGlzX3VpXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxuX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzExXSwgZnVuY3Rpb24oKSB7IHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2NTgpOyB9KVxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMTFdLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oOTA4Nyk7IH0pXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==