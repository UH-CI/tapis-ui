/* tslint:disable */
/* eslint-disable */
/**
 * Tenants API
 * Manage Tapis Tenants.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BasicResponse,
    BasicResponseFromJSON,
    BasicResponseToJSON,
    NewLDAP,
    NewLDAPFromJSON,
    NewLDAPToJSON,
} from '../models';

export interface CreateLdapRequest {
    newLDAP: NewLDAP;
}

export interface DeleteLdapRequest {
    ldapId: string;
}

export interface GetLdapRequest {
    ldapId: string;
}

export interface ListLdapsRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class LdapsApi extends runtime.BaseAPI {

    /**
     * Create an ldap
     * Create an ldap
     */
    async createLdapRaw(requestParameters: CreateLdapRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.newLDAP === null || requestParameters.newLDAP === undefined) {
            throw new runtime.RequiredError('newLDAP','Required parameter requestParameters.newLDAP was null or undefined when calling createLdap.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/tenants/ldaps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewLDAPToJSON(requestParameters.newLDAP),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Create an ldap
     * Create an ldap
     */
    async createLdap(requestParameters: CreateLdapRequest): Promise<BasicResponse> {
        const response = await this.createLdapRaw(requestParameters);
        return await response.value();
    }

    /**
     * Permenantly delete an ldap.
     * Delete ldap
     */
    async deleteLdapRaw(requestParameters: DeleteLdapRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.ldapId === null || requestParameters.ldapId === undefined) {
            throw new runtime.RequiredError('ldapId','Required parameter requestParameters.ldapId was null or undefined when calling deleteLdap.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/ldaps/{ldap_id}`.replace(`{${"ldap_id"}}`, encodeURIComponent(String(requestParameters.ldapId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Permenantly delete an ldap.
     * Delete ldap
     */
    async deleteLdap(requestParameters: DeleteLdapRequest): Promise<BasicResponse> {
        const response = await this.deleteLdapRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a specific ldap by its id.
     * Get ldap details
     */
    async getLdapRaw(requestParameters: GetLdapRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.ldapId === null || requestParameters.ldapId === undefined) {
            throw new runtime.RequiredError('ldapId','Required parameter requestParameters.ldapId was null or undefined when calling getLdap.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/ldaps/{ldap_id}`.replace(`{${"ldap_id"}}`, encodeURIComponent(String(requestParameters.ldapId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Get details of a specific ldap by its id.
     * Get ldap details
     */
    async getLdap(requestParameters: GetLdapRequest): Promise<BasicResponse> {
        const response = await this.getLdapRaw(requestParameters);
        return await response.value();
    }

    /**
     * List ldaps
     * List ldaps
     */
    async listLdapsRaw(requestParameters: ListLdapsRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/ldaps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * List ldaps
     * List ldaps
     */
    async listLdaps(requestParameters: ListLdapsRequest): Promise<BasicResponse> {
        const response = await this.listLdapsRaw(requestParameters);
        return await response.value();
    }

}
