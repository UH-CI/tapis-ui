/* tslint:disable */
/* eslint-disable */
/**
 * Tenants API
 * Manage Tapis Tenants.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BasicResponse,
    BasicResponseFromJSON,
    BasicResponseToJSON,
    Owner,
    OwnerFromJSON,
    OwnerToJSON,
} from '../models';

export interface CreateOwnerRequest {
    owner: Owner;
}

export interface DeleteOwnerRequest {
    email: string;
}

export interface GetOwnerRequest {
    email: string;
}

export interface ListOwnersRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class OwnersApi extends runtime.BaseAPI {

    /**
     * Create an owner
     * Create an owner
     */
    async createOwnerRaw(requestParameters: CreateOwnerRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling createOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/tenants/owners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OwnerToJSON(requestParameters.owner),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Create an owner
     * Create an owner
     */
    async createOwner(requestParameters: CreateOwnerRequest): Promise<BasicResponse> {
        const response = await this.createOwnerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Permenantly delete an owner.
     * Delete owner
     */
    async deleteOwnerRaw(requestParameters: DeleteOwnerRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling deleteOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/owners/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Permenantly delete an owner.
     * Delete owner
     */
    async deleteOwner(requestParameters: DeleteOwnerRequest): Promise<BasicResponse> {
        const response = await this.deleteOwnerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a specific owner by its email address.
     * Get owner details
     */
    async getOwnerRaw(requestParameters: GetOwnerRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/owners/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Get details of a specific owner by its email address.
     * Get owner details
     */
    async getOwner(requestParameters: GetOwnerRequest): Promise<BasicResponse> {
        const response = await this.getOwnerRaw(requestParameters);
        return await response.value();
    }

    /**
     * List owners
     * List owners
     */
    async listOwnersRaw(requestParameters: ListOwnersRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/owners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * List owners
     * List owners
     */
    async listOwners(requestParameters: ListOwnersRequest): Promise<BasicResponse> {
        const response = await this.listOwnersRaw(requestParameters);
        return await response.value();
    }

}
