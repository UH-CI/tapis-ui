!function(){"use strict";var e,t={4538:function(e,t,n){var a={};n.r(a),n.d(a,{ACCOUNT:function(){return Oe},ALLOCATIONS:function(){return Ae},APPLICATIONS:function(){return Ce},DASHBOARD:function(){return Ie},DATA:function(){return Te},HISTORY:function(){return Le},TICKETS:function(){return ke},UI:function(){return je}});var r=n(7294),l=n.n(r),o=n(3935),s=n(9226),i=n(3727),c=n(879),u=(n(4500),n(797)),m=function(){return(m=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},d={token:null,loading:!1,error:null},p=n(6486),f=function(){return(f=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},E=function(e,t){for(var n=0,a=t.length,r=e.length;n<a;n++,r++)e[r]=t[n];return e},g=function(e){return{loading:!1,error:null,results:[],offset:0,limit:e}},v=function(e){return f(f({},e),{loading:!0,error:null})},h=function(e,t){return f(f({},e),{loading:!1,error:t})},y=function(e,t,n,a,r){var l,o=(0,p.cloneDeep)(e);if(!t.length)return o.loading=!1,o.error=null,o;if(o.offset=function(e){return void 0===e?0:e}(n),o.limit=function(e,t){return void 0===e?t:e}(a,r),o.loading=!1,o.error=null,0===o.offset)return o.results=t,o;if(e.results.length===n)return o.results=o.results.concat(t),o;if(e.results.length>n)return(l=o.results).splice.apply(l,E([n,a],t)),o;if(e.results.length<n){for(var s=[],i=0;i<n-e.results.length;i++)s.push(null);return o.results=o.results.concat(s).concat(t),o}return o},b=function(){return(b=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},_=g(100),S={systems:b({},_)},N=function(e,t){return v(e)},P=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},w=function(e,t){return h(e,t.error)};var I=function(){return(I=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},T={listings:{}},A=function(e,t,n){var a=I({},e);return t in a||(a[t]={}),n in a[t]||(a[t][n]=g(1e3)),a},C=function(e,t){var n=t.systemId,a=t.path,r=t.incoming,l=t.offset,o=t.limit,s=A(e,n,a);return s[n][a]=y(s[n][a],r,l,o,1e3),s},L=function(e,t){var n=t.systemId,a=t.path,r=t.error,l=A(e,n,a);return l[n][a]=h(l[n][a],r),l};var O=function(){return(O=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},k=g(100),j=(O({},k),function(e,t){return v(e)}),x=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},R=function(e,t){return h(e,t.error)},U=function(e,t){switch(t.type){case"TAPIS_APPS_LIST_REQUEST":return O(O({},e),{apps:j(e.apps,t.payload)});case"TAPIS_APPS_LIST_SUCCESS":return O(O({},e),{apps:x(e.apps,t.payload)});case"TAPIS_APPS_LIST_FAILURE":return O(O({},e),{apps:R(e.apps,t.payload)});default:return e}},M=function(){return(M=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},D=g(100),F={apps:M({},D)};var Z=function(){return(Z=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},z=(g(100),function(e,t){return v(e)}),q=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},H=function(e,t){return h(e,t.error)},J=function(e,t){switch(t.type){case"TAPIS_JOBS_LIST_REQUEST":return Z(Z({},e),{jobs:z(e.jobs,t.payload)});case"TAPIS_JOBS_LIST_SUCCESS":return Z(Z({},e),{jobs:q(e.jobs,t.payload)});case"TAPIS_JOBS_LIST_FAILURE":return Z(Z({},e),{jobs:H(e.jobs,t.payload)});default:return e}},V=function(){return(V=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},B=function(e,t){switch(t.type){case"TAPIS_JOBS_SUBMIT_REQUEST":return V(V({},e),{submission:{loading:!0,error:null,result:null}});case"TAPIS_JOBS_SUBMIT_SUCCESS":return V(V({},e),{submission:{loading:!1,error:null,result:t.payload.result}});case"TAPIS_JOBS_SUBMIT_FAILURE":return V(V({},e),{submission:{loading:!1,error:t.payload.error,result:null}});case"TAPIS_JOBS_SUBMIT_RESET":return V(V({},e),{submission:{loading:!1,error:null,result:null}});default:return e}},Q=function(){return(Q=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Y=g(100),G={jobs:Q({},Y),submission:{loading:!1,error:null,result:null}};var W=(0,c.UY)({authenticator:function(e,t){switch(void 0===e&&(e=d),t.type){case"TAPIS_AUTH_LOGIN_REQUEST":return m(m({},e),{token:null,loading:!0,error:null});case"TAPIS_AUTH_LOGIN_SUCCESS":return m(m({},e),{token:t.payload.response.result.access_token,loading:!1,error:null});case"TAPIS_AUTH_LOGIN_FAILURE":return m(m({},e),{token:null,loading:!1,error:t.payload.error});case"TAPIS_AUTH_LOGOUT_REQUEST":return m(m({},e),{token:null,loading:!1,error:null});default:return e}},systems:function(e,t){switch(void 0===e&&(e=S),t.type){case"TAPIS_SYSTEMS_LIST_REQUEST":return b(b({},e),{systems:N(e.systems,t.payload)});case"TAPIS_SYSTEMS_LIST_SUCCESS":return b(b({},e),{systems:P(e.systems,t.payload)});case"TAPIS_SYSTEMS_LIST_FAILURE":return b(b({},e),{systems:w(e.systems,t.payload)});default:return e}},files:function(e,t){switch(void 0===e&&(e=T),t.type){case"TAPIS_FILES_LIST_REQUEST":return I(I({},e),{listings:(n=e.listings,a=t.payload,r=a.systemId,l=a.path,o=A(n,r,l),o[r][l]=v(o[r][l]),o)});case"TAPIS_FILES_LIST_SUCCESS":return I(I({},e),{listings:C(e.listings,t.payload)});case"TAPIS_FILES_LIST_FAILURE":return I(I({},e),{listings:L(e.listings,t.payload)});default:return e}var n,a,r,l,o},apps:function(e,t){void 0===e&&(e=F);var n=[U],a=M({},e);return n.forEach((function(e){a=e(a,t)})),a},jobs:function(e,t){void 0===e&&(e=G);var n=[J,B],a=Q({},e);return n.forEach((function(e){a=e(a,t)})),a}}),X=n(4857),K=n(4438),$=n(4098),ee=n.n($),te=function(){return(te=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},ne=function(e,t){var n,a,r,l,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(r=2&l[0]?a.return:l[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,l[1])).done)return r;switch(a=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,a=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!(r=o.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){o.label=l[1];break}if(6===l[0]&&o.label<r[1]){o.label=r[1],r=l;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(l);break}r[2]&&o.ops.pop(),o.trys.pop();continue}l=t.call(e,o)}catch(e){l=[6,e],a=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}};function ae(e){var t,n,a,r,l,o,s;return ne(this,(function(i){switch(i.label){case 0:return t=e.config,n=e.username,a=e.password,"https://tacc.tapis.io",r=t&&t.tenant||"https://tacc.tapis.io",l=new K._F.Configuration({basePath:r,fetchApi:ee()}),o=new K._F.TokensApi(l),s={reqCreateToken:{grant_type:"password",username:n,password:a}},[4,(0,X.RE)([o,o.createToken],s)];case 1:return[2,i.sent()]}}))}function re(e){var t,n;return ne(this,(function(a){switch(a.label){case 0:return a.trys.push([0,5,,11]),[4,(0,X.RE)(ae,e.payload)];case 1:return t=a.sent(),[4,(0,X.gz)({type:"TAPIS_AUTH_LOGIN_SUCCESS",payload:{response:t}})];case 2:return a.sent(),e.payload.onAuth?[4,(0,X.RE)(e.payload.onAuth,te({},t))]:[3,4];case 3:a.sent(),a.label=4;case 4:return[3,11];case 5:return(n=a.sent()).json?[4,n.json()]:[3,7];case 6:n=a.sent(),a.label=7;case 7:return[4,(0,X.gz)({type:"TAPIS_AUTH_LOGIN_FAILURE",payload:{error:n}})];case 8:return a.sent(),e.payload.onAuth?[4,(0,X.RE)(e.payload.onAuth,n)]:[3,10];case 9:a.sent(),a.label=10;case 10:return[3,11];case 11:return[2]}}))}function le(){return ne(this,(function(e){switch(e.label){case 0:return[4,(0,X.A7)("TAPIS_AUTH_LOGIN_REQUEST",re)];case 1:return e.sent(),[2]}}))}var oe=function(e){return e.authenticator.token},se=function(e,t){var n,a,r,l,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(r=2&l[0]?a.return:l[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,l[1])).done)return r;switch(a=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,a=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!(r=o.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){o.label=l[1];break}if(6===l[0]&&o.label<r[1]){o.label=r[1],r=l;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(l);break}r[2]&&o.ops.pop(),o.trys.pop();continue}l=t.call(e,o)}catch(e){l=[6,e],a=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}},ie=function(e,t){for(var n=0,a=t.length,r=e.length;n<a;n++,r++)e[r]=t[n];return e};function ce(e){var t,n,a,r,l,o,s,i,c,u,m,d,p,f,E,g;return se(this,(function(v){switch(v.label){case 0:t=e.payload,n=t.config,a=t.onApi,r=t.onRequest,l=t.onSuccess,o=t.onFailure,s=t.module,i=t.func,c=t.args,v.label=1;case 1:return v.trys.push([1,11,,19]),r?[4,(0,X.gz)(r())]:[3,3];case 2:v.sent(),v.label=3;case 3:return[4,(0,X.Ys)(oe)];case 4:return u=v.sent(),m=n&&n.jwt||u.access_token,"https://tacc.tapis.io",d=n&&n.tenant||"https://tacc.tapis.io",p=new s.Configuration({basePath:d,headers:{"X-Tapis-Token":m}}),f=new e.payload.api(p),[4,X.RE.apply(void 0,ie([[f,i]],c))];case 5:return E=v.sent(),l?[4,(0,X.gz)(l(E))]:[3,7];case 6:v.sent(),v.label=7;case 7:return a?[4,(0,X.RE)(a,E)]:[3,9];case 8:v.sent(),v.label=9;case 9:return[4,(0,X.gz)({type:"TAPIS_REDUX_API_SUCCESS"})];case 10:return v.sent(),[3,19];case 11:return(g=v.sent()).json?[4,g.json()]:[3,13];case 12:g=v.sent(),v.label=13;case 13:return o?[4,(0,X.gz)(o(g))]:[3,15];case 14:v.sent(),v.label=15;case 15:return a?[4,(0,X.RE)(a,g)]:[3,17];case 16:v.sent(),v.label=17;case 17:return[4,(0,X.gz)({type:"TAPIS_REDUX_API_FAILURE"})];case 18:return v.sent(),[3,19];case 19:return[2]}}))}function ue(){return se(this,(function(e){switch(e.label){case 0:return[4,(0,X.ib)("TAPIS_REDUX_API_REQUEST",ce)];case 1:return e.sent(),[2]}}))}var me=function(e,t){var n,a,r,l,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(r=2&l[0]?a.return:l[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,l[1])).done)return r;switch(a=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,a=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!(r=o.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){o.label=l[1];break}if(6===l[0]&&o.label<r[1]){o.label=r[1],r=l;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(l);break}r[2]&&o.ops.pop(),o.trys.pop();continue}l=t.call(e,o)}catch(e){l=[6,e],a=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}};function de(){return me(this,(function(e){switch(e.label){case 0:return[4,(0,X.$6)([ue(),le()])];case 1:return e.sent(),[2]}}))}var pe=(0,u.ZP)(),fe=[];fe.push(pe);var Ee=function(){var e=(0,c.MT)(W,c.md.apply(void 0,fe));return pe.run(de),e},ge=n(5977),ve=function(e){var t=(0,s.v9)((function(e){return e.authenticator}));return{token:t.token,loading:t.loading,error:t.error,login:function(t,n,a){return void 0===a&&(a=null),{type:"TAPIS_AUTH_LOGIN_REQUEST",payload:{username:t,password:n,config:e,onAuth:a}}},logout:function(){return{type:"TAPIS_AUTH_LOGOUT_REQUEST"}}}};function he(e){return{type:"TAPIS_REDUX_API_REQUEST",payload:e}}var ye=function(e){return{systems:(0,s.v9)((function(e){return e.systems})).systems,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_SYSTEMS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_SYSTEMS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_SYSTEMS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.lA,api:K.lA.SystemsApi,func:K.lA.SystemsApi.prototype.getSystems,args:[n]})}(e,t.onList,t.request||{})}}},be=function(e){return{listings:(0,s.v9)((function(e){return e.files})).listings,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null);var a=n.systemId,r=n.path,l=n.offset,o=n.limit;return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_FILES_LIST_REQUEST",payload:{systemId:a,path:r,offset:l,limit:o}}},onSuccess:function(e){return{type:"TAPIS_FILES_LIST_SUCCESS",payload:{systemId:a,path:r,incoming:e.result,offset:l,limit:o}}},onFailure:function(e){return{type:"TAPIS_FILES_LIST_FAILURE",payload:{systemId:a,path:r,offset:l,limit:o,error:e}}},module:K.hv,api:K.hv.FileOperationsApi,func:K.hv.FileOperationsApi.prototype.listFiles,args:[n]})}(e,t.onList,t.request)}}},_e=function(e){return void 0===e&&(e=null),{apps:(0,s.v9)((function(e){return e.apps})).apps,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_APPS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_APPS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_APPS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.BQ,api:K.BQ.ApplicationsApi,func:K.BQ.ApplicationsApi.prototype.getApps,args:[n]})}(e,t.onList,t.request||{})}}},Se=function(e){var t=(0,s.v9)((function(e){return e.jobs}));return{jobs:t.jobs,submission:t.submission,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_JOBS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_JOBS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_JOBS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.pe,api:K.pe.JobsApi,func:K.pe.JobsApi.prototype.getJobList,args:[n]})}(e,t.onList,t.request)},submit:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null);var a={reqSubmitJob:n};return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_JOBS_SUBMIT_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_JOBS_SUBMIT_SUCCESS",payload:{params:n,result:e.result}}},onFailure:function(e){return{type:"TAPIS_JOBS_SUBMIT_FAILURE",payload:{error:e,params:n}}},module:K.pe,api:K.pe.JobsApi,func:K.pe.JobsApi.prototype.submitJob,args:[a]})}(e,t.onSubmit,t.request)},resetSubmit:function(){return{type:"TAPIS_JOBS_SUBMIT_RESET",payload:{}}},retrieve:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null);return he({config:e,onApi:t,onRequest:null,onSuccess:null,onFailure:null,module:K.pe,api:K.pe.JobsApi,func:K.pe.JobsApi.prototype.getJob,args:[n]})}(e,t.onRetrieve,t.request)}}},Ne=n(6955);var Pe=function(e){var t=e.placement,n=e.className;return l().createElement("div",{className:"loading-icon "+n,"data-testid":"loading-spinner"},l().createElement(Ne.Z,{className:t}))};Pe.defaultProps={placement:"section",className:""};var we=Pe,Ie="This page allows you to monitor your job status, get help with tickets, and view the status of the High Performance Computing (HPC) systems.",Te="This page allows you to upload and manage your files.",Ae="This page allows you to monitor the status of allocations on the HPC systems and view a breakdown of team usage.",Ce="This page allows you to submit jobs to the HPC systems or access Cloud services using a variety of applications.",Le="This page allows you to monitor a log of all previous job submissions.",Oe="This page allows you to manage your account profile, change your password and view software licenses.",ke="This page allows you to submit a help request via an RT Ticket.",je="This hidden page allows developers to review UI components in isolation.";function xe(e){var t=e.children,n=e.className,o=e.routeName,s=e.welcomeText||a[o],i=o||s,c=s&&l().createElement(Xt,{messageName:i},s),u=Gt(o)||t.length>0;return(0,r.useEffect)((function(){u?document.body.classList.add("has-message"):document.body.classList.remove("has-message")}),[u]),l().createElement("aside",{className:(n?n+" ":"")+"SectionMessages-module__root--1QB6cM4uPv"},c,t)}xe.defaultProps={children:"",className:"",routeName:"",welcomeText:""};var Re=xe,Ue=n(7411),Me={},De={oneRow:"one-row",oneColumn:"one-column",twoColumn:"two-column"};!function(e,t){for(var n=0,a=t.length,r=e.length;n<a;n++,r++)e[r]=t[n]}([],Object.keys(De));function Fe(e){var t,n=e.className,a=e.children,r=e.layoutName,o=e.shouldScroll,s=e.shouldDebugLayout,i=e.tagName,c=["styles.root"],u=De[r],m=i;return o&&c.push("styles.should-scroll"),s&&c.push("styles.should-debug-layout"),u&&c.push("layoutStyles."+u),t=c.join(" "),l().createElement(m,{className:(n?n+" ":"")+(0,Ue.Z)(t,Me,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},a)}Fe.defaultProps={className:"",shouldScroll:!1,shouldDebugLayout:!1,tagName:"div"};var Ze=Fe;function ze(e){var t=e.bodyClassName,n=e.children,a=e.className,o=e.content,s=e.contentClassName,i=e.contentLayoutName,c=e.contentShouldScroll,u=e.header,m=e.headerActions,d=e.headerClassName,p=e.manualContent,f=e.manualHeader,E=e.messages,g=e.messagesClassName,v=e.routeName,h=e.welcomeMessageText,y=u||d||m;if(p&&(o||s||i||c))throw new Error("When passing `manualContent`, the following props are ineffectual: `content`, `contentClassName`, `contentLayoutName`, `contentShouldScroll`");if(f&&(u||d||m))throw new Error("When passing `manualHeader`, the following props are ineffectual: `header`, `headerClassName`, `headerActions`");return(0,r.useEffect)((function(){return t&&document.body.classList.add(t),function(){t&&document.body.classList.remove(t)}}),[t]),l().createElement("section",{className:(a?a+" ":"")+"Section-module__root--2m3Ew8L7fZ"},l().createElement(Re,{routeName:v,className:(g?g+" ":"")+"Section-module__messages--30rTl5JQJt",welcomeText:h},E),f?l().createElement(l().Fragment,null,f):y&&l().createElement(Je,{className:(d?d+" ":"")+"Section-module__header--15uAiolZtN",actions:m},u),p?l().createElement(l().Fragment,null,p,n):l().createElement(Ze,{tagName:"main",className:(s?s+" ":"")+"Section-module__content--1c2lm9Op7V",layoutName:i||"oneRow",shouldScroll:c},o,n))}ze.defaultProps={bodyClassName:"",children:"",className:"",content:"",contentClassName:"",contentLayoutName:"",contentShouldScroll:!1,header:"",headerActions:"",headerClassName:"",manualContent:void 0,manualHeader:void 0,messages:"",messagesClassName:"",routeName:"",welcomeMessageText:""};var qe={"./SectionHeader.module.css":{root:"SectionHeader-module__root--3EcA5dZFJf",heading:"SectionHeader-module__heading--CLhSCcnpC4","for-form":"SectionHeader-module__for-form--cFcJjuP3gr","for-table":"SectionHeader-module__for-table--3LJZ80fi88"}};function He(e){var t,n=e.actions,a=e.children,r=e.className,o=e.isForForm,s=e.isForTable,i=["root"],c=o||s?"h3":"h2";return o&&i.push("for-form"),s&&i.push("for-table"),t=i.join(" "),l().createElement("header",{className:(r?r+" ":"")+(0,Ue.Z)(t,qe,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},a&&l().createElement(c,{className:"SectionHeader-module__heading--CLhSCcnpC4"},a),n)}He.defaultProps={actions:"",className:"",children:"",isForForm:!1,isForTable:!1};var Je=He,Ve=n(1389),Be=n(7975);function Qe(e){return 0===e.numberOfFiles?null:l().createElement("span",{className:"rejected-file-message text-danger"},"One or more of your files exceeds the maximum size for an upload and were not attached.")}function Ye(e){var t=e.files,n=e.onSetFiles,a=e.onRejectedFiles,o=e.maxSize,s=e.maxSizeMessage,i=e.onRemoveFile,c=e.isSubmitted,u=(0,r.useState)(0),m=u[0],d=u[1],p=(0,Ve.u)({noClick:!0,maxSize:o,onDrop:function(e){n(e),d(0)},onDropRejected:function(e){a&&a(e),d(e.length)}}),f=p.getRootProps,E=p.open,g=p.getInputProps,v=t&&t.length>0;return c&&m>0&&d(0),l().createElement("div",Object.assign({},f(),{className:"dropzone-area"}),l().createElement("input",g()),!v&&l().createElement("div",{className:"no-attachment-view"},l().createElement("i",{className:"icon-upload"}),l().createElement("br",null),t&&l().createElement(Qe,{numberOfFiles:m}),l().createElement(Be.Z,{outline:!0,onClick:E,className:"select-files-button"},"Select File(s)"),l().createElement("strong",null,"or"),l().createElement("strong",null,"Drag and Drop"),l().createElement("br",null),s),v&&l().createElement("div",{className:"attachment-view"},l().createElement("div",{className:"attachment-list"},t.map((function(e,t){return l().createElement("div",{className:"attachment-block",key:[e.name,t].toString()},l().createElement("span",{className:"d-inline-block text-truncate"},e.name),l().createElement(Be.Z,{color:"link",className:"attachment-remove",onClick:function(){var e;d(0),e=t,i&&(i(e),d(0))}},"Remove"))}))),l().createElement(Qe,{numberOfFiles:m}),l().createElement(Be.Z,{outline:!0,onClick:E,className:"select-files-button"},"Select File(s)")))}Ye.defaultProps={files:null,isSubmitted:!1,onRejectedFiles:null,onRemoveFile:null};var Ge=Ye,We=n(7513),Xe=n(2669),Ke=n(7954),$e=n(6792);var et=function(e,t){for(var n=0,a=t.length,r=e.length;n<a;n++,r++)e[r]=t[n];return e};function tt(e){var t=e.id,n=e.isSubmitted,a=e.description,r=e.maxSizeMessage,o=e.maxSize,s=(0,We.U$)(t),i=s[0],c=s[2];return l().createElement(Xe.Z,null,l().createElement(Ke.Z,{for:t,size:"sm",className:"form-field__label",style:{display:"flex",alignItems:"center"}},"Attach Files"),l().createElement(Ge,{id:t,files:i.value,onSetFiles:function(e){c.setValue(et(et([],i.value),e))},onRemoveFile:function(e){var t=i.value;t.splice(e,1),c.setValue(t)},isSubmitted:n,maxSizeMessage:r,maxSize:o}),l().createElement($e.Z,{className:"form-field__help",color:"muted"},a))}tt.defaultProps={description:void 0,maxSize:1/0};var nt=n(9618),at=n(7354),rt=n(6277),lt=n(609);var ot=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(n[a[r]]=e[a[r]])}return n},st=function(e){var t,n=e.children;switch(e.type){case"InputGroup":t=l().createElement(nt.Z,null,n);break;case"FormGroup":default:t=l().createElement(Xe.Z,null,n)}return t};st.defaultProps={type:"FormGroup"};var it=function(e){var t=e.addon,n=e.addonType,a=e.label,o=e.description,s=e.required,i=e.agaveFile,c=e.SelectModal,u=ot(e,["addon","addonType","label","description","required","agaveFile","SelectModal"]),m=(0,We.U$)(u),d=m[0],p=m[1],f=m[2],E=(0,r.useState)(!1),g=E[0],v=E[1],h=u.id,y=u.name,b=void 0!==t,_=b?"InputGroup":"",S=function(){return l().createElement(l().Fragment,null,l().createElement(Ke.Z,{className:"form-field__label",for:h||y,size:"sm",style:{display:"flex",alignItems:"center"}},a," ",s?l().createElement(at.Z,{color:"danger",style:{marginLeft:"10px"}},"Required"):null))},N=function(){return l().createElement(l().Fragment,null,p.touched&&p.error?l().createElement("div",{className:"form-field__validation-error"},p.error):o&&l().createElement($e.Z,{className:"form-field__help",color:"muted"},o))};if(t&&i)throw new Error("You must not pass `addon` and `agaveFile`, because `agaveFile` triggers its own field add-on");if(!i&&c||i&&!c)throw new Error("An `agaveFile` and a `SelectModal` must both be passed");return l().createElement(l().Fragment,null,a&&b?l().createElement(S,null):null,l().createElement(st,{type:_},a&&!b?l().createElement(S,null):null,i?l().createElement(l().Fragment,null,l().createElement(c,{isOpen:g,toggle:function(){v((function(e){return!e}))},onSelect:function(e,t){f.setValue("agave://"+e+t)}}),l().createElement(nt.Z,null,l().createElement(rt.Z,{addonType:"prepend"},l().createElement(Be.Z,{size:"sm",color:"secondary",type:"button",onClick:function(){return v(!0)}},"Select")),l().createElement(lt.Z,Object.assign({},d,u,{bsSize:"sm"})))):l().createElement(l().Fragment,null,b&&"prepend"===n?t:null,l().createElement(lt.Z,Object.assign({},d,u,{bsSize:"sm"})),b&&"append"===n?t:null),b?null:l().createElement(N,null)),b?l().createElement(N,null):null)};it.defaultProps={id:void 0,name:void 0,label:void 0,description:void 0,required:!1,agaveFile:void 0,SelectModal:void 0,addon:void 0,addonType:void 0};var ct=n(9521);var ut=function(e){return e.isLoading?l().createElement("tr",{className:"-status"},l().createElement("td",null,l().createElement(we,{placement:"inline"}))):null},mt=function(e){var t=e.display,n=e.noDataText;return t?l().createElement("tr",{className:"-status"},l().createElement("td",null,l().createElement("span",{className:"-status__message"},n))):null},dt=function(e){var t=e.tableColumns,n=e.tableData,a=e.onInfiniteScroll,r=e.isLoading,o=e.className,s=e.noDataText,i=e.getRowProps,c=e.columnMemoProps,u=l().useMemo((function(){return t}),c),m=l().useMemo((function(){return n}),[n]),d=(0,ct.useTable)({columns:u,data:m}),p=d.getTableProps,f=d.getTableBodyProps,E=d.headerGroups,g=d.rows,v=d.prepareRow;return l().createElement("table",Object.assign({},p(),{className:o+" InfiniteScrollTable"}),l().createElement("thead",null,E.map((function(e){return l().createElement("tr",e.getHeaderGroupProps(),e.headers.map((function(e){return l().createElement("th",e.getHeaderProps(),e.render("Header"))})))}))),l().createElement("tbody",Object.assign({},f(),{onScroll:function(e){var t=e.target;t.scrollHeight-t.scrollTop===t.clientHeight&&t.scrollTop>0&&a(n.length)}}),g.map((function(e){return v(e),l().createElement("tr",Object.assign({},e.getRowProps(),i(e)),e.cells.map((function(e){return l().createElement("td",e.getCellProps({className:e.column.className}),e.render("Cell"))})))})),l().createElement(ut,{isLoading:r}),l().createElement(mt,{display:!r&&0===n.length,noDataText:s})))};dt.defaultProps={onInfiniteScroll:function(e){},isLoading:!1,className:"",noDataText:"",getRowProps:function(e){},columnMemoProps:[]};var pt=function(e){var t=e.children,n=e.className,a="icon icon-"+e.name,r=n?[n,a].join(" "):a,o=t;return l().createElement("i",{className:r,role:"img","aria-label":o})};pt.defaultProps={children:"",className:""};var ft=pt;var Et=n(6244),gt=n(8089),vt=n(627),ht=n(1121);var yt=function(e){var t=e.className,n=e.detail,a=e.message,o=(0,r.useState)(!1),s=o[0],i=o[1],c=(0,r.useCallback)((function(){i(!s)}),[s,i]);return l().createElement(Et.Z,{className:(t?t+" ":"")+"Expand-module__container--DH5-jvRt4g",tag:"div"},l().createElement(gt.Z,{className:"Expand-module__summary--fOU2M68eqv",onClick:c,tag:"div"},l().createElement("strong",{className:"Expand-module__header--3OiZePUQMn"},n),l().createElement(ft,{name:s?"collapse":"expand"})),l().createElement(vt.Z,{isOpen:s},l().createElement(ht.Z,null,a)))};yt.defaultProps={className:""};var bt=n(9638),_t={"./Message.module.scss":{container:"Message-module__container--2mZsdysgRm","is-scope-inline":"Message-module__is-scope-inline--2aQjysPwl2","is-scope-section":"Message-module__is-scope-section--1uus95jWiQ",text:"Message-module__text--2wCU56N81C","type-icon":"Message-module__type-icon--2oYDWJSBbv","close-button":"Message-module__close-button--blwQE4g5mg","close-icon":"Message-module__close-icon--1MQ5OiW1aE","is-info":"Message-module__is-info--1Mx7AfmeXH",icon:"Message-module__icon--1iieNfXmjm","is-warn":"Message-module__is-warn--1llz-W8JA3","is-error":"Message-module__is-error--4ZrpxSiVG-","is-success":"Message-module__is-success--2QREP0QqRx"}};var St=function(){return(St=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Nt=function(e,t){for(var n=0,a=t.length,r=e.length;n<a;n++,r++)e[r]=t[n];return e},Pt="For a <(Section)Message> to use `canDismiss`, `scope` must equal `section`.",wt='In a <(Section|Inline)Message> `type="warn"` is deprecated. Use `type="warning"` instead.',It='A <Message> without a `scope` should become an <InlineMessage>. (If <Message> must be used, then explicitely set `scope="inline"`.)',Tt={info:{iconName:"conversation",className:"is-info",iconText:"Notice"},success:{iconName:"approved-reverse",className:"is-success",iconText:"Notice"},warning:{iconName:"alert",className:"is-warn",iconText:"Warning"},error:{iconName:"alert",className:"is-error",iconText:"Error"}};Tt.warn=Tt.warning;Object.keys(Tt);var At={inline:{className:"is-scope-inline",role:"status",tagName:"span"},section:{className:"is-scope-section",role:"status",tagName:"p"}},Ct=(Nt([""],Object.keys(At)),function(e){var t=e.children,n=e.className,a=e.onDismiss,r=e.canDismiss,o=e.isVisible,s=e.scope,i=e.type,c=Tt[i],u=At[s||"inline"],m=c.iconName,d=c.iconText,p=c.className,f=u.role,E=u.tagName,g=u.className,v="section"===s;r&&!v&&console.error(Pt),"warn"===i&&console.info(wt),s||console.info(It);var h=[];h.push(p),h.push(g);var y=Nt(["container"],h).join(" "),b=St(St({},bt.Z.defaultProps),{unmountOnExit:!0,baseClass:"",timeout:0});return l().createElement(bt.Z,Object.assign({},b,{tag:E,role:f,in:o,className:(n?n+" ":"")+(0,Ue.Z)(y,_t,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})+" "+(b&&b.className||"")}),l().createElement(ft,{className:"Message-module__icon--1iieNfXmjm Message-module__type-icon--2oYDWJSBbv",name:m},d),l().createElement("span",{className:"Message-module__text--2wCU56N81C","data-testid":"text"},t),r&&v?l().createElement("button",{type:"button",className:"Message-module__close-button--blwQE4g5mg","aria-label":"Close",onClick:a},l().createElement(ft,{className:"Message-module__icon--1iieNfXmjm Message-module__close-icon--1MQ5OiW1aE",name:"close"})):null)});Ct.defaultProps={className:"",canDismiss:!1,isVisible:!0,onDismiss:function(){},scope:""};var Lt=Ct,Ot=function(){return(Ot=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},kt=function(e){var t=Ot(Ot(Ot({},Lt.defaultProps),e),{canDismiss:!1,scope:"inline"});return l().createElement(Lt,t)};kt.defaultProps=Lt.defaultProps;var jt=kt,xt=function(){return(xt=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Rt=function(e){var t=(0,r.useState)(!0),n=t[0],a=t[1],o=(0,r.useCallback)((function(){a(!n)}),[n]),s=xt(xt(xt({},Lt.defaultProps),e),{isVisible:n,onDismiss:o,scope:"section"});return l().createElement(Lt,s)};Rt.defaultProps=Lt.defaultProps;var Ut=Rt,Mt=n(681),Dt={"./DescriptionList.module.scss":{container:"DescriptionList-module__container--3GUucDmAEw","is-horz":"DescriptionList-module__is-horz--3Vc4dFMPRA",key:"DescriptionList-module__key--3qyJmM1n4a",value:"DescriptionList-module__value--36HSIKiYmg","is-narrow":"DescriptionList-module__is-narrow--32R3jQ797H","is-wide":"DescriptionList-module__is-wide--1m_ihHMz-0","is-vert":"DescriptionList-module__is-vert--2IQb_ACOhb"}};var Ft=function(e,t){for(var n=0,a=t.length,r=e.length;n<a;n++,r++)e[r]=t[n];return e},Zt={vertical:"is-vert",horizontal:"is-horz"},zt=(Ft([""],Object.keys(Zt)),{compact:"is-narrow",default:"is-wide"}),qt=(Ft([""],Object.keys(zt)),function(e){var t=e.className,n=e.data,a=e.density,r=e.direction,o=[];o.push(zt[a||"default"]),o.push(Zt[r||"vertical"]);var s=Ft(["container"],o).join(" ");return l().createElement("dl",{"data-testid":"list",className:(t?t+" ":"")+(0,Ue.Z)(s,Dt,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},Object.entries(n).map((function(e){var t=e[0],n=e[1];return l().createElement(l().Fragment,{key:t},l().createElement("dt",{className:"DescriptionList-module__key--3qyJmM1n4a","data-testid":"key"},t),Array.isArray(n)?n.map((function(e){return l().createElement("dd",{className:"DescriptionList-module__value--36HSIKiYmg","data-testid":"value",key:(0,Mt.Z)()},e)})):l().createElement("dd",{className:"DescriptionList-module__value--36HSIKiYmg","data-testid":"value"},n))})))});qt.defaultProps={className:"",density:"default",direction:"vertical"};var Ht=qt;var Jt=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(n[a[r]]=e[a[r]])}return n},Vt=function(e){var t=e.type,n=e.onChange,a=Jt(e,["type","onChange"]),r="multiple"===t;return l().createElement(lt.Z,Object.assign({},a,{onChange:n,type:"select",className:"DropdownSelector-module__container--ScNBv0_DKI bootstrap-form__form-control--1Pxq8fh4ks "+(a&&a.className||""),multiple:r,"data-testid":"selector"}))};Vt.defaultProps={type:"single",onChange:function(){}};var Bt=Vt,Qt=n(7834),Yt=function(){return(Yt=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function Gt(e){var t=(0,s.v9)((function(e){return e.welcomeMessages}));return t&&t[e]}function Wt(e){var t=e.children,n=e.className,a=e.messageName,r=(0,s.I0)(),o=(0,s.v9)((function(e){return e.welcomeMessages})),i=Gt(a);return l().createElement(Qt.Z,{isOpen:i,toggle:function(){return function(e){var t,n=Yt(Yt({},o),((t={})[e]=!1,t));r({type:"SAVE_WELCOME",payload:n})}(a)},color:"secondary",className:n},t)}Wt.defaultProps={className:""};var Xt=Wt,Kt={"./Pill.module.scss":{root:"Pill-module__root--3WKDSZq0rH","should-truncate":"Pill-module__should-truncate--2qBi9GN7Yb","is-danger":"Pill-module__is-danger--3A92aPARlf","is-success":"Pill-module__is-success--1Bnp4bVsR6","is-warning":"Pill-module__is-warning--1V9CIPmrW-","is-normal":"Pill-module__is-normal--1uizuYwu1t"}};function $t(e){var t=e.children,n=e.type,a=e.className,r="root is-"+n;return e.shouldTruncate&&(r+=" should-truncate"),l().createElement("span",{className:(a?a+" ":"")+(0,Ue.Z)(r,Kt,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},t)}$t.defaultProps={type:"normal",className:"",shouldTruncate:!0};var en=$t,tn=n(4855),nn={"./TextCopyField.module.scss":{input:"TextCopyField-module__input--oEAYxIzdrv bootstrap-form__form-control--1Pxq8fh4ks","copy-button":"TextCopyField-module__copy-button--3OtQl0tlDS c-button__c-button--secondary--20cNZveRg_","is-copied":"TextCopyField-module__is-copied--3HbkIDxINI",button__icon:"TextCopyField-module__button__icon--1lf-70haW- c-button__c-button__icon--before--2sl5li7HeP",button__text:"TextCopyField-module__button__text--3Oe_FXbiPQ"}};var an=function(e){var t=e.value,n=e.placeholder,a=(0,r.useState)(!1),o=a[0],s=a[1],i=(0,r.useCallback)((function(){s(!0);var e=setTimeout((function(){s(!1),clearTimeout(e)}),1150)}),[o,s]),c=!t||0===t.length;return l().createElement("div",{className:"input-group"},l().createElement("div",{className:"input-group-prepend"},l().createElement(tn.CopyToClipboard,{text:t},l().createElement(Be.Z,{style:{"--transition-duration":"0.15s"},onClick:i,disabled:c,type:"button",className:(0,Ue.Z)("copy-button "+(o?"is-copied":""),nn,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},l().createElement(ft,{name:o?"approved-reverse":"link",className:"TextCopyField-module__button__icon--1lf-70haW- c-button__c-button__icon--before--2sl5li7HeP"}),l().createElement("span",{className:"TextCopyField-module__button__text--3Oe_FXbiPQ"},"Copy")))),l().createElement("input",{type:"text",onChange:function(e){e.preventDefault()},value:t,className:"form-control TextCopyField-module__input--oEAYxIzdrv bootstrap-form__form-control--1Pxq8fh4ks",placeholder:n,"data-testid":"input",readOnly:!0}))};an.defaultProps={value:"",placeholder:""};var rn=n(9612),ln={"./ReadMore.module.scss":{clamped:"ReadMore-module__clamped--3yJcQBGmQE",expanded:"ReadMore-module__expanded--1YVjlft-eZ"}};var on=function(e){var t=e.className,n=e.children,a=(0,r.useState)(!1),o=a[0],s=a[1],i=(0,r.useCallback)((function(){s(!o)}),[o,s]),c=(0,rn.NB)(),u=c.height,m=c.ref,d=!(!m||!m.current)&&m.current.scrollHeight>u;return l().createElement(l().Fragment,null,l().createElement("div",{ref:m,className:(t?t+" ":"")+(0,Ue.Z)(o?"expanded":"clamped",ln,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},n),(d||o)&&l().createElement(Be.Z,{color:"link",onClick:i},o?"Read Less":"Read More"))};on.defaultProps={className:""};var sn=on,cn={"./Paginator.module.scss":{root:"Paginator-module__root--1ahFSs0EGG",endcap:"Paginator-module__endcap--1NUxRhpAxH","page-root":"Paginator-module__page-root--5Ku1VvWgMP",page:"Paginator-module__page--1wz47pM96V",current:"Paginator-module__current--QNRuzIEPqw"}};var un=function(e){var t=e.number,n=e.callback,a=e.current;return l().createElement("div",{className:"Paginator-module__page-root--5Ku1VvWgMP"},l().createElement(Be.Z,{onClick:function(){return n(t)},className:(0,Ue.Z)("page "+(t===a?"current":""),cn,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},t))},mn=function(e){var t,n,a=e.pages,r=e.current,o=e.callback,s=e.spread;if(1===a)n=0,t=1;else if(a>2&&a<=s)t=2,n=a-1;else if(a>s&&r<=4)t=2,n=s-1;else if(a>s&&r>a-(s-2))t=a-(s-2),n=a-1;else{var i=Math.floor((s-2)/2);t=r-i,n=r+i}var c=n-t+1,u=c>0?Array(c).fill().map((function(e,n){return t+n})):[];return l().createElement("div",{className:"Paginator-module__root--1ahFSs0EGG"},l().createElement(Be.Z,{color:"link",className:"Paginator-module__endcap--1NUxRhpAxH",onClick:function(){return o(r-1)},disabled:1===r},l().createElement("span",null,"< Previous")),l().createElement(un,{number:1,callback:o,current:r}),u[0]>2&&l().createElement("span",null,"..."),u.map((function(e){return l().createElement(un,{number:e,key:e,current:r,callback:o})})),u[u.length-1]<a-1&&l().createElement("span",null,"..."),a>1&&l().createElement(un,{number:a,callback:o,current:r}),l().createElement(Be.Z,{color:"link",className:"Paginator-module__endcap--1NUxRhpAxH",onClick:function(){return o(r+1)},disabled:r===a},l().createElement("span",null,"Next >")))};mn.defaultProps={spread:11};var dn=function(){return(dn=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},pn=function(e){var t=e.props,n=e.label,a=e.required,r=e.description,o=e.children,s=(0,We.U$)(t),i=s[0],c=s[1];s[2];return l().createElement(Xe.Z,null,l().createElement(Ke.Z,{className:"form-field__label",size:"sm",style:{display:"flex",alignItems:"center"}},n," ",a?l().createElement(at.Z,{color:"danger",style:{marginLeft:"10px"}},"Required"):null),l().Children.map(o,(function(e){return l().isValidElement(e)?l().cloneElement(e,dn(dn(dn({},i),t),{key:t.name})):e})),c.touched&&c.error?l().createElement("div",{className:"form-field__validation-error"},c.error):r&&l().createElement($e.Z,{className:"form-field__help",color:"muted"},r))};var fn=function(e){var t=e.app,n=e.onSelect,a=e.selected;return l().createElement("li",{className:"nav-item"},l().createElement("div",{className:"nav-link"+(a?" active":"")},l().createElement("div",{className:"nav-content",onClick:function(){return n(t)}},l().createElement(ft,{name:"applications"})," ",l().createElement("span",{className:"nav-text"},t.id+" v"+t.version))))};fn.defaultProps={selected:!1};var En=function(e){var t=e.config,n=e.onList,a=e.onSelect,o=e.className,i=e.select,c=(0,s.I0)(),u=_e(t),m=u.list,d=u.apps;(0,r.useEffect)((function(){c(m({onList:n,request:{select:i}}))}),[c,n]);var p=(0,r.useState)(String),f=p[0],E=p[1],g=(0,r.useCallback)((function(e){a(e),E(e.id)}),[a,E]);if(!d||d.loading)return l().createElement(we,null);if(d.error)return l().createElement(Lt,{canDismiss:!1,type:"error",scope:"inline"},d.error.message);var v=d.results;return l().createElement("div",{className:o||"apps-list nav flex-column"},v.length?v.map((function(e){return l().createElement(fn,{app:e,selected:f===e.id,onSelect:g,key:e.id})})):l().createElement("i",null,"No applications found"))};En.defaultProps={config:null,onList:null,onSelect:null,select:""};var gn=En,vn=n(7561);var hn=function(e){var t=e.config,n=e.initialValues,a=e.onSubmit,o=(0,s.I0)(),i=Se(),c=i.submit,u=i.submission,m=ye(t).systems,d=(0,r.useCallback)((function(e){a&&"result"in e&&a(e.result)}),[a]),p=[{props:{name:"name",type:"string"},description:"A name for this job",label:"Name",required:!0,children:l().createElement(lt.Z,{bsSize:"sm"})},{props:{name:"appId",type:"string"},description:"The ID of the TAPIS application to run",label:"App ID",required:!0,children:l().createElement(lt.Z,{bsSize:"sm","data-testid":"appId"})},{props:{name:"appVersion",type:"string"},description:"The version of the application to run",label:"App Version",required:!0,children:l().createElement(lt.Z,{bsSize:"sm"})},{props:{name:"execSystemId",type:"select"},description:"A TAPIS system that can run this application",label:"Execution System",required:!0,children:l().createElement(lt.Z,null,m.results.map((function(e){return l().createElement("option",{key:e.id},e.id)})))}];return l().createElement("div",null,l().createElement(We.J9,{initialValues:n,enableReinitialize:!0,validationSchema:function(e){return vn.Vo((function(e){return vn.Ry({})}))},onSubmit:function(e,t){var n=t.setSubmitting;o(c({onSubmit:d,request:e})),n(!1)}},(function(e){var t=e.isSubmitting;return l().createElement(We.l0,null,p.map((function(e){return l().createElement(pn,{props:e.props,label:e.label,required:e.required,children:e.children,description:e.description,key:e.props.name})})),l().createElement("div",{className:"JobLauncher-module__status--3AceEsz_6u"},l().createElement(Be.Z,{type:"submit",className:"btn btn-primary",disabled:t||u.loading||null!=u.result},"Submit Job"),u.loading&&l().createElement(we,{className:"launcher__loading-spinner",placement:"inline"}),u.result&&l().createElement("div",{className:"JobLauncher-module__message--l4XsNc2Rby"},l().createElement(Lt,{canDismiss:!1,type:"success",scope:"inline"},"Successfully submitted job ",u.result.uuid)),u.error&&l().createElement("div",{className:"JobLauncher-module__message--l4XsNc2Rby"},l().createElement(Lt,{canDismiss:!1,type:"error",scope:"inline"},u.error.message))))})))};hn.defaultProps={config:null,initialValues:{},onSubmit:null};var yn=hn,bn={"./ListSection.module.scss":{root:"ListSection-module__root--2DA4d8l0qz",body:"ListSection-module__body--102oG2c3-P",list:"ListSection-module__list--2y4z7QGsVb",detail:"ListSection-module__detail--3z41m6afYx","sub-header":"ListSection-module__sub-header--_liFVxe7n2"}};var _n=function(e){var t=e.children,n=e.type;return l().createElement("div",{className:(0,Ue.Z)(n,bn,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},l().createElement(Je,null,t))},Sn=function(e){var t=e.children;return l().createElement("div",{className:"ListSection-module__body--102oG2c3-P"},t)},Nn=function(e){var t=e.children;return l().createElement("div",{className:"ListSection-module__list--2y4z7QGsVb"},t)},Pn=function(e){var t=e.children;return l().createElement("div",{className:"ListSection-module__detail--3z41m6afYx"},t)},wn=function(e){var t=e.children,n=(0,s.I0)(),a=ve(),r=a.token,o=a.logout;return!r||function(e){return Date.parse(e.expires_at)<Date.now()}(r)?(n(o()),l().createElement(ge.l_,{to:"/login"})):l().createElement("div",{className:"ListSection-module__root--2DA4d8l0qz"},t)},In=function(){var e=Se().resetSubmit,t=(0,s.I0)(),n=(0,r.useState)(null),a=n[0],o=n[1],i=(0,r.useCallback)((function(n){t(e());var a=n.jobAttributes&&n.jobAttributes.execSystemId?n.jobAttributes.execSystemId:null;o({appId:n.id,appVersion:n.version,name:n.id+"-"+n.version+"-"+(new Date).toISOString().slice(0,-5),execSystemId:a})}),[o,t,e]);return l().createElement(wn,null,l().createElement(_n,null,"Apps"),l().createElement(Sn,null,l().createElement(Nn,null,l().createElement(gn,{onSelect:i,select:"jobAttributes,version"})),l().createElement(Pn,null,l().createElement(_n,{type:"sub-header"},"Job Launcher"),a?l().createElement(yn,{initialValues:a}):l().createElement(Ut,{type:"info"},"Select an app from the list."))))},Tn=n(5351),An=n(6094),Cn=n(8825);var Ln=function(e){var t=e.icon,n=e.link,a=e.counter,r=e.name,o=e.text,s=e.loading;return l().createElement(Et.Z,{className:"Dashboard-module__card--1rkPVLUqXz"},l().createElement(gt.Z,null,l().createElement("div",{className:"Dashboard-module__card-header--3_AmwYXs0_"},l().createElement("div",null,l().createElement(ft,{name:t,className:"dashboard__card-icon"})),l().createElement("div",null,r))),l().createElement(ht.Z,null,l().createElement(Tn.Z,{tag:"h5"},s?l().createElement(we,{placement:"inline"}):l().createElement("div",null,a)),l().createElement(An.Z,null,o)),l().createElement(Cn.Z,{className:"Dashboard-module__card-footer--1TfjfEfI7M"},l().createElement(i.rU,{to:n},"Go to ",r),l().createElement(ft,{name:"push-right"})))},On=function(){var e=ve().token,t=ye(),n=Se(),a=_e(),o=(0,s.I0)();return(0,r.useEffect)((function(){e&&(o(t.list({})),o(n.list({})),o(a.list({})))}),[e]),l().createElement("div",null,l().createElement(Je,{className:"dashboard__section-header"},"Dashboard for ","https://tacc.tapis.io"),l().createElement("div",{className:"Dashboard-module__header--1rMoV8qiES"},l().createElement("h5",null,"Welcome to TAPIS-UI"),l().createElement("div",null,"This web application demonstrates how to leverage the TAPIS API and ",l().createElement("i",null,"tapis-ui")," React components to build a serverless interface for High Performance Computing systems.")),l().createElement("div",{className:"Dashboard-module__cards--3TQQ1_jYjM"},e?l().createElement(l().Fragment,null,l().createElement(Ln,{icon:"data-files",name:"Systems",text:"Access TAPIS systems and files",link:"/systems",counter:t.systems.results.length+" systems",loading:t.systems.loading}),l().createElement(Ln,{icon:"applications",name:"Applications",text:"View TAPIS applications and launch jobs",link:"/apps",counter:a.apps.results.length+" apps",loading:a.apps.loading}),l().createElement(Ln,{icon:"jobs",name:"Jobs",text:"View status and details for previously launched TAPIS jobs",link:"/jobs",counter:n.jobs.results.length+" jobs",loading:n.jobs.loading})):l().createElement(Et.Z,null,l().createElement(gt.Z,null,l().createElement("div",{className:"Dashboard-module__card-header--3_AmwYXs0_"},l().createElement("div",null,l().createElement(ft,{name:"user",className:"dashboard__card-icon"})),l().createElement("div",null,"You are not logged in"))),l().createElement(ht.Z,null,l().createElement(Tn.Z,null,"Please log in to use TAPIS")),l().createElement(Cn.Z,{className:"Dashboard-module__card-footer--1TfjfEfI7M"},l().createElement(i.rU,{to:"/login"},"Proceed to login"),l().createElement(ft,{name:"push-right"})))))};var kn=function(e){var t=e.job,n=e.select,a=e.selected;return l().createElement("li",{className:"nav-item"},l().createElement("div",{className:"nav-link"+(a?" active":"")},l().createElement("div",{className:"nav-content",onClick:function(){return n(t)}},l().createElement(ft,{name:"jobs"}),l().createElement("span",{className:"nav-text"},t.name+" - ("+t.status+")"))))};kn.defaultProps={selected:!1};var jn=function(e){var t=e.config,n=e.onList,a=e.onSelect,o=e.className,i=(0,s.I0)(),c=Se(t),u=c.list,m=c.jobs;(0,r.useEffect)((function(){i(u({onList:n,request:{orderBy:"created(desc)"}}))}),[i,n]);(0,r.useCallback)((function(e){a&&a(e)}),[a]);var d=(0,r.useState)(String),p=d[0],f=d[1],E=(0,r.useCallback)((function(e){a(e),f(e.uuid)}),[a,f]);if(!m||m.loading)return l().createElement(we,null);if(m.error)return l().createElement(Lt,{canDismiss:!1,type:"error",scope:"inline"},m.error.message);var g=m.results;return l().createElement("div",{className:o||"job-list nav flex-column"},g.length?g.map((function(e){return l().createElement(kn,{job:e,select:E,selected:p===e.uuid,key:e.uuid})})):l().createElement("i",null,"No jobs found"))};jn.defaultProps={config:null,onList:null,onSelect:null};var xn=jn,Rn=function(e){var t=e.config,n=e.jobUuid,a=e.onRetrieve,o=(0,s.I0)(),i=(0,r.useState)(null),c=i[0],u=i[1],m=(0,r.useState)(!1),d=(m[0],m[1]),p=(0,r.useState)(null),f=(p[0],p[1]),E=Se(t),g=(E.jobs,E.retrieve),v=(0,r.useCallback)((function(e){a&&a(e),"success"!==e.status?f(e.message):(f(null),u(e.result)),d(!1)}),[a]);return(0,r.useEffect)((function(){o(g({request:{jobUuid:n},onRetrieve:v}))}),[a,n]),c?l().createElement("div",null,l().createElement("h3",null,c.name),l().createElement("h5",null,c.uuid),l().createElement(Ht,{data:c})):l().createElement("div",null,l().createElement(we,{placement:"inline"})," Loading...")};Rn.defaultProps={config:null,onRetrieve:null};var Un=Rn,Mn=function(){var e=(0,r.useState)(null),t=e[0],n=e[1],a=(0,r.useCallback)((function(e){n(e)}),[n]);return l().createElement(wn,null,l().createElement(_n,null,"Jobs"),l().createElement(Sn,null,l().createElement(Nn,null,l().createElement(xn,{onSelect:a})),l().createElement(Pn,null,l().createElement(_n,{type:"sub-header"},"Job Details"),t?l().createElement(Un,{jobUuid:t.uuid}):l().createElement(Ut,{type:"info"},"Select a job from the list."))))};var Dn=function(e){var t=e.config,n=e.onAuth,a=(0,s.I0)(),r=ve(t),o=r.login,i=r.loading,c=r.error,u=r.token;return l().createElement(We.J9,{initialValues:{username:"",password:""},validationSchema:function(e){return vn.Vo((function(e){return vn.Ry({username:vn.Z_().required().min(1),password:vn.Z_().required().min(1)})}))},onSubmit:function(e,t){var r=t.setSubmitting,l=e.username,s=e.password;a(o(l,s,n)),r(!1)}},(function(e){var t=e.isSubmitting;return l().createElement(We.l0,null,l().createElement(pn,{label:"Username",required:!0,description:"Your TAPIS username",props:{name:"username",type:"string"}},l().createElement(lt.Z,{bsSize:"sm"})),l().createElement(pn,{label:"Password",required:!0,description:"Your TAPIS password",props:{name:"password",type:"password"}},l().createElement(lt.Z,{bsSize:"sm"})),l().createElement("div",{className:"Login-module__status--SzGTNGTcDE"},l().createElement(Be.Z,{type:"submit",className:"btn btn-primary",disabled:t||i||null!=u},"Log In"),i&&l().createElement(we,{className:"login__loading-spinner",placement:"inline"}),u&&l().createElement("div",{className:"Login-module__message--29Zj_kCH9e"},l().createElement(Lt,{canDismiss:!1,type:"success",scope:"inline"},"Successfully logged in")),c&&l().createElement("div",{className:"Login-module__message--29Zj_kCH9e"},l().createElement(Lt,{canDismiss:!1,type:"error",scope:"inline"},c.message))))}))};Dn.defaultProps={config:null,onAuth:null};var Fn=Dn,Zn=function(){var e=(0,r.useState)(!1),t=e[0],n=e[1],a=(0,r.useCallback)((function(e){e instanceof Error||!e.result||n(!0)}),[n]);return t?l().createElement(ge.l_,{to:"/"}):l().createElement(l().Fragment,null,l().createElement(Je,null,"Login"),l().createElement("div",{className:"container"},l().createElement(Fn,{onAuth:a})))};var zn=function(e){var t=e.system,n=e.select,a=e.selected;return l().createElement("li",{className:"nav-item"},l().createElement("div",{className:"nav-link"+(a?" active":"")},l().createElement("div",{className:"nav-content",onClick:function(){return n(t)}},l().createElement(ft,{name:"data-files"}),l().createElement("span",{className:"nav-text"},t.id+" ("+t.host+")"))))};zn.defaultProps={selected:!1};var qn=function(e){var t=e.config,n=e.onList,a=e.onSelect,o=e.className,i=(0,s.I0)(),c=ye(t),u=c.systems,m=c.list;(0,r.useEffect)((function(){i(m({onList:n}))}),[i]);var d=u.results,p=(0,r.useState)(String),f=p[0],E=p[1],g=(0,r.useCallback)((function(e){a(e),E(e.id)}),[a,E]);return!u||u.loading?l().createElement(we,null):u.error?l().createElement(Lt,{canDismiss:!1,type:"error",scope:"inline"},u.error.message):l().createElement("div",{className:o||"system-list nav flex-column"},d.length?d.map((function(e){return l().createElement(zn,{system:e,selected:f===e.id,select:g,key:e.id})})):l().createElement("i",null,"No systems found"))};qn.defaultProps={config:null,onList:null,onSelect:null};var Hn=qn,Jn=function(e,t){return function(n){if(e in n.files.listings&&t in n.files.listings[e])return n.files.listings[e][t]}};var Vn=function(e){var t=e.file,n=e.onSelect;return l().createElement("li",{onClick:function(){return n?n(t):null}},l().createElement(ft,{name:"file"})," ",""+t.name)};Vn.defaultProps={onSelect:null};var Bn=function(e){var t=e.systemId,n=e.path,a=e.config,o=e.onList,i=e.onSelect,c=(0,s.I0)(),u=be(a).list;(0,r.useEffect)((function(){c(u({onList:o,request:{systemId:t,path:n}}))}),[c,t,n,o]);var m=(0,s.v9)(Jn(t,n));(0,r.useCallback)((function(e){i&&i(e)}),[i]);if(!m||m.loading)return l().createElement("div",{className:"file-list"},l().createElement(we,null));if(m.error)return l().createElement(Lt,{canDismiss:!1,type:"error",scope:"inline"},m.error.message);var d=m.results;return l().createElement("div",{className:"file-list"},d.map((function(e){return l().createElement(Vn,{file:e,key:e.name})})))};Bn.defaultProps={config:null,onList:null,onSelect:null};var Qn=Bn,Yn=function(e){var t=e.config,n=(0,r.useState)(null),a=n[0],o=n[1],s=(0,r.useCallback)((function(e){o(e)}),[o]);return l().createElement(wn,null,l().createElement(_n,null,"System List"),l().createElement(Sn,null,l().createElement(Nn,null,l().createElement(Hn,{config:t,onSelect:s})),l().createElement(Pn,null,l().createElement(_n,{type:"sub-header"},"Files"),a?l().createElement(Qn,{systemId:a.id,path:"/"}):l().createElement(Ut,{type:"info"},"Select a system from the list."))))},Gn=n(3999),Wn=n(8008),Xn=n(7243);var Kn=function(e){var t=e.to,n=e.label,a=e.iconName;return l().createElement(Gn.Z,null,l().createElement(Wn.Z,{tag:i.OL,to:t,exact:!0,className:"Sidebar-module__link--3iqxHlfbWc",activeClassName:"Sidebar-module__link--active--3dvlxhA8fo",disabled:!1},l().createElement("div",{className:"nav-content Sidebar-module__content--iukt0PwbUd"},l().createElement(ft,{name:a}),l().createElement("span",{className:"Sidebar-module__text--2_De6LmZTH"},n))))},$n=function(){var e=ve().token;return l().createElement(Xn.Z,{className:"Sidebar-module__root--2Oiv6meLgm",vertical:!0},l().createElement(Kn,{to:"/",label:"Dashboard",iconName:"dashboard"}),!e&&l().createElement(Kn,{to:"/login",label:"Login",iconName:"user"}),e&&l().createElement(l().Fragment,null,l().createElement(Kn,{to:"/systems",label:"Systems",iconName:"data-files"}),l().createElement(Kn,{to:"/apps",label:"Apps",iconName:"applications"}),l().createElement(Kn,{to:"/jobs",label:"Jobs",iconName:"jobs"}),l().createElement(Kn,{to:"/logout",label:"Log Out",iconName:"user"})))};$n.defaultProps={jwt:null};var ea=$n;var ta={short:l().createElement("a",{href:window.location.href,onClick:function(e){return e.preventDefault()},className:"wb-link"},"Example link"),long:l().createElement("a",{href:window.location.href,onClick:function(e){return e.preventDefault()},className:"wb-link"},"Example link can be a complete sentence.")},na={short:"You exist.",long:"All your information, are belong to us."},aa={short:"We did well.",long:"All your success, are belong to us."},ra={short:"You did poorly.",long:"All your warning, are come from us."},la={short:"You failed.",long:"All your error, are belong to you."},oa=l().createElement("em",null,"Can not render in isolation. See"," ",l().createElement("a",{href:"https://xd.adobe.com/view/db2660cc-1011-4f26-5d31-019ce87c1fe8-ad17/screen/3821fc3e-bda1-40d4-9e50-a514e90aa088/",target:"_blank",rel:"noreferrer"},"Adobe Design."));var sa=function(){return l().createElement("table",{className:"UIPatternsMessage-module__container--3JekOxYuU_"},l().createElement("thead",null,l().createElement("tr",null,l().createElement("th",{scope:"row",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},"component"),l().createElement("th",{scope:"col"},l().createElement("code",null,"<InlineMessage>"),l().createElement("code",null,'<Message scope="inline">')),l().createElement("th",{scope:"col"},l().createElement("code",null,"<SectionMessage (canDismiss)>"),l().createElement("code",null,'<Message scope="section" (canDismiss)>')),l().createElement("th",{scope:"col"},l().createElement("code",null,l().createElement("s",null,"<AppMessage>")),l().createElement("code",null,"<NotifcationToast>"))),l().createElement("tr",null,l().createElement("th",{scope:"row",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},l().createElement("code",null,"scope")),l().createElement("th",{scope:"col"},l().createElement("code",null,"inline")),l().createElement("th",{scope:"col"},l().createElement("code",null,"section")),l().createElement("th",{scope:"col"},l().createElement("code",null,"app"))),l().createElement("tr",null,l().createElement("th",{scope:"col",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},l().createElement("code",null,"type")),l().createElement("td",null,"When to Use",l().createElement("ul",null,l().createElement("li",null,"action result statement in table row"),l().createElement("li",null,"message when table can not load data"))),l().createElement("td",null,"When to Use",l().createElement("ul",null,l().createElement("li",null,"warning at the top of a form"),l().createElement("li",null,"message after successful submission of form"))),l().createElement("td",null,"When to Use",l().createElement("ul",null,l().createElement("li",null,"user action is required"),l().createElement("li",null,"important user-initiated action is completed"),l().createElement("li",null,"security concern"),l().createElement("li",null,"milestone for time-sensitive activity"))))),l().createElement("tbody",null,l().createElement("tr",null,l().createElement("th",{scope:"row"},l().createElement("code",null,"info")),l().createElement("td",null,l().createElement(jt,{type:"info"},na.long," ",ta.short),l().createElement("hr",null),l().createElement(jt,{type:"info"},na.short," ",ta.long)),l().createElement("td",null,l().createElement(Ut,{type:"info"},na.long," ",ta.short),l().createElement(Ut,{type:"info",canDismiss:!0},na.short," ",ta.long)),l().createElement("td",{rowSpan:"2"},oa)),l().createElement("tr",null,l().createElement("th",{scope:"row"},l().createElement("code",null,"success")),l().createElement("td",null,l().createElement(jt,{type:"success"},aa.long," ",ta.short),l().createElement("hr",null),l().createElement(jt,{type:"success"},aa.short," ",ta.long)),l().createElement("td",null,l().createElement(Ut,{type:"success"},aa.long," ",ta.short),l().createElement(Ut,{type:"success",canDismiss:!0},aa.short," ",ta.long))),l().createElement("tr",null,l().createElement("th",{scope:"row"},l().createElement("code",null,"warn")),l().createElement("td",null,l().createElement(jt,{type:"warn"},ra.long," ",ta.short),l().createElement("hr",null),l().createElement(jt,{type:"warn"},ra.short," ",ta.long)),l().createElement("td",null,l().createElement(Ut,{type:"warn"},ra.long," ",ta.short),l().createElement(Ut,{type:"warn",canDismiss:!0},ra.short," ",ta.long)),l().createElement("td",{rowSpan:"2",className:"UIPatternsMessage-module__is-row-end--30wX3GXjk5"},oa)),l().createElement("tr",null,l().createElement("th",{scope:"row"},l().createElement("code",null,"error")),l().createElement("td",null,l().createElement(jt,{type:"error"},la.long," ",ta.short),l().createElement("hr",null),l().createElement(jt,{type:"error"},la.short," ",ta.long)),l().createElement("td",null,l().createElement(Ut,{type:"error"},la.long," ",ta.short),l().createElement(Ut,{type:"error",canDismiss:!0},la.short," ",ta.long)))))};var ia={Username:"bobward500",Prefix:"Mr.",Name:"Bob Ward",Suffix:"The 5th","Favorite Numeric Value":5,Icon:l().createElement(ft,{name:"dashboard"})};var ca=function(){return l().createElement(l().Fragment,null,l().createElement("div",{className:"UIPatternsDescriptionList-module__list-cols--3ksSB0gUfs"},l().createElement("dl",null,l().createElement("dt",null,"Vertical Layout & Default Density"),l().createElement("dd",null,l().createElement(Ht,{data:ia}))),l().createElement("dl",null,l().createElement("dt",null,"Vertical Layout & Compact Density"),l().createElement("dd",null,l().createElement(Ht,{data:ia,density:"compact"}))),l().createElement("dl",null,l().createElement("dt",null,"Vertical Layout & Compact Density - Narrow Container"),l().createElement("dd",null,l().createElement(Ht,{data:ia,density:"compact",className:"UIPatternsDescriptionList-module__item-x-narrow--1rvcBF79vm"})))),l().createElement("div",{className:"UIPatternsDescriptionList-module__list-rows--2r1RZfz1lt"},l().createElement("dl",null,l().createElement("dt",null,"Horizontal Layout & Default Density"),l().createElement("dd",null,l().createElement(Ht,{data:ia,direction:"horizontal"})),l().createElement("dt",null,"Horizontal Layout & Compact Density"),l().createElement("dd",null,l().createElement(Ht,{data:ia,density:"compact",direction:"horizontal"})),l().createElement("dt",null,"Horizontal Layout & Compact Density - Narrow Container"),l().createElement("dd",null,l().createElement(Ht,{data:ia,density:"compact",direction:"horizontal",className:"UIPatternsDescriptionList-module__item-narrow--1XTYrbGHay"})))),l().createElement("div",{className:"UIPatternsDescriptionList-module__list-rows--2r1RZfz1lt"},l().createElement("dl",null,l().createElement("dt",null,"Vertical Layout & Nested Data"),l().createElement("dd",null,l().createElement(Ht,{data:{"Nested List One":l().createElement(Ht,{data:ia,direction:"vertical"}),"Nested List Two":l().createElement(Ht,{data:ia,direction:"vertical"})}})),l().createElement("dt",null,"Horizontal Layout & Nested Data"),l().createElement("dd",null,l().createElement(Ht,{data:{"Nested List One":l().createElement(Ht,{data:ia,direction:"horizontal"}),"Nested List Two":l().createElement(Ht,{data:ia,direction:"horizontal"})},direction:"vertical"})))))};var ua=function(){return l().createElement("dl",null,l().createElement("dt",null,"Default (",l().createElement("code",null,"single"),")"),l().createElement("dd",null,l().createElement("small",null,"Only field (not dropdown) can be styled cross-browser."),l().createElement(Bt,null,l().createElement("optgroup",{label:"Cryptographic People"},l().createElement("option",{value:"alice"},"Alice"),l().createElement("option",{value:"bob"},"Bob"),l().createElement("option",{value:"charlie"},"Charlie")),l().createElement("optgroup",{label:"Common American Fruit"},l().createElement("option",{value:"apple"},"Apple"),l().createElement("option",{value:"banana"},"Banana"),l().createElement("option",{value:"grapes"},"Grapes")))),l().createElement("dt",null,"Multiple (",l().createElement("code",null,"multiple"),")"),l().createElement("dd",null,l().createElement("small",null,"Styling options are limited and browser-dependent."),l().createElement(Bt,{type:"multiple"},l().createElement("optgroup",{label:"Cryptographic People"},l().createElement("option",{value:"alice"},"Alice"),l().createElement("option",{value:"bob"},"Bob"),l().createElement("option",{value:"charlie"},"Charlie")),l().createElement("optgroup",{label:"Common American Fruit"},l().createElement("option",{value:"apple"},"Apple"),l().createElement("option",{value:"banana"},"Banana"),l().createElement("option",{value:"grapes"},"Grapes")))))};var ma=function(){return l().createElement("dl",null,l().createElement("dt",null,"Default Pill (normal)"),l().createElement("dd",null,l().createElement(en,null,"Example Pill")),l().createElement("dt",null,"Normal Pill"),l().createElement("dd",null,l().createElement(en,{type:"normal"},"Normal Pill")),l().createElement("dt",null,"Success Pill"),l().createElement("dd",null,l().createElement(en,{type:"success"},"Success Pill")),l().createElement("dt",null,"Warning Pill"),l().createElement("dd",null,l().createElement(en,{type:"warning"},"Warning Pill")),l().createElement("dt",null,"Danger Pill"),l().createElement("dd",null,l().createElement(en,{type:"danger"},"Danger Pill")))};var da=function(){return l().createElement("div",{className:"UIPatternsReadMore-module__root--2ATMc7IutA"},l().createElement(sn,null,"Long text beyond 4 lines should be clamped. Short text should not be clamped. This element is responsive to line number changes due to window resizing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis dapibus leo ornare sem mollis viverra. Sed metus tortor, luctus vitae tempus a, consectetur eu enim. Vivamus euismod ante sed augue aliquam, at venenatis risus varius. Duis laoreet, tellus at euismod consequat, nulla neque vestibulum sapien, at placerat erat nibh at ligula. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum mattis elit non enim gravida tempus. Quisque et nisi ligula. Quisque sagittis vel ex sed rhoncus. In lacus purus, elementum vel ullamcorper at, accumsan congue sem. Morbi eu mattis magna. Donec arcu ligula, mollis ac leo ut, pretium euismod turpis. Maecenas quis elit id dui vehicula sagittis semper aliquet enim."))};var pa=function(){return l().createElement("div",null,l().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"Message & Notification"),l().createElement(sa,null)),l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"DropdownSelector"),l().createElement(ua,null))),l().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"DescriptionList"),l().createElement(ca,null))),l().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"Pills"),l().createElement(ma,null))),l().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},l().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},l().createElement("h6",null,"Read More"),l().createElement(da,null))))},fa=function(){var e=(0,s.I0)(),t=ve().logout;return(0,r.useEffect)((function(){e(t())}),[t,e]),l().createElement(ge.l_,{to:"/"})};var Ea=function(){return l().createElement("div",{className:"workbench-wrapper"},l().createElement(ea,null),l().createElement("div",{className:"workbench-content"},l().createElement(ge.AW,{exact:!0,path:"/"},l().createElement(On,null)),l().createElement(ge.AW,{path:"/login"},l().createElement(Zn,null)),l().createElement(ge.AW,{path:"/logout"},l().createElement(fa,null)),l().createElement(ge.AW,{path:"/systems"},l().createElement(Yn,null)),l().createElement(ge.AW,{path:"/apps"},l().createElement(In,null)),l().createElement(ge.AW,{path:"/jobs"},l().createElement(Mn,null)),l().createElement(ge.AW,{path:"/uipatterns"},l().createElement(Je,null,"UI Patterns"),l().createElement(pa,null))))};n(4155),Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var ga=Ee();o.render(r.createElement(s.zt,{store:ga},r.createElement(i.UT,null,r.createElement(Je,{className:"tapis-ui__header"},"TAPIS UI"),r.createElement(Ea,null))),document.getElementById("react-root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},n={};function a(e){var r=n[e];if(void 0!==r)return r.exports;var l=n[e]={id:e,loaded:!1,exports:{}};return t[e].call(l.exports,l,l.exports,a),l.loaded=!0,l.exports}a.m=t,e=[],a.O=function(t,n,r,l){if(!n){var o=1/0;for(c=0;c<e.length;c++){n=e[c][0],r=e[c][1],l=e[c][2];for(var s=!0,i=0;i<n.length;i++)(!1&l||o>=l)&&Object.keys(a.O).every((function(e){return a.O[e](n[i])}))?n.splice(i--,1):(s=!1,l<o&&(o=l));s&&(e.splice(c--,1),t=r())}return t}l=l||0;for(var c=e.length;c>0&&e[c-1][2]>l;c--)e[c]=e[c-1];e[c]=[n,r,l]},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,{a:t}),t},a.d=function(e,t){for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){var e={179:0};a.O.j=function(t){return 0===e[t]};var t=function(t,n){var r,l,o=n[0],s=n[1],i=n[2],c=0;for(r in s)a.o(s,r)&&(a.m[r]=s[r]);if(i)var u=i(a);for(t&&t(n);c<o.length;c++)l=o[c],a.o(e,l)&&e[l]&&e[l][0](),e[o[c]]=0;return a.O(u)},n=self.webpackChunktapis_ui=self.webpackChunktapis_ui||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),a.O(void 0,[729],(function(){return a(3658)}));var r=a.O(void 0,[729],(function(){return a(4538)}));r=a.O(r)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,