!function(){"use strict";var e,t={4538:function(e,t,n){var a={};n.r(a),n.d(a,{ACCOUNT:function(){return Oe},ALLOCATIONS:function(){return Ae},APPLICATIONS:function(){return Ce},DASHBOARD:function(){return Ie},DATA:function(){return Te},HISTORY:function(){return Le},TICKETS:function(){return ke},UI:function(){return je}});var l=n(7294),r=n.n(l),o=n(3935),s=n(9226),i=n(3727),c=n(879),u=(n(4500),n(797)),m=function(){return(m=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},d={token:null,loading:!1,error:null},p=n(6486),f=function(){return(f=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},E=function(e,t){for(var n=0,a=t.length,l=e.length;n<a;n++,l++)e[l]=t[n];return e},g=function(e){return{loading:!1,error:null,results:[],offset:0,limit:e}},v=function(e){return f(f({},e),{loading:!0,error:null})},h=function(e,t){return f(f({},e),{loading:!1,error:t})},y=function(e,t,n,a,l){var r,o=(0,p.cloneDeep)(e);if(!t.length)return o.loading=!1,o.error=null,o;if(o.offset=function(e){return void 0===e?0:e}(n),o.limit=function(e,t){return void 0===e?t:e}(a,l),o.loading=!1,o.error=null,0===o.offset)return o.results=t,o;if(e.results.length===n)return o.results=o.results.concat(t),o;if(e.results.length>n)return(r=o.results).splice.apply(r,E([n,a],t)),o;if(e.results.length<n){for(var s=[],i=0;i<n-e.results.length;i++)s.push(null);return o.results=o.results.concat(s).concat(t),o}return o},b=function(){return(b=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},_=g(100),S={systems:b({},_)},N=function(e,t){return v(e)},P=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},w=function(e,t){return h(e,t.error)};var I=function(){return(I=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},T={listings:{}},A=function(e,t,n){var a=I({},e);return t in a||(a[t]={}),n in a[t]||(a[t][n]=g(1e3)),a},C=function(e,t){var n=t.systemId,a=t.path,l=t.incoming,r=t.offset,o=t.limit,s=A(e,n,a);return s[n][a]=y(s[n][a],l,r,o,1e3),s},L=function(e,t){var n=t.systemId,a=t.path,l=t.error,r=A(e,n,a);return r[n][a]=h(r[n][a],l),r};var O=function(){return(O=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},k=g(100),j=(O({},k),function(e,t){return v(e)}),x=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},R=function(e,t){return h(e,t.error)},U=function(e,t){switch(t.type){case"TAPIS_APPS_LIST_REQUEST":return O(O({},e),{apps:j(e.apps,t.payload)});case"TAPIS_APPS_LIST_SUCCESS":return O(O({},e),{apps:x(e.apps,t.payload)});case"TAPIS_APPS_LIST_FAILURE":return O(O({},e),{apps:R(e.apps,t.payload)});default:return e}},M=function(){return(M=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},D=g(100),F={apps:M({},D)};var Z=function(){return(Z=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},z=(g(100),function(e,t){return v(e)}),q=function(e,t){return y(e,t.incoming,t.params.skip,t.params.limit,100)},H=function(e,t){return h(e,t.error)},J=function(e,t){switch(t.type){case"TAPIS_JOBS_LIST_REQUEST":return Z(Z({},e),{jobs:z(e.jobs,t.payload)});case"TAPIS_JOBS_LIST_SUCCESS":return Z(Z({},e),{jobs:q(e.jobs,t.payload)});case"TAPIS_JOBS_LIST_FAILURE":return Z(Z({},e),{jobs:H(e.jobs,t.payload)});default:return e}},V=function(){return(V=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},B=function(e,t){switch(t.type){case"TAPIS_JOBS_SUBMIT_REQUEST":return V(V({},e),{submission:{loading:!0,error:null,result:null}});case"TAPIS_JOBS_SUBMIT_SUCCESS":return V(V({},e),{submission:{loading:!1,error:null,result:t.payload.result}});case"TAPIS_JOBS_SUBMIT_FAILURE":return V(V({},e),{submission:{loading:!1,error:t.payload.error,result:null}});case"TAPIS_JOBS_SUBMIT_RESET":return V(V({},e),{submission:{loading:!1,error:null,result:null}});default:return e}},Q=function(){return(Q=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},Y=g(100),G={jobs:Q({},Y),submission:{loading:!1,error:null,result:null}};var W=(0,c.UY)({authenticator:function(e,t){switch(void 0===e&&(e=d),t.type){case"TAPIS_AUTH_LOGIN_REQUEST":return m(m({},e),{token:null,loading:!0,error:null});case"TAPIS_AUTH_LOGIN_SUCCESS":return m(m({},e),{token:t.payload.response.result.access_token,loading:!1,error:null});case"TAPIS_AUTH_LOGIN_FAILURE":return m(m({},e),{token:null,loading:!1,error:t.payload.error});case"TAPIS_AUTH_LOGOUT_REQUEST":return m(m({},e),{token:null,loading:!1,error:null});default:return e}},systems:function(e,t){switch(void 0===e&&(e=S),t.type){case"TAPIS_SYSTEMS_LIST_REQUEST":return b(b({},e),{systems:N(e.systems,t.payload)});case"TAPIS_SYSTEMS_LIST_SUCCESS":return b(b({},e),{systems:P(e.systems,t.payload)});case"TAPIS_SYSTEMS_LIST_FAILURE":return b(b({},e),{systems:w(e.systems,t.payload)});default:return e}},files:function(e,t){switch(void 0===e&&(e=T),t.type){case"TAPIS_FILES_LIST_REQUEST":return I(I({},e),{listings:(n=e.listings,a=t.payload,l=a.systemId,r=a.path,o=A(n,l,r),o[l][r]=v(o[l][r]),o)});case"TAPIS_FILES_LIST_SUCCESS":return I(I({},e),{listings:C(e.listings,t.payload)});case"TAPIS_FILES_LIST_FAILURE":return I(I({},e),{listings:L(e.listings,t.payload)});default:return e}var n,a,l,r,o},apps:function(e,t){void 0===e&&(e=F);var n=[U],a=M({},e);return n.forEach((function(e){a=e(a,t)})),a},jobs:function(e,t){void 0===e&&(e=G);var n=[J,B],a=Q({},e);return n.forEach((function(e){a=e(a,t)})),a}}),X=n(4857),K=n(4438),$=n(4098),ee=n.n($),te=function(){return(te=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},ne=function(e,t){var n,a,l,r,o={label:0,sent:function(){if(1&l[0])throw l[1];return l[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(l=2&r[0]?a.return:r[0]?a.throw||((l=a.return)&&l.call(a),0):a.next)&&!(l=l.call(a,r[1])).done)return l;switch(a=0,l&&(r=[2&r[0],l.value]),r[0]){case 0:case 1:l=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(l=o.trys,(l=l.length>0&&l[l.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!l||r[1]>l[0]&&r[1]<l[3])){o.label=r[1];break}if(6===r[0]&&o.label<l[1]){o.label=l[1],l=r;break}if(l&&o.label<l[2]){o.label=l[2],o.ops.push(r);break}l[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{n=l=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};function ae(e){var t,n,a,l,r,o,s;return ne(this,(function(i){switch(i.label){case 0:return t=e.config,n=e.username,a=e.password,"https://tacc.tapis.io",l=t&&t.tenant||"https://tacc.tapis.io",r=new K._F.Configuration({basePath:l,fetchApi:ee()}),o=new K._F.TokensApi(r),s={reqCreateToken:{grant_type:"password",username:n,password:a}},[4,(0,X.RE)([o,o.createToken],s)];case 1:return[2,i.sent()]}}))}function le(e){var t,n;return ne(this,(function(a){switch(a.label){case 0:return a.trys.push([0,5,,11]),[4,(0,X.RE)(ae,e.payload)];case 1:return t=a.sent(),[4,(0,X.gz)({type:"TAPIS_AUTH_LOGIN_SUCCESS",payload:{response:t}})];case 2:return a.sent(),e.payload.onAuth?[4,(0,X.RE)(e.payload.onAuth,te({},t))]:[3,4];case 3:a.sent(),a.label=4;case 4:return[3,11];case 5:return(n=a.sent()).json?[4,n.json()]:[3,7];case 6:n=a.sent(),a.label=7;case 7:return[4,(0,X.gz)({type:"TAPIS_AUTH_LOGIN_FAILURE",payload:{error:n}})];case 8:return a.sent(),e.payload.onAuth?[4,(0,X.RE)(e.payload.onAuth,n)]:[3,10];case 9:a.sent(),a.label=10;case 10:return[3,11];case 11:return[2]}}))}function re(){return ne(this,(function(e){switch(e.label){case 0:return[4,(0,X.A7)("TAPIS_AUTH_LOGIN_REQUEST",le)];case 1:return e.sent(),[2]}}))}var oe=function(e){return e.authenticator.token},se=function(e,t){var n,a,l,r,o={label:0,sent:function(){if(1&l[0])throw l[1];return l[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(l=2&r[0]?a.return:r[0]?a.throw||((l=a.return)&&l.call(a),0):a.next)&&!(l=l.call(a,r[1])).done)return l;switch(a=0,l&&(r=[2&r[0],l.value]),r[0]){case 0:case 1:l=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(l=o.trys,(l=l.length>0&&l[l.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!l||r[1]>l[0]&&r[1]<l[3])){o.label=r[1];break}if(6===r[0]&&o.label<l[1]){o.label=l[1],l=r;break}if(l&&o.label<l[2]){o.label=l[2],o.ops.push(r);break}l[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{n=l=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},ie=function(e,t){for(var n=0,a=t.length,l=e.length;n<a;n++,l++)e[l]=t[n];return e};function ce(e){var t,n,a,l,r,o,s,i,c,u,m,d,p,f,E,g;return se(this,(function(v){switch(v.label){case 0:t=e.payload,n=t.config,a=t.onApi,l=t.onRequest,r=t.onSuccess,o=t.onFailure,s=t.module,i=t.func,c=t.args,v.label=1;case 1:return v.trys.push([1,11,,19]),l?[4,(0,X.gz)(l())]:[3,3];case 2:v.sent(),v.label=3;case 3:return[4,(0,X.Ys)(oe)];case 4:return u=v.sent(),m=n&&n.jwt||u.access_token,"https://tacc.tapis.io",d=n&&n.tenant||"https://tacc.tapis.io",p=new s.Configuration({basePath:d,headers:{"X-Tapis-Token":m}}),f=new e.payload.api(p),[4,X.RE.apply(void 0,ie([[f,i]],c))];case 5:return E=v.sent(),r?[4,(0,X.gz)(r(E))]:[3,7];case 6:v.sent(),v.label=7;case 7:return a?[4,(0,X.RE)(a,E)]:[3,9];case 8:v.sent(),v.label=9;case 9:return[4,(0,X.gz)({type:"TAPIS_REDUX_API_SUCCESS"})];case 10:return v.sent(),[3,19];case 11:return(g=v.sent()).json?[4,g.json()]:[3,13];case 12:g=v.sent(),v.label=13;case 13:return o?[4,(0,X.gz)(o(g))]:[3,15];case 14:v.sent(),v.label=15;case 15:return a?[4,(0,X.RE)(a,g)]:[3,17];case 16:v.sent(),v.label=17;case 17:return[4,(0,X.gz)({type:"TAPIS_REDUX_API_FAILURE"})];case 18:return v.sent(),[3,19];case 19:return[2]}}))}function ue(){return se(this,(function(e){switch(e.label){case 0:return[4,(0,X.ib)("TAPIS_REDUX_API_REQUEST",ce)];case 1:return e.sent(),[2]}}))}var me=function(e,t){var n,a,l,r,o={label:0,sent:function(){if(1&l[0])throw l[1];return l[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(l=2&r[0]?a.return:r[0]?a.throw||((l=a.return)&&l.call(a),0):a.next)&&!(l=l.call(a,r[1])).done)return l;switch(a=0,l&&(r=[2&r[0],l.value]),r[0]){case 0:case 1:l=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(l=o.trys,(l=l.length>0&&l[l.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!l||r[1]>l[0]&&r[1]<l[3])){o.label=r[1];break}if(6===r[0]&&o.label<l[1]){o.label=l[1],l=r;break}if(l&&o.label<l[2]){o.label=l[2],o.ops.push(r);break}l[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{n=l=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};function de(){return me(this,(function(e){switch(e.label){case 0:return[4,(0,X.$6)([ue(),re()])];case 1:return e.sent(),[2]}}))}var pe=(0,u.ZP)(),fe=[];fe.push(pe);var Ee=function(){var e=(0,c.MT)(W,c.md.apply(void 0,fe));return pe.run(de),e},ge=n(5977),ve=function(e){var t=(0,s.v9)((function(e){return e.authenticator}));return{token:t.token,loading:t.loading,error:t.error,login:function(t,n,a){return void 0===a&&(a=null),{type:"TAPIS_AUTH_LOGIN_REQUEST",payload:{username:t,password:n,config:e,onAuth:a}}},logout:function(){return{type:"TAPIS_AUTH_LOGOUT_REQUEST"}}}};function he(e){return{type:"TAPIS_REDUX_API_REQUEST",payload:e}}var ye=function(e){return{systems:(0,s.v9)((function(e){return e.systems})).systems,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_SYSTEMS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_SYSTEMS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_SYSTEMS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.lA,api:K.lA.SystemsApi,func:K.lA.SystemsApi.prototype.getSystems,args:[n]})}(e,t.onList,t.request||{})}}},be=function(e){return{listings:(0,s.v9)((function(e){return e.files})).listings,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null);var a=n.systemId,l=n.path,r=n.offset,o=n.limit;return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_FILES_LIST_REQUEST",payload:{systemId:a,path:l,offset:r,limit:o}}},onSuccess:function(e){return{type:"TAPIS_FILES_LIST_SUCCESS",payload:{systemId:a,path:l,incoming:e.result,offset:r,limit:o}}},onFailure:function(e){return{type:"TAPIS_FILES_LIST_FAILURE",payload:{systemId:a,path:l,offset:r,limit:o,error:e}}},module:K.hv,api:K.hv.FileOperationsApi,func:K.hv.FileOperationsApi.prototype.listFiles,args:[n]})}(e,t.onList,t.request)}}},_e=function(e){return void 0===e&&(e=null),{apps:(0,s.v9)((function(e){return e.apps})).apps,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_APPS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_APPS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_APPS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.BQ,api:K.BQ.ApplicationsApi,func:K.BQ.ApplicationsApi.prototype.getApps,args:[n]})}(e,t.onList,t.request||{})}}},Se=function(e){var t=(0,s.v9)((function(e){return e.jobs}));return{jobs:t.jobs,submission:t.submission,list:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n={});return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_JOBS_LIST_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_JOBS_LIST_SUCCESS",payload:{params:n,incoming:e.result}}},onFailure:function(e){return{type:"TAPIS_JOBS_LIST_FAILURE",payload:{error:e,params:n}}},module:K.pe,api:K.pe.JobsApi,func:K.pe.JobsApi.prototype.getJobList,args:[n]})}(e,t.onList,t.request)},submit:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null);var a={reqSubmitJob:n};return he({config:e,onApi:t,onRequest:function(){return{type:"TAPIS_JOBS_SUBMIT_REQUEST"}},onSuccess:function(e){return{type:"TAPIS_JOBS_SUBMIT_SUCCESS",payload:{params:n,result:e.result}}},onFailure:function(e){return{type:"TAPIS_JOBS_SUBMIT_FAILURE",payload:{error:e,params:n}}},module:K.pe,api:K.pe.JobsApi,func:K.pe.JobsApi.prototype.submitJob,args:[a]})}(e,t.onSubmit,t.request)},resetSubmit:function(){return{type:"TAPIS_JOBS_SUBMIT_RESET",payload:{}}},retrieve:function(t){return function(e,t,n){void 0===e&&(e=null),void 0===t&&(t=null);return he({config:e,onApi:t,onRequest:null,onSuccess:null,onFailure:null,module:K.pe,api:K.pe.JobsApi,func:K.pe.JobsApi.prototype.getJob,args:[n]})}(e,t.onRetrieve,t.request)}}},Ne=n(6955);var Pe=function(e){var t=e.placement,n=e.className;return r().createElement("div",{className:"loading-icon "+n,"data-testid":"loading-spinner"},r().createElement(Ne.Z,{className:t}))};Pe.defaultProps={placement:"section",className:""};var we=Pe,Ie="This page allows you to monitor your job status, get help with tickets, and view the status of the High Performance Computing (HPC) systems.",Te="This page allows you to upload and manage your files.",Ae="This page allows you to monitor the status of allocations on the HPC systems and view a breakdown of team usage.",Ce="This page allows you to submit jobs to the HPC systems or access Cloud services using a variety of applications.",Le="This page allows you to monitor a log of all previous job submissions.",Oe="This page allows you to manage your account profile, change your password and view software licenses.",ke="This page allows you to submit a help request via an RT Ticket.",je="This hidden page allows developers to review UI components in isolation.";function xe(e){var t=e.children,n=e.className,o=e.routeName,s=e.welcomeText||a[o],i=o||s,c=s&&r().createElement(Xt,{messageName:i},s),u=Gt(o)||t.length>0;return(0,l.useEffect)((function(){u?document.body.classList.add("has-message"):document.body.classList.remove("has-message")}),[u]),r().createElement("aside",{className:(n?n+" ":"")+"SectionMessages-module__root--1QB6cM4uPv"},c,t)}xe.defaultProps={children:"",className:"",routeName:"",welcomeText:""};var Re=xe,Ue=n(7411),Me={},De={oneRow:"one-row",oneColumn:"one-column",twoColumn:"two-column"};!function(e,t){for(var n=0,a=t.length,l=e.length;n<a;n++,l++)e[l]=t[n]}([],Object.keys(De));function Fe(e){var t,n=e.className,a=e.children,l=e.layoutName,o=e.shouldScroll,s=e.shouldDebugLayout,i=e.tagName,c=["styles.root"],u=De[l],m=i;return o&&c.push("styles.should-scroll"),s&&c.push("styles.should-debug-layout"),u&&c.push("layoutStyles."+u),t=c.join(" "),r().createElement(m,{className:(n?n+" ":"")+(0,Ue.Z)(t,Me,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},a)}Fe.defaultProps={className:"",shouldScroll:!1,shouldDebugLayout:!1,tagName:"div"};var Ze=Fe;function ze(e){var t=e.bodyClassName,n=e.children,a=e.className,o=e.content,s=e.contentClassName,i=e.contentLayoutName,c=e.contentShouldScroll,u=e.header,m=e.headerActions,d=e.headerClassName,p=e.manualContent,f=e.manualHeader,E=e.messages,g=e.messagesClassName,v=e.routeName,h=e.welcomeMessageText,y=u||d||m;if(p&&(o||s||i||c))throw new Error("When passing `manualContent`, the following props are ineffectual: `content`, `contentClassName`, `contentLayoutName`, `contentShouldScroll`");if(f&&(u||d||m))throw new Error("When passing `manualHeader`, the following props are ineffectual: `header`, `headerClassName`, `headerActions`");return(0,l.useEffect)((function(){return t&&document.body.classList.add(t),function(){t&&document.body.classList.remove(t)}}),[t]),r().createElement("section",{className:(a?a+" ":"")+"Section-module__root--2m3Ew8L7fZ"},r().createElement(Re,{routeName:v,className:(g?g+" ":"")+"Section-module__messages--30rTl5JQJt",welcomeText:h},E),f?r().createElement(r().Fragment,null,f):y&&r().createElement(Je,{className:(d?d+" ":"")+"Section-module__header--15uAiolZtN",actions:m},u),p?r().createElement(r().Fragment,null,p,n):r().createElement(Ze,{tagName:"main",className:(s?s+" ":"")+"Section-module__content--1c2lm9Op7V",layoutName:i||"oneRow",shouldScroll:c},o,n))}ze.defaultProps={bodyClassName:"",children:"",className:"",content:"",contentClassName:"",contentLayoutName:"",contentShouldScroll:!1,header:"",headerActions:"",headerClassName:"",manualContent:void 0,manualHeader:void 0,messages:"",messagesClassName:"",routeName:"",welcomeMessageText:""};var qe={"./SectionHeader.module.css":{root:"SectionHeader-module__root--3EcA5dZFJf",heading:"SectionHeader-module__heading--CLhSCcnpC4","for-form":"SectionHeader-module__for-form--cFcJjuP3gr","for-table":"SectionHeader-module__for-table--3LJZ80fi88"}};function He(e){var t,n=e.actions,a=e.children,l=e.className,o=e.isForForm,s=e.isForTable,i=["root"],c=o||s?"h3":"h2";return o&&i.push("for-form"),s&&i.push("for-table"),t=i.join(" "),r().createElement("header",{className:(l?l+" ":"")+(0,Ue.Z)(t,qe,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},a&&r().createElement(c,{className:"SectionHeader-module__heading--CLhSCcnpC4"},a),n)}He.defaultProps={actions:"",className:"",children:"",isForForm:!1,isForTable:!1};var Je=He,Ve=n(1389),Be=n(7975);function Qe(e){return 0===e.numberOfFiles?null:r().createElement("span",{className:"rejected-file-message text-danger"},"One or more of your files exceeds the maximum size for an upload and were not attached.")}function Ye(e){var t=e.files,n=e.onSetFiles,a=e.onRejectedFiles,o=e.maxSize,s=e.maxSizeMessage,i=e.onRemoveFile,c=e.isSubmitted,u=(0,l.useState)(0),m=u[0],d=u[1],p=(0,Ve.u)({noClick:!0,maxSize:o,onDrop:function(e){n(e),d(0)},onDropRejected:function(e){a&&a(e),d(e.length)}}),f=p.getRootProps,E=p.open,g=p.getInputProps,v=t&&t.length>0;return c&&m>0&&d(0),r().createElement("div",Object.assign({},f(),{className:"dropzone-area"}),r().createElement("input",g()),!v&&r().createElement("div",{className:"no-attachment-view"},r().createElement("i",{className:"icon-upload"}),r().createElement("br",null),t&&r().createElement(Qe,{numberOfFiles:m}),r().createElement(Be.Z,{outline:!0,onClick:E,className:"select-files-button"},"Select File(s)"),r().createElement("strong",null,"or"),r().createElement("strong",null,"Drag and Drop"),r().createElement("br",null),s),v&&r().createElement("div",{className:"attachment-view"},r().createElement("div",{className:"attachment-list"},t.map((function(e,t){return r().createElement("div",{className:"attachment-block",key:[e.name,t].toString()},r().createElement("span",{className:"d-inline-block text-truncate"},e.name),r().createElement(Be.Z,{color:"link",className:"attachment-remove",onClick:function(){var e;d(0),e=t,i&&(i(e),d(0))}},"Remove"))}))),r().createElement(Qe,{numberOfFiles:m}),r().createElement(Be.Z,{outline:!0,onClick:E,className:"select-files-button"},"Select File(s)")))}Ye.defaultProps={files:null,isSubmitted:!1,onRejectedFiles:null,onRemoveFile:null};var Ge=Ye,We=n(7513),Xe=n(2669),Ke=n(7954),$e=n(6792);var et=function(e,t){for(var n=0,a=t.length,l=e.length;n<a;n++,l++)e[l]=t[n];return e};function tt(e){var t=e.id,n=e.isSubmitted,a=e.description,l=e.maxSizeMessage,o=e.maxSize,s=(0,We.U$)(t),i=s[0],c=s[2];return r().createElement(Xe.Z,null,r().createElement(Ke.Z,{for:t,size:"sm",className:"form-field__label",style:{display:"flex",alignItems:"center"}},"Attach Files"),r().createElement(Ge,{id:t,files:i.value,onSetFiles:function(e){c.setValue(et(et([],i.value),e))},onRemoveFile:function(e){var t=i.value;t.splice(e,1),c.setValue(t)},isSubmitted:n,maxSizeMessage:l,maxSize:o}),r().createElement($e.Z,{className:"form-field__help",color:"muted"},a))}tt.defaultProps={description:void 0,maxSize:1/0};var nt=n(9618),at=n(7354),lt=n(6277),rt=n(609);var ot=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var l=0;for(a=Object.getOwnPropertySymbols(e);l<a.length;l++)t.indexOf(a[l])<0&&Object.prototype.propertyIsEnumerable.call(e,a[l])&&(n[a[l]]=e[a[l]])}return n},st=function(e){var t,n=e.children;switch(e.type){case"InputGroup":t=r().createElement(nt.Z,null,n);break;case"FormGroup":default:t=r().createElement(Xe.Z,null,n)}return t};st.defaultProps={type:"FormGroup"};var it=function(e){var t=e.addon,n=e.addonType,a=e.label,o=e.description,s=e.required,i=e.agaveFile,c=e.SelectModal,u=ot(e,["addon","addonType","label","description","required","agaveFile","SelectModal"]),m=(0,We.U$)(u),d=m[0],p=m[1],f=m[2],E=(0,l.useState)(!1),g=E[0],v=E[1],h=u.id,y=u.name,b=void 0!==t,_=b?"InputGroup":"",S=function(){return r().createElement(r().Fragment,null,r().createElement(Ke.Z,{className:"form-field__label",for:h||y,size:"sm",style:{display:"flex",alignItems:"center"}},a," ",s?r().createElement(at.Z,{color:"danger",style:{marginLeft:"10px"}},"Required"):null))},N=function(){return r().createElement(r().Fragment,null,p.touched&&p.error?r().createElement("div",{className:"form-field__validation-error"},p.error):o&&r().createElement($e.Z,{className:"form-field__help",color:"muted"},o))};if(t&&i)throw new Error("You must not pass `addon` and `agaveFile`, because `agaveFile` triggers its own field add-on");if(!i&&c||i&&!c)throw new Error("An `agaveFile` and a `SelectModal` must both be passed");return r().createElement(r().Fragment,null,a&&b?r().createElement(S,null):null,r().createElement(st,{type:_},a&&!b?r().createElement(S,null):null,i?r().createElement(r().Fragment,null,r().createElement(c,{isOpen:g,toggle:function(){v((function(e){return!e}))},onSelect:function(e,t){f.setValue("agave://"+e+t)}}),r().createElement(nt.Z,null,r().createElement(lt.Z,{addonType:"prepend"},r().createElement(Be.Z,{size:"sm",color:"secondary",type:"button",onClick:function(){return v(!0)}},"Select")),r().createElement(rt.Z,Object.assign({},d,u,{bsSize:"sm"})))):r().createElement(r().Fragment,null,b&&"prepend"===n?t:null,r().createElement(rt.Z,Object.assign({},d,u,{bsSize:"sm"})),b&&"append"===n?t:null),b?null:r().createElement(N,null)),b?r().createElement(N,null):null)};it.defaultProps={id:void 0,name:void 0,label:void 0,description:void 0,required:!1,agaveFile:void 0,SelectModal:void 0,addon:void 0,addonType:void 0};var ct=n(9521);var ut=function(e){return e.isLoading?r().createElement("tr",{className:"-status"},r().createElement("td",null,r().createElement(we,{placement:"inline"}))):null},mt=function(e){var t=e.display,n=e.noDataText;return t?r().createElement("tr",{className:"-status"},r().createElement("td",null,r().createElement("span",{className:"-status__message"},n))):null},dt=function(e){var t=e.tableColumns,n=e.tableData,a=e.onInfiniteScroll,l=e.isLoading,o=e.className,s=e.noDataText,i=e.getRowProps,c=e.columnMemoProps,u=r().useMemo((function(){return t}),c),m=r().useMemo((function(){return n}),[n]),d=(0,ct.useTable)({columns:u,data:m}),p=d.getTableProps,f=d.getTableBodyProps,E=d.headerGroups,g=d.rows,v=d.prepareRow;return r().createElement("table",Object.assign({},p(),{className:o+" InfiniteScrollTable"}),r().createElement("thead",null,E.map((function(e){return r().createElement("tr",e.getHeaderGroupProps(),e.headers.map((function(e){return r().createElement("th",e.getHeaderProps(),e.render("Header"))})))}))),r().createElement("tbody",Object.assign({},f(),{onScroll:function(e){var t=e.target;t.scrollHeight-t.scrollTop===t.clientHeight&&t.scrollTop>0&&a(n.length)}}),g.map((function(e){return v(e),r().createElement("tr",Object.assign({},e.getRowProps(),i(e)),e.cells.map((function(e){return r().createElement("td",e.getCellProps({className:e.column.className}),e.render("Cell"))})))})),r().createElement(ut,{isLoading:l}),r().createElement(mt,{display:!l&&0===n.length,noDataText:s})))};dt.defaultProps={onInfiniteScroll:function(e){},isLoading:!1,className:"",noDataText:"",getRowProps:function(e){},columnMemoProps:[]};var pt=function(e){var t=e.children,n=e.className,a="icon icon-"+e.name,l=n?[n,a].join(" "):a,o=t;return r().createElement("i",{className:l,role:"img","aria-label":o})};pt.defaultProps={children:"",className:""};var ft=pt;var Et=n(6244),gt=n(8089),vt=n(627),ht=n(1121);var yt=function(e){var t=e.className,n=e.detail,a=e.message,o=(0,l.useState)(!1),s=o[0],i=o[1],c=(0,l.useCallback)((function(){i(!s)}),[s,i]);return r().createElement(Et.Z,{className:(t?t+" ":"")+"Expand-module__container--DH5-jvRt4g",tag:"div"},r().createElement(gt.Z,{className:"Expand-module__summary--fOU2M68eqv",onClick:c,tag:"div"},r().createElement("strong",{className:"Expand-module__header--3OiZePUQMn"},n),r().createElement(ft,{name:s?"collapse":"expand"})),r().createElement(vt.Z,{isOpen:s},r().createElement(ht.Z,null,a)))};yt.defaultProps={className:""};var bt=n(9638),_t={"./Message.module.scss":{container:"Message-module__container--2mZsdysgRm","is-scope-inline":"Message-module__is-scope-inline--2aQjysPwl2","is-scope-section":"Message-module__is-scope-section--1uus95jWiQ",text:"Message-module__text--2wCU56N81C","type-icon":"Message-module__type-icon--2oYDWJSBbv","close-button":"Message-module__close-button--blwQE4g5mg","close-icon":"Message-module__close-icon--1MQ5OiW1aE","is-info":"Message-module__is-info--1Mx7AfmeXH",icon:"Message-module__icon--1iieNfXmjm","is-warn":"Message-module__is-warn--1llz-W8JA3","is-error":"Message-module__is-error--4ZrpxSiVG-","is-success":"Message-module__is-success--2QREP0QqRx"}};var St=function(){return(St=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},Nt=function(e,t){for(var n=0,a=t.length,l=e.length;n<a;n++,l++)e[l]=t[n];return e},Pt="For a <(Section)Message> to use `canDismiss`, `scope` must equal `section`.",wt='In a <(Section|Inline)Message> `type="warn"` is deprecated. Use `type="warning"` instead.',It='A <Message> without a `scope` should become an <InlineMessage>. (If <Message> must be used, then explicitely set `scope="inline"`.)',Tt={info:{iconName:"conversation",className:"is-info",iconText:"Notice"},success:{iconName:"approved-reverse",className:"is-success",iconText:"Notice"},warning:{iconName:"alert",className:"is-warn",iconText:"Warning"},error:{iconName:"alert",className:"is-error",iconText:"Error"}};Tt.warn=Tt.warning;Object.keys(Tt);var At={inline:{className:"is-scope-inline",role:"status",tagName:"span"},section:{className:"is-scope-section",role:"status",tagName:"p"}},Ct=(Nt([""],Object.keys(At)),function(e){var t=e.children,n=e.className,a=e.onDismiss,l=e.canDismiss,o=e.isVisible,s=e.scope,i=e.type,c=Tt[i],u=At[s||"inline"],m=c.iconName,d=c.iconText,p=c.className,f=u.role,E=u.tagName,g=u.className,v="section"===s;l&&!v&&console.error(Pt),"warn"===i&&console.info(wt),s||console.info(It);var h=[];h.push(p),h.push(g);var y=Nt(["container"],h).join(" "),b=St(St({},bt.Z.defaultProps),{unmountOnExit:!0,baseClass:"",timeout:0});return r().createElement(bt.Z,Object.assign({},b,{tag:E,role:f,in:o,className:(n?n+" ":"")+(0,Ue.Z)(y,_t,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})+" "+(b&&b.className||"")}),r().createElement(ft,{className:"Message-module__icon--1iieNfXmjm Message-module__type-icon--2oYDWJSBbv",name:m},d),r().createElement("span",{className:"Message-module__text--2wCU56N81C","data-testid":"text"},t),l&&v?r().createElement("button",{type:"button",className:"Message-module__close-button--blwQE4g5mg","aria-label":"Close",onClick:a},r().createElement(ft,{className:"Message-module__icon--1iieNfXmjm Message-module__close-icon--1MQ5OiW1aE",name:"close"})):null)});Ct.defaultProps={className:"",canDismiss:!1,isVisible:!0,onDismiss:function(){},scope:""};var Lt=Ct,Ot=function(){return(Ot=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},kt=function(e){var t=Ot(Ot(Ot({},Lt.defaultProps),e),{canDismiss:!1,scope:"inline"});return r().createElement(Lt,t)};kt.defaultProps=Lt.defaultProps;var jt=kt,xt=function(){return(xt=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},Rt=function(e){var t=(0,l.useState)(!0),n=t[0],a=t[1],o=(0,l.useCallback)((function(){a(!n)}),[n]),s=xt(xt(xt({},Lt.defaultProps),e),{isVisible:n,onDismiss:o,scope:"section"});return r().createElement(Lt,s)};Rt.defaultProps=Lt.defaultProps;var Ut=Rt,Mt=n(681),Dt={"./DescriptionList.module.scss":{container:"DescriptionList-module__container--3GUucDmAEw","is-horz":"DescriptionList-module__is-horz--3Vc4dFMPRA",key:"DescriptionList-module__key--3qyJmM1n4a",value:"DescriptionList-module__value--36HSIKiYmg","is-narrow":"DescriptionList-module__is-narrow--32R3jQ797H","is-wide":"DescriptionList-module__is-wide--1m_ihHMz-0","is-vert":"DescriptionList-module__is-vert--2IQb_ACOhb"}};var Ft=function(e,t){for(var n=0,a=t.length,l=e.length;n<a;n++,l++)e[l]=t[n];return e},Zt={vertical:"is-vert",horizontal:"is-horz"},zt=(Ft([""],Object.keys(Zt)),{compact:"is-narrow",default:"is-wide"}),qt=(Ft([""],Object.keys(zt)),function(e){var t=e.className,n=e.data,a=e.density,l=e.direction,o=[];o.push(zt[a||"default"]),o.push(Zt[l||"vertical"]);var s=Ft(["container"],o).join(" ");return r().createElement("dl",{"data-testid":"list",className:(t?t+" ":"")+(0,Ue.Z)(s,Dt,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},Object.entries(n).map((function(e){var t=e[0],n=e[1];return r().createElement(r().Fragment,{key:t},r().createElement("dt",{className:"DescriptionList-module__key--3qyJmM1n4a","data-testid":"key"},t),Array.isArray(n)?n.map((function(e){return r().createElement("dd",{className:"DescriptionList-module__value--36HSIKiYmg","data-testid":"value",key:(0,Mt.Z)()},e)})):r().createElement("dd",{className:"DescriptionList-module__value--36HSIKiYmg","data-testid":"value"},n))})))});qt.defaultProps={className:"",density:"default",direction:"vertical"};var Ht=qt;var Jt=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var l=0;for(a=Object.getOwnPropertySymbols(e);l<a.length;l++)t.indexOf(a[l])<0&&Object.prototype.propertyIsEnumerable.call(e,a[l])&&(n[a[l]]=e[a[l]])}return n},Vt=function(e){var t=e.type,n=e.onChange,a=Jt(e,["type","onChange"]),l="multiple"===t;return r().createElement(rt.Z,Object.assign({},a,{onChange:n,type:"select",className:"DropdownSelector-module__container--ScNBv0_DKI bootstrap-form__form-control--1Pxq8fh4ks "+(a&&a.className||""),multiple:l,"data-testid":"selector"}))};Vt.defaultProps={type:"single",onChange:function(){}};var Bt=Vt,Qt=n(7834),Yt=function(){return(Yt=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};function Gt(e){var t=(0,s.v9)((function(e){return e.welcomeMessages}));return t&&t[e]}function Wt(e){var t=e.children,n=e.className,a=e.messageName,l=(0,s.I0)(),o=(0,s.v9)((function(e){return e.welcomeMessages})),i=Gt(a);return r().createElement(Qt.Z,{isOpen:i,toggle:function(){return function(e){var t,n=Yt(Yt({},o),((t={})[e]=!1,t));l({type:"SAVE_WELCOME",payload:n})}(a)},color:"secondary",className:n},t)}Wt.defaultProps={className:""};var Xt=Wt,Kt={"./Pill.module.scss":{root:"Pill-module__root--3WKDSZq0rH","should-truncate":"Pill-module__should-truncate--2qBi9GN7Yb","is-danger":"Pill-module__is-danger--3A92aPARlf","is-success":"Pill-module__is-success--1Bnp4bVsR6","is-warning":"Pill-module__is-warning--1V9CIPmrW-","is-normal":"Pill-module__is-normal--1uizuYwu1t"}};function $t(e){var t=e.children,n=e.type,a=e.className,l="root is-"+n;return e.shouldTruncate&&(l+=" should-truncate"),r().createElement("span",{className:(a?a+" ":"")+(0,Ue.Z)(l,Kt,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},t)}$t.defaultProps={type:"normal",className:"",shouldTruncate:!0};var en=$t,tn=n(4855),nn={"./TextCopyField.module.scss":{input:"TextCopyField-module__input--oEAYxIzdrv bootstrap-form__form-control--1Pxq8fh4ks","copy-button":"TextCopyField-module__copy-button--3OtQl0tlDS c-button__c-button--secondary--20cNZveRg_","is-copied":"TextCopyField-module__is-copied--3HbkIDxINI",button__icon:"TextCopyField-module__button__icon--1lf-70haW- c-button__c-button__icon--before--2sl5li7HeP",button__text:"TextCopyField-module__button__text--3Oe_FXbiPQ"}};var an=function(e){var t=e.value,n=e.placeholder,a=(0,l.useState)(!1),o=a[0],s=a[1],i=(0,l.useCallback)((function(){s(!0);var e=setTimeout((function(){s(!1),clearTimeout(e)}),1150)}),[o,s]),c=!t||0===t.length;return r().createElement("div",{className:"input-group"},r().createElement("div",{className:"input-group-prepend"},r().createElement(tn.CopyToClipboard,{text:t},r().createElement(Be.Z,{style:{"--transition-duration":"0.15s"},onClick:i,disabled:c,type:"button",className:(0,Ue.Z)("copy-button "+(o?"is-copied":""),nn,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},r().createElement(ft,{name:o?"approved-reverse":"link",className:"TextCopyField-module__button__icon--1lf-70haW- c-button__c-button__icon--before--2sl5li7HeP"}),r().createElement("span",{className:"TextCopyField-module__button__text--3Oe_FXbiPQ"},"Copy")))),r().createElement("input",{type:"text",onChange:function(e){e.preventDefault()},value:t,className:"form-control TextCopyField-module__input--oEAYxIzdrv bootstrap-form__form-control--1Pxq8fh4ks",placeholder:n,"data-testid":"input",readOnly:!0}))};an.defaultProps={value:"",placeholder:""};var ln=n(9612),rn={"./ReadMore.module.scss":{clamped:"ReadMore-module__clamped--3yJcQBGmQE",expanded:"ReadMore-module__expanded--1YVjlft-eZ"}};var on=function(e){var t=e.className,n=e.children,a=(0,l.useState)(!1),o=a[0],s=a[1],i=(0,l.useCallback)((function(){s(!o)}),[o,s]),c=(0,ln.NB)(),u=c.height,m=c.ref,d=!(!m||!m.current)&&m.current.scrollHeight>u;return r().createElement(r().Fragment,null,r().createElement("div",{ref:m,className:(t?t+" ":"")+(0,Ue.Z)(o?"expanded":"clamped",rn,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},n),(d||o)&&r().createElement(Be.Z,{color:"link",onClick:i},o?"Read Less":"Read More"))};on.defaultProps={className:""};var sn=on,cn={"./Paginator.module.scss":{root:"Paginator-module__root--1ahFSs0EGG",endcap:"Paginator-module__endcap--1NUxRhpAxH","page-root":"Paginator-module__page-root--5Ku1VvWgMP",page:"Paginator-module__page--1wz47pM96V",current:"Paginator-module__current--QNRuzIEPqw"}};var un=function(e){var t=e.number,n=e.callback,a=e.current;return r().createElement("div",{className:"Paginator-module__page-root--5Ku1VvWgMP"},r().createElement(Be.Z,{onClick:function(){return n(t)},className:(0,Ue.Z)("page "+(t===a?"current":""),cn,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},t))},mn=function(e){var t,n,a=e.pages,l=e.current,o=e.callback,s=e.spread;if(1===a)n=0,t=1;else if(a>2&&a<=s)t=2,n=a-1;else if(a>s&&l<=4)t=2,n=s-1;else if(a>s&&l>a-(s-2))t=a-(s-2),n=a-1;else{var i=Math.floor((s-2)/2);t=l-i,n=l+i}var c=n-t+1,u=c>0?Array(c).fill().map((function(e,n){return t+n})):[];return r().createElement("div",{className:"Paginator-module__root--1ahFSs0EGG"},r().createElement(Be.Z,{color:"link",className:"Paginator-module__endcap--1NUxRhpAxH",onClick:function(){return o(l-1)},disabled:1===l},r().createElement("span",null,"< Previous")),r().createElement(un,{number:1,callback:o,current:l}),u[0]>2&&r().createElement("span",null,"..."),u.map((function(e){return r().createElement(un,{number:e,key:e,current:l,callback:o})})),u[u.length-1]<a-1&&r().createElement("span",null,"..."),a>1&&r().createElement(un,{number:a,callback:o,current:l}),r().createElement(Be.Z,{color:"link",className:"Paginator-module__endcap--1NUxRhpAxH",onClick:function(){return o(l+1)},disabled:l===a},r().createElement("span",null,"Next >")))};mn.defaultProps={spread:11};var dn=function(){return(dn=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},pn=function(e){var t=e.props,n=e.label,a=e.required,l=e.description,o=e.children,s=(0,We.U$)(t),i=s[0],c=s[1];s[2];return r().createElement(Xe.Z,null,r().createElement(Ke.Z,{className:"form-field__label",size:"sm",style:{display:"flex",alignItems:"center"}},n," ",a?r().createElement(at.Z,{color:"danger",style:{marginLeft:"10px"}},"Required"):null),r().Children.map(o,(function(e){return r().isValidElement(e)?r().cloneElement(e,dn(dn(dn({},i),t),{key:t.name})):e})),c.touched&&c.error?r().createElement("div",{className:"form-field__validation-error"},c.error):l&&r().createElement($e.Z,{className:"form-field__help",color:"muted"},l))};var fn=function(e){var t=e.app,n=e.onSelect,a=e.selected;return r().createElement("li",{className:"nav-item"},r().createElement("div",{className:"nav-link"+(a?" active":"")},r().createElement("div",{className:"nav-content",onClick:function(){return n(t)}},r().createElement(ft,{name:"applications"})," ",r().createElement("span",{className:"nav-text"},t.id+" v"+t.version))))};fn.defaultProps={selected:!1};var En=function(e){var t=e.config,n=e.onList,a=e.onSelect,o=e.className,i=e.select,c=(0,s.I0)(),u=_e(t),m=u.list,d=u.apps;(0,l.useEffect)((function(){c(m({onList:n,request:{select:i}}))}),[c,n]);var p=(0,l.useState)(String),f=p[0],E=p[1],g=(0,l.useCallback)((function(e){a(e),E(e.id)}),[a,E]);if(!d||d.loading)return r().createElement(we,null);var v=d.results;return r().createElement("div",{className:o||"apps-list nav flex-column"},v.map((function(e){return r().createElement(fn,{app:e,selected:f===e.id,onSelect:g})})))};En.defaultProps={config:null,onList:null,onSelect:null,select:""};var gn=En,vn=n(7561);var hn=function(e){var t=e.config,n=e.initialValues,a=e.onSubmit,o=(0,s.I0)(),i=Se(),c=i.submit,u=i.submission,m=ye(t).systems,d=(0,l.useCallback)((function(e){a&&"result"in e&&a(e.result)}),[a]),p=[{props:{name:"name",type:"string"},description:"A name for this job",label:"Name",required:!0,children:r().createElement(rt.Z,{bsSize:"sm"})},{props:{name:"appId",type:"string"},description:"The ID of the TAPIS application to run",label:"App ID",required:!0,children:r().createElement(rt.Z,{bsSize:"sm","data-testid":"appId"})},{props:{name:"appVersion",type:"string"},description:"The version of the application to run",label:"App Version",required:!0,children:r().createElement(rt.Z,{bsSize:"sm"})},{props:{name:"execSystemId",type:"select"},description:"A TAPIS system that can run this application",label:"Execution System",required:!0,children:r().createElement(rt.Z,null,m.results.map((function(e){return r().createElement("option",{key:e.id},e.id)})))}];return r().createElement("div",null,r().createElement(We.J9,{initialValues:n,enableReinitialize:!0,validationSchema:function(e){return vn.Vo((function(e){return vn.Ry({})}))},onSubmit:function(e,t){var n=t.setSubmitting;o(c({onSubmit:d,request:e})),n(!1)}},(function(e){var t=e.isSubmitting;return r().createElement(We.l0,null,p.map((function(e){return r().createElement(pn,{props:e.props,label:e.label,required:e.required,children:e.children,description:e.description,key:e.props.name})})),r().createElement("div",{className:"JobLauncher-module__status--3AceEsz_6u"},r().createElement(Be.Z,{type:"submit",className:"btn btn-primary",disabled:t||u.loading||null!=u.result},"Submit Job"),u.loading&&r().createElement(we,{className:"launcher__loading-spinner",placement:"inline"}),u.result&&r().createElement("div",{className:"JobLauncher-module__message--l4XsNc2Rby"},r().createElement(Lt,{canDismiss:!1,type:"success",scope:"inline"},"Successfully submitted job ",u.result.uuid)),u.error&&r().createElement("div",{className:"JobLauncher-module__message--l4XsNc2Rby"},r().createElement(Lt,{canDismiss:!1,type:"error",scope:"inline"},u.error.message))))})))};hn.defaultProps={config:null,initialValues:{},onSubmit:null};var yn=hn,bn={"./ListSection.module.scss":{root:"ListSection-module__root--2DA4d8l0qz",body:"ListSection-module__body--102oG2c3-P",list:"ListSection-module__list--2y4z7QGsVb",detail:"ListSection-module__detail--3z41m6afYx","sub-header":"ListSection-module__sub-header--_liFVxe7n2"}};var _n=function(e){var t=e.children,n=e.type;return r().createElement("div",{className:(0,Ue.Z)(n,bn,{autoResolveMultipleImports:!0,handleMissingStyleName:"throw"})},r().createElement(Je,null,t))},Sn=function(e){var t=e.children;return r().createElement("div",{className:"ListSection-module__body--102oG2c3-P"},t)},Nn=function(e){var t=e.children;return r().createElement("div",{className:"ListSection-module__list--2y4z7QGsVb"},t)},Pn=function(e){var t=e.children;return r().createElement("div",{className:"ListSection-module__detail--3z41m6afYx"},t)},wn=function(e){var t=e.children,n=ve().token;return!n||function(e){return Date.parse(e.expires_at)<Date.now()}(n)?r().createElement(ge.l_,{to:"/login"}):r().createElement("div",{className:"ListSection-module__root--2DA4d8l0qz"},t)},In=function(){var e=(0,l.useState)(null),t=e[0],n=e[1],a=(0,l.useCallback)((function(e){var t=e.jobAttributes&&e.jobAttributes.execSystemId?e.jobAttributes.execSystemId:null;n({appId:e.id,appVersion:e.version,name:e.id+"-"+e.version+"-"+(new Date).toISOString().slice(0,-5),execSystemId:t})}),[n]);return r().createElement(wn,null,r().createElement(_n,null,"Apps"),r().createElement(Sn,null,r().createElement(Nn,null,r().createElement(gn,{onSelect:a,select:"jobAttributes,version"})),r().createElement(Pn,null,r().createElement(_n,{type:"sub-header"},"Job Launcher"),t?r().createElement(yn,{initialValues:t}):r().createElement(Ut,{type:"info"},"Select an app from the list."))))},Tn=n(5351),An=n(6094),Cn=n(8825);var Ln=function(e){var t=e.icon,n=e.link,a=e.counter,l=e.name,o=e.text,s=e.loading;return r().createElement(Et.Z,{className:"Dashboard-module__card--1rkPVLUqXz"},r().createElement(gt.Z,null,r().createElement("div",{className:"Dashboard-module__card-header--3_AmwYXs0_"},r().createElement("div",null,r().createElement(ft,{name:t,className:"dashboard__card-icon"})),r().createElement("div",null,l))),r().createElement(ht.Z,null,r().createElement(Tn.Z,{tag:"h5"},s?r().createElement(we,{placement:"inline"}):r().createElement("div",null,a)),r().createElement(An.Z,null,o)),r().createElement(Cn.Z,{className:"Dashboard-module__card-footer--1TfjfEfI7M"},r().createElement(i.rU,{to:n},"Go to ",l),r().createElement(ft,{name:"push-right"})))},On=function(){var e=ve().token,t=ye(),n=Se(),a=_e(),o=(0,s.I0)();return(0,l.useEffect)((function(){e&&(o(t.list({})),o(n.list({})),o(a.list({})))}),[e]),r().createElement("div",null,r().createElement(Je,{className:"dashboard__section-header"},"Dashboard for ","https://tacc.tapis.io"),r().createElement("div",{className:"Dashboard-module__header--1rMoV8qiES"},r().createElement("h5",null,"Welcome to TAPIS-UI"),r().createElement("div",null,"This web application demonstrates how to leverage the TAPIS API and ",r().createElement("i",null,"tapis-ui")," React components to build a serverless interface for High Performance Computing systems.")),r().createElement("div",{className:"Dashboard-module__cards--3TQQ1_jYjM"},e?r().createElement(r().Fragment,null,r().createElement(Ln,{icon:"data-files",name:"Systems",text:"Access TAPIS systems and files",link:"/systems",counter:t.systems.results.length+" systems",loading:t.systems.loading}),r().createElement(Ln,{icon:"applications",name:"Applications",text:"View TAPIS applications and launch jobs",link:"/apps",counter:a.apps.results.length+" apps",loading:a.apps.loading}),r().createElement(Ln,{icon:"jobs",name:"Jobs",text:"View status and details for previously launched TAPIS jobs",link:"/jobs",counter:n.jobs.results.length+" jobs",loading:n.jobs.loading})):r().createElement(Et.Z,null,r().createElement(gt.Z,null,r().createElement("div",{className:"Dashboard-module__card-header--3_AmwYXs0_"},r().createElement("div",null,r().createElement(ft,{name:"user",className:"dashboard__card-icon"})),r().createElement("div",null,"You are not logged in"))),r().createElement(ht.Z,null,r().createElement(Tn.Z,null,"Please log in to use TAPIS")),r().createElement(Cn.Z,{className:"Dashboard-module__card-footer--1TfjfEfI7M"},r().createElement(i.rU,{to:"/login"},"Proceed to login"),r().createElement(ft,{name:"push-right"})))))};var kn=function(e){var t=e.job,n=e.select,a=e.selected;return r().createElement("li",{className:"nav-item"},r().createElement("div",{className:"nav-link"+(a?" active":"")},r().createElement("div",{className:"nav-content",onClick:function(){return n(t)}},r().createElement(ft,{name:"jobs"}),r().createElement("span",{className:"nav-text"},t.name+" - ("+t.status+")"))))};kn.defaultProps={selected:!1};var jn=function(e){var t=e.config,n=e.onList,a=e.onSelect,o=e.className,i=(0,s.I0)(),c=Se(t),u=c.list,m=c.jobs;(0,l.useEffect)((function(){i(u({onList:n,request:{orderBy:"created(desc)"}}))}),[i,n]);(0,l.useCallback)((function(e){a&&a(e)}),[a]);var d=(0,l.useState)(String),p=d[0],f=d[1],E=(0,l.useCallback)((function(e){a(e),f(e.uuid)}),[a,f]);if(!m||m.loading)return r().createElement(we,null);var g=m.results;return r().createElement("div",{className:o||"job-list nav flex-column"},g.map((function(e){return r().createElement(kn,{job:e,select:E,selected:p===e.uuid})})))};jn.defaultProps={config:null,onList:null,onSelect:null};var xn=jn,Rn=function(e){var t=e.config,n=e.jobUuid,a=e.onRetrieve,o=(0,s.I0)(),i=(0,l.useState)(null),c=i[0],u=i[1],m=(0,l.useState)(!1),d=(m[0],m[1]),p=(0,l.useState)(null),f=(p[0],p[1]),E=Se(t),g=(E.jobs,E.retrieve),v=(0,l.useCallback)((function(e){a&&a(e),"success"!==e.status?f(e.message):(f(null),u(e.result)),d(!1)}),[a]);return(0,l.useEffect)((function(){o(g({request:{jobUuid:n},onRetrieve:v}))}),[a,n]),c?r().createElement("div",null,r().createElement("h3",null,c.name),r().createElement("h5",null,c.uuid),r().createElement(Ht,{data:c})):r().createElement("div",null,r().createElement(we,{placement:"inline"})," Loading...")};Rn.defaultProps={config:null,onRetrieve:null};var Un=Rn,Mn=function(){var e=(0,l.useState)(null),t=e[0],n=e[1],a=(0,l.useCallback)((function(e){n(e)}),[n]);return r().createElement(wn,null,r().createElement(_n,null,"Jobs"),r().createElement(Sn,null,r().createElement(Nn,null,r().createElement(xn,{onSelect:a})),r().createElement(Pn,null,r().createElement(_n,{type:"sub-header"},"Job Details"),t?r().createElement(Un,{jobUuid:t.uuid}):r().createElement(Ut,{type:"info"},"Select a job from the list."))))};var Dn=function(e){var t=e.config,n=e.onAuth,a=(0,s.I0)(),l=ve(t),o=l.login,i=l.loading,c=l.error,u=l.token;return r().createElement(We.J9,{initialValues:{username:"",password:""},validationSchema:function(e){return vn.Vo((function(e){return vn.Ry({username:vn.Z_().required().min(1),password:vn.Z_().required().min(1)})}))},onSubmit:function(e,t){var l=t.setSubmitting,r=e.username,s=e.password;a(o(r,s,n)),l(!1)}},(function(e){var t=e.isSubmitting;return r().createElement(We.l0,null,r().createElement(pn,{label:"Username",required:!0,description:"Your TAPIS username",props:{name:"username",type:"string"}},r().createElement(rt.Z,{bsSize:"sm"})),r().createElement(pn,{label:"Password",required:!0,description:"Your TAPIS password",props:{name:"password",type:"password"}},r().createElement(rt.Z,{bsSize:"sm"})),r().createElement("div",{className:"Login-module__status--SzGTNGTcDE"},r().createElement(Be.Z,{type:"submit",className:"btn btn-primary",disabled:t||i||null!=u},"Log In"),i&&r().createElement(we,{className:"login__loading-spinner",placement:"inline"}),u&&r().createElement("div",{className:"Login-module__message--29Zj_kCH9e"},r().createElement(Lt,{canDismiss:!1,type:"success",scope:"inline"},"Successfully logged in")),c&&r().createElement("div",{className:"Login-module__message--29Zj_kCH9e"},r().createElement(Lt,{canDismiss:!1,type:"error",scope:"inline"},c.message))))}))};Dn.defaultProps={config:null,onAuth:null};var Fn=Dn,Zn=function(){var e=(0,l.useState)(!1),t=e[0],n=e[1],a=(0,l.useCallback)((function(e){e instanceof Error||!e.result||n(!0)}),[n]);return t?r().createElement(ge.l_,{to:"/"}):r().createElement(r().Fragment,null,r().createElement(Je,null,"Login"),r().createElement("div",{className:"container"},r().createElement(Fn,{onAuth:a})))};var zn=function(e){var t=e.system,n=e.select,a=e.selected;return r().createElement("li",{className:"nav-item"},r().createElement("div",{className:"nav-link"+(a?" active":"")},r().createElement("div",{className:"nav-content",onClick:function(){return n(t)}},r().createElement(ft,{name:"data-files"}),r().createElement("span",{className:"nav-text"},t.id+" ("+t.host+")"))))};zn.defaultProps={selected:!1};var qn=function(e){var t=e.config,n=e.onList,a=e.onSelect,o=e.className,i=(0,s.I0)(),c=ye(t),u=c.systems,m=c.list;(0,l.useEffect)((function(){i(m({onList:n}))}),[i]);var d=u.results,p=(0,l.useState)(String),f=p[0],E=p[1],g=(0,l.useCallback)((function(e){a(e),E(e.id)}),[a,E]);return u.loading?r().createElement(we,null):r().createElement("div",{className:o||"system-list nav flex-column"},d.length?d.map((function(e){return r().createElement(zn,{system:e,selected:f===e.id,select:g})})):r().createElement("i",null,"No systems found"))};qn.defaultProps={config:null,onList:null,onSelect:null};var Hn=qn,Jn=function(e,t){return function(n){if(e in n.files.listings&&t in n.files.listings[e])return n.files.listings[e][t]}};var Vn=function(e){var t=e.file,n=e.onSelect;return r().createElement("li",{onClick:function(){return n?n(t):null}},r().createElement(ft,{name:"file"})," ",""+t.name)};Vn.defaultProps={onSelect:null};var Bn=function(e){var t=e.systemId,n=e.path,a=e.config,o=e.onList,i=e.onSelect,c=(0,s.I0)(),u=be(a).list;(0,l.useEffect)((function(){c(u({onList:o,request:{systemId:t,path:n}}))}),[c,t,n,o]);var m=(0,s.v9)(Jn(t,n));(0,l.useCallback)((function(e){i&&i(e)}),[i]);if(!m||m.loading)return r().createElement("div",{className:"file-list"},r().createElement(we,null));var d=m.results;return r().createElement("div",{className:"file-list"},d.map((function(e){return r().createElement(Vn,{file:e})})))};Bn.defaultProps={config:null,onList:null,onSelect:null};var Qn=Bn,Yn=function(e){var t=e.config,n=(0,l.useState)(null),a=n[0],o=n[1],s=(0,l.useCallback)((function(e){o(e)}),[o]);return r().createElement(wn,null,r().createElement(_n,null,"System List"),r().createElement(Sn,null,r().createElement(Nn,null,r().createElement(Hn,{config:t,onSelect:s})),r().createElement(Pn,null,r().createElement(_n,{type:"sub-header"},"Files"),a?r().createElement(Qn,{systemId:a.id,path:"/"}):r().createElement(Ut,{type:"info"},"Select a system from the list."))))},Gn=n(3999),Wn=n(8008),Xn=n(7243);var Kn=function(e){var t=e.to,n=e.label,a=e.iconName;return r().createElement(Gn.Z,null,r().createElement(Wn.Z,{tag:i.OL,to:t,exact:!0,className:"Sidebar-module__link--3iqxHlfbWc",activeClassName:"Sidebar-module__link--active--3dvlxhA8fo",disabled:!1},r().createElement("div",{className:"nav-content Sidebar-module__content--iukt0PwbUd"},r().createElement(ft,{name:a}),r().createElement("span",{className:"Sidebar-module__text--2_De6LmZTH"},n))))},$n=function(){var e=ve().token;return r().createElement(Xn.Z,{className:"Sidebar-module__root--2Oiv6meLgm",vertical:!0},r().createElement(Kn,{to:"/",label:"Dashboard",iconName:"dashboard"}),!e&&r().createElement(Kn,{to:"/login",label:"Login",iconName:"user"}),e&&r().createElement(r().Fragment,null,r().createElement(Kn,{to:"/systems",label:"Systems",iconName:"data-files"}),r().createElement(Kn,{to:"/apps",label:"Apps",iconName:"applications"}),r().createElement(Kn,{to:"/jobs",label:"Jobs",iconName:"jobs"}),r().createElement(Kn,{to:"/logout",label:"Log Out",iconName:"user"})))};$n.defaultProps={jwt:null};var ea=$n;var ta={short:r().createElement("a",{href:window.location.href,onClick:function(e){return e.preventDefault()},className:"wb-link"},"Example link"),long:r().createElement("a",{href:window.location.href,onClick:function(e){return e.preventDefault()},className:"wb-link"},"Example link can be a complete sentence.")},na={short:"You exist.",long:"All your information, are belong to us."},aa={short:"We did well.",long:"All your success, are belong to us."},la={short:"You did poorly.",long:"All your warning, are come from us."},ra={short:"You failed.",long:"All your error, are belong to you."},oa=r().createElement("em",null,"Can not render in isolation. See"," ",r().createElement("a",{href:"https://xd.adobe.com/view/db2660cc-1011-4f26-5d31-019ce87c1fe8-ad17/screen/3821fc3e-bda1-40d4-9e50-a514e90aa088/",target:"_blank",rel:"noreferrer"},"Adobe Design."));var sa=function(){return r().createElement("table",{className:"UIPatternsMessage-module__container--3JekOxYuU_"},r().createElement("thead",null,r().createElement("tr",null,r().createElement("th",{scope:"row",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},"component"),r().createElement("th",{scope:"col"},r().createElement("code",null,"<InlineMessage>"),r().createElement("code",null,'<Message scope="inline">')),r().createElement("th",{scope:"col"},r().createElement("code",null,"<SectionMessage (canDismiss)>"),r().createElement("code",null,'<Message scope="section" (canDismiss)>')),r().createElement("th",{scope:"col"},r().createElement("code",null,r().createElement("s",null,"<AppMessage>")),r().createElement("code",null,"<NotifcationToast>"))),r().createElement("tr",null,r().createElement("th",{scope:"row",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},r().createElement("code",null,"scope")),r().createElement("th",{scope:"col"},r().createElement("code",null,"inline")),r().createElement("th",{scope:"col"},r().createElement("code",null,"section")),r().createElement("th",{scope:"col"},r().createElement("code",null,"app"))),r().createElement("tr",null,r().createElement("th",{scope:"col",className:"UIPatternsMessage-module__secondary---vRsFa8C4Y"},r().createElement("code",null,"type")),r().createElement("td",null,"When to Use",r().createElement("ul",null,r().createElement("li",null,"action result statement in table row"),r().createElement("li",null,"message when table can not load data"))),r().createElement("td",null,"When to Use",r().createElement("ul",null,r().createElement("li",null,"warning at the top of a form"),r().createElement("li",null,"message after successful submission of form"))),r().createElement("td",null,"When to Use",r().createElement("ul",null,r().createElement("li",null,"user action is required"),r().createElement("li",null,"important user-initiated action is completed"),r().createElement("li",null,"security concern"),r().createElement("li",null,"milestone for time-sensitive activity"))))),r().createElement("tbody",null,r().createElement("tr",null,r().createElement("th",{scope:"row"},r().createElement("code",null,"info")),r().createElement("td",null,r().createElement(jt,{type:"info"},na.long," ",ta.short),r().createElement("hr",null),r().createElement(jt,{type:"info"},na.short," ",ta.long)),r().createElement("td",null,r().createElement(Ut,{type:"info"},na.long," ",ta.short),r().createElement(Ut,{type:"info",canDismiss:!0},na.short," ",ta.long)),r().createElement("td",{rowSpan:"2"},oa)),r().createElement("tr",null,r().createElement("th",{scope:"row"},r().createElement("code",null,"success")),r().createElement("td",null,r().createElement(jt,{type:"success"},aa.long," ",ta.short),r().createElement("hr",null),r().createElement(jt,{type:"success"},aa.short," ",ta.long)),r().createElement("td",null,r().createElement(Ut,{type:"success"},aa.long," ",ta.short),r().createElement(Ut,{type:"success",canDismiss:!0},aa.short," ",ta.long))),r().createElement("tr",null,r().createElement("th",{scope:"row"},r().createElement("code",null,"warn")),r().createElement("td",null,r().createElement(jt,{type:"warn"},la.long," ",ta.short),r().createElement("hr",null),r().createElement(jt,{type:"warn"},la.short," ",ta.long)),r().createElement("td",null,r().createElement(Ut,{type:"warn"},la.long," ",ta.short),r().createElement(Ut,{type:"warn",canDismiss:!0},la.short," ",ta.long)),r().createElement("td",{rowSpan:"2",className:"UIPatternsMessage-module__is-row-end--30wX3GXjk5"},oa)),r().createElement("tr",null,r().createElement("th",{scope:"row"},r().createElement("code",null,"error")),r().createElement("td",null,r().createElement(jt,{type:"error"},ra.long," ",ta.short),r().createElement("hr",null),r().createElement(jt,{type:"error"},ra.short," ",ta.long)),r().createElement("td",null,r().createElement(Ut,{type:"error"},ra.long," ",ta.short),r().createElement(Ut,{type:"error",canDismiss:!0},ra.short," ",ta.long)))))};var ia={Username:"bobward500",Prefix:"Mr.",Name:"Bob Ward",Suffix:"The 5th","Favorite Numeric Value":5,Icon:r().createElement(ft,{name:"dashboard"})};var ca=function(){return r().createElement(r().Fragment,null,r().createElement("div",{className:"UIPatternsDescriptionList-module__list-cols--3ksSB0gUfs"},r().createElement("dl",null,r().createElement("dt",null,"Vertical Layout & Default Density"),r().createElement("dd",null,r().createElement(Ht,{data:ia}))),r().createElement("dl",null,r().createElement("dt",null,"Vertical Layout & Compact Density"),r().createElement("dd",null,r().createElement(Ht,{data:ia,density:"compact"}))),r().createElement("dl",null,r().createElement("dt",null,"Vertical Layout & Compact Density - Narrow Container"),r().createElement("dd",null,r().createElement(Ht,{data:ia,density:"compact",className:"UIPatternsDescriptionList-module__item-x-narrow--1rvcBF79vm"})))),r().createElement("div",{className:"UIPatternsDescriptionList-module__list-rows--2r1RZfz1lt"},r().createElement("dl",null,r().createElement("dt",null,"Horizontal Layout & Default Density"),r().createElement("dd",null,r().createElement(Ht,{data:ia,direction:"horizontal"})),r().createElement("dt",null,"Horizontal Layout & Compact Density"),r().createElement("dd",null,r().createElement(Ht,{data:ia,density:"compact",direction:"horizontal"})),r().createElement("dt",null,"Horizontal Layout & Compact Density - Narrow Container"),r().createElement("dd",null,r().createElement(Ht,{data:ia,density:"compact",direction:"horizontal",className:"UIPatternsDescriptionList-module__item-narrow--1XTYrbGHay"})))),r().createElement("div",{className:"UIPatternsDescriptionList-module__list-rows--2r1RZfz1lt"},r().createElement("dl",null,r().createElement("dt",null,"Vertical Layout & Nested Data"),r().createElement("dd",null,r().createElement(Ht,{data:{"Nested List One":r().createElement(Ht,{data:ia,direction:"vertical"}),"Nested List Two":r().createElement(Ht,{data:ia,direction:"vertical"})}})),r().createElement("dt",null,"Horizontal Layout & Nested Data"),r().createElement("dd",null,r().createElement(Ht,{data:{"Nested List One":r().createElement(Ht,{data:ia,direction:"horizontal"}),"Nested List Two":r().createElement(Ht,{data:ia,direction:"horizontal"})},direction:"vertical"})))))};var ua=function(){return r().createElement("dl",null,r().createElement("dt",null,"Default (",r().createElement("code",null,"single"),")"),r().createElement("dd",null,r().createElement("small",null,"Only field (not dropdown) can be styled cross-browser."),r().createElement(Bt,null,r().createElement("optgroup",{label:"Cryptographic People"},r().createElement("option",{value:"alice"},"Alice"),r().createElement("option",{value:"bob"},"Bob"),r().createElement("option",{value:"charlie"},"Charlie")),r().createElement("optgroup",{label:"Common American Fruit"},r().createElement("option",{value:"apple"},"Apple"),r().createElement("option",{value:"banana"},"Banana"),r().createElement("option",{value:"grapes"},"Grapes")))),r().createElement("dt",null,"Multiple (",r().createElement("code",null,"multiple"),")"),r().createElement("dd",null,r().createElement("small",null,"Styling options are limited and browser-dependent."),r().createElement(Bt,{type:"multiple"},r().createElement("optgroup",{label:"Cryptographic People"},r().createElement("option",{value:"alice"},"Alice"),r().createElement("option",{value:"bob"},"Bob"),r().createElement("option",{value:"charlie"},"Charlie")),r().createElement("optgroup",{label:"Common American Fruit"},r().createElement("option",{value:"apple"},"Apple"),r().createElement("option",{value:"banana"},"Banana"),r().createElement("option",{value:"grapes"},"Grapes")))))};var ma=function(){return r().createElement("dl",null,r().createElement("dt",null,"Default Pill (normal)"),r().createElement("dd",null,r().createElement(en,null,"Example Pill")),r().createElement("dt",null,"Normal Pill"),r().createElement("dd",null,r().createElement(en,{type:"normal"},"Normal Pill")),r().createElement("dt",null,"Success Pill"),r().createElement("dd",null,r().createElement(en,{type:"success"},"Success Pill")),r().createElement("dt",null,"Warning Pill"),r().createElement("dd",null,r().createElement(en,{type:"warning"},"Warning Pill")),r().createElement("dt",null,"Danger Pill"),r().createElement("dd",null,r().createElement(en,{type:"danger"},"Danger Pill")))};var da=function(){return r().createElement("div",{className:"UIPatternsReadMore-module__root--2ATMc7IutA"},r().createElement(sn,null,"Long text beyond 4 lines should be clamped. Short text should not be clamped. This element is responsive to line number changes due to window resizing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis dapibus leo ornare sem mollis viverra. Sed metus tortor, luctus vitae tempus a, consectetur eu enim. Vivamus euismod ante sed augue aliquam, at venenatis risus varius. Duis laoreet, tellus at euismod consequat, nulla neque vestibulum sapien, at placerat erat nibh at ligula. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum mattis elit non enim gravida tempus. Quisque et nisi ligula. Quisque sagittis vel ex sed rhoncus. In lacus purus, elementum vel ullamcorper at, accumsan congue sem. Morbi eu mattis magna. Donec arcu ligula, mollis ac leo ut, pretium euismod turpis. Maecenas quis elit id dui vehicula sagittis semper aliquet enim."))};var pa=function(){return r().createElement("div",null,r().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},r().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},r().createElement("h6",null,"Message & Notification"),r().createElement(sa,null)),r().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},r().createElement("h6",null,"DropdownSelector"),r().createElement(ua,null))),r().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},r().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},r().createElement("h6",null,"DescriptionList"),r().createElement(ca,null))),r().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},r().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},r().createElement("h6",null,"Pills"),r().createElement(ma,null))),r().createElement("div",{className:"UIPatterns-module__items--3RYCcKfRS5"},r().createElement("div",{className:"UIPatterns-module__grid-item--mhncyVP9FC"},r().createElement("h6",null,"Read More"),r().createElement(da,null))))},fa=function(){var e=(0,s.I0)(),t=ve().logout;return(0,l.useEffect)((function(){e(t())}),[t,e]),r().createElement(ge.l_,{to:"/"})};var Ea=function(){return r().createElement("div",{className:"workbench-wrapper"},r().createElement(ea,null),r().createElement("div",{className:"workbench-content"},r().createElement(ge.AW,{exact:!0,path:"/"},r().createElement(On,null)),r().createElement(ge.AW,{path:"/login"},r().createElement(Zn,null)),r().createElement(ge.AW,{path:"/logout"},r().createElement(fa,null)),r().createElement(ge.AW,{path:"/systems"},r().createElement(Yn,null)),r().createElement(ge.AW,{path:"/apps"},r().createElement(In,null)),r().createElement(ge.AW,{path:"/jobs"},r().createElement(Mn,null)),r().createElement(ge.AW,{path:"/uipatterns"},r().createElement(Je,null,"UI Patterns"),r().createElement(pa,null))))};n(4155),Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var ga=Ee();o.render(l.createElement(s.zt,{store:ga},l.createElement(i.UT,null,l.createElement(Je,{className:"tapis-ui__header"},"TAPIS UI"),l.createElement(Ea,null))),document.getElementById("react-root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},n={};function a(e){var l=n[e];if(void 0!==l)return l.exports;var r=n[e]={id:e,loaded:!1,exports:{}};return t[e].call(r.exports,r,r.exports,a),r.loaded=!0,r.exports}a.m=t,e=[],a.O=function(t,n,l,r){if(!n){var o=1/0;for(c=0;c<e.length;c++){n=e[c][0],l=e[c][1],r=e[c][2];for(var s=!0,i=0;i<n.length;i++)(!1&r||o>=r)&&Object.keys(a.O).every((function(e){return a.O[e](n[i])}))?n.splice(i--,1):(s=!1,r<o&&(o=r));s&&(e.splice(c--,1),t=l())}return t}r=r||0;for(var c=e.length;c>0&&e[c-1][2]>r;c--)e[c]=e[c-1];e[c]=[n,l,r]},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,{a:t}),t},a.d=function(e,t){for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){var e={179:0};a.O.j=function(t){return 0===e[t]};var t=function(t,n){var l,r,o=n[0],s=n[1],i=n[2],c=0;for(l in s)a.o(s,l)&&(a.m[l]=s[l]);if(i)var u=i(a);for(t&&t(n);c<o.length;c++)r=o[c],a.o(e,r)&&e[r]&&e[r][0](),e[o[c]]=0;return a.O(u)},n=self.webpackChunktapis_ui=self.webpackChunktapis_ui||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),a.O(void 0,[729],(function(){return a(3658)}));var l=a.O(void 0,[729],(function(){return a(4538)}));l=a.O(l)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,